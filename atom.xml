<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog of meurice</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meurice.xyz/"/>
  <updated>2021-05-10T09:49:25.593Z</updated>
  <id>http://meurice.xyz/</id>
  
  <author>
    <name>meurice</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[学习日志]ZBG财经求职力挑战赛[pyecharts数据可视化]</title>
    <link href="http://meurice.xyz/2021/ckoilxj7c000i54lx4cmlafof/"/>
    <id>http://meurice.xyz/2021/ckoilxj7c000i54lx4cmlafof/</id>
    <published>2021-05-08T16:11:00.000Z</published>
    <updated>2021-05-10T09:49:25.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h2><p>　　<strong>题目1：</strong><br>　　分析小米公司手机业务目前所处的宏观经营环境以及产业环境。<br>　　<strong>题目2：</strong><br>　　为小米公司制定未来三年手机业务发展策略，帮助小米公司：<br>　　　－　维持在低端手机市场的占有率<br>　　　－　突破高端市场，实现更高的高端手机出货量</p><h2 id="pyecharts自适应显示"><a href="#pyecharts自适应显示" class="headerlink" title="pyecharts自适应显示"></a>pyecharts自适应显示</h2><p>　　 <strong>-</strong> 1. 获取浏览器窗口长宽<br>　　 <strong>-</strong> 2. 设置显示区域长款百分比<br>　　 <strong>-</strong> 3. 设置居中参数<br>　　 <strong>-</strong> 4. 设置自适应（根据显示区域调整刷新）  </p><p>　　<strong>step1.</strong> 修改.\Lib\site-packages\pyecharts\render\templates\ <strong>macro</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- macro render_chart_content(c) -%&#125;</span><br><span class="line">    &lt;div id&#x3D;&quot;&#123;&#123; c.chart_id &#125;&#125;&quot; class&#x3D;&quot;chart-container&quot; style&#x3D;&quot;width:95%; height:95%; margin:auto; top:30px&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var chart_&#123;&#123; c.chart_id &#125;&#125; &#x3D; echarts.init(</span><br><span class="line">            document.getElementById(&#39;&#123;&#123; c.chart_id &#125;&#125;&#39;), &#39;&#123;&#123; c.theme &#125;&#125;&#39;, &#123;renderer: &#39;&#123;&#123; c.renderer &#125;&#125;&#39;&#125;);</span><br><span class="line">        &#123;% for js in c.js_functions.items %&#125;</span><br><span class="line">            &#123;&#123; js &#125;&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">        var option_&#123;&#123; c.chart_id &#125;&#125; &#x3D; &#123;&#123; c.json_contents &#125;&#125;;</span><br><span class="line">        chart_&#123;&#123; c.chart_id &#125;&#125;.setOption(option_&#123;&#123; c.chart_id &#125;&#125;);</span><br><span class="line">        &#123;% if c._is_geo_chart %&#125;</span><br><span class="line">            var bmap &#x3D; chart_&#123;&#123; c.chart_id &#125;&#125;.getModel().getComponent(&#39;bmap&#39;).getBMap();</span><br><span class="line">            &#123;% if c.bmap_js_functions %&#125;</span><br><span class="line">                &#123;% for fn in c.bmap_js_functions.items %&#125;</span><br><span class="line">                    &#123;&#123; fn &#125;&#125;</span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">        &#123;% if c.width.endswith(&#39;%&#39;) %&#125;</span><br><span class="line">            window.addEventListener(&#39;resize&#39;, function()&#123;</span><br><span class="line">                chart_&#123;&#123; c.chart_id &#125;&#125;.resize();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;   </span><br><span class="line">    var x&#x3D;window.innerWidth;</span><br><span class="line">    function resizeFresh()&#123;</span><br><span class="line">        if(x!&#x3D;window.innerWidth)</span><br><span class="line">            location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&#123;%- endmacro %&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>step2.</strong> 修改.\Lib\site-packages\pyecharts\render\templates\ <strong>simple_chart.html</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% import &#39;macro&#39; as macro %&#125;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123; chart.page_title &#125;&#125;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1.0,maximum-scale&#x3D;1.0,minimum-scale&#x3D;1.0,user-scalable&#x3D;yes&quot;&gt;</span><br><span class="line">    &#123;&#123; macro.render_chart_dependencies(chart) &#125;&#125;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        html,body&#123;</span><br><span class="line">            height:100%;</span><br><span class="line">            width:100%</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body onresize&#x3D;&quot;resizeFresh()&quot;&gt;</span><br><span class="line">    &#123;&#123; macro.render_chart_content(chart) &#125;&#125;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="可视化分析-pyecharts"><a href="#可视化分析-pyecharts" class="headerlink" title="可视化分析[pyecharts]"></a>可视化分析[pyecharts]</h2><p>　　pyecharts相关配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!jupyter trust Visualization.ipynb</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">'ignore'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts.globals <span class="keyword">import</span> CurrentConfig, NotebookType, OnlineHostType</span><br><span class="line"><span class="comment">#http://127.0.0.1:8000/assets/</span></span><br><span class="line"></span><br><span class="line">CurrentConfig.ONLINE_HOST = <span class="string">'https://assets.pyecharts.org/assets/'</span></span><br><span class="line">CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB</span><br><span class="line"></span><br><span class="line">CurrentConfig.ONLINE_HOST</span><br></pre></td></tr></table></figure><h3 id="全球手机出货量-市场份额数据可视化"><a href="#全球手机出货量-市场份额数据可视化" class="headerlink" title="全球手机出货量/市场份额数据可视化"></a>全球手机出货量/市场份额数据可视化</h3><p> 　　剔除部分有缺失的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GSMS = pd.read_csv(<span class="string">'Global_Smartphone_Market_Share.csv'</span>).iloc[:,<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">'deleted:'</span>,set(GSMS.iloc[np.where(GSMS.isnull())[<span class="number">0</span>],<span class="number">0</span>].tolist()))</span><br><span class="line">GSMS = GSMS[~GSMS.Vendor.isin(GSMS.iloc[np.where(GSMS.isnull())[<span class="number">0</span>],<span class="number">0</span>].tolist())]</span><br><span class="line"></span><br><span class="line">display(GSMS)</span><br></pre></td></tr></table></figure><p>　　<br>　　deleted: {‘Lenovo’, ‘Realme’, ‘LG’}  </p><table><thead><tr><th>Index</th><th>品牌</th><th>年份</th><th>季度</th><th>出货量（百万）</th><th>市场份额</th></tr></thead><tbody><tr><td>0</td><td>Samsung</td><td>2018</td><td>Q1</td><td>78.2</td><td>22.0%</td></tr><tr><td>1</td><td>Samsung</td><td>2018</td><td>Q2</td><td>71.5</td><td>19.0%</td></tr><tr><td>2</td><td>Samsung</td><td>2018</td><td>Q3</td><td>72.3</td><td>19.0%</td></tr><tr><td>3</td><td>Samsung</td><td>2018</td><td>Q4</td><td>69.8</td><td>18.0%</td></tr><tr><td>4</td><td>Samsung</td><td>2019</td><td>Q1</td><td>72.0</td><td>21.0%</td></tr><tr><td>5</td><td>Samsung</td><td>2019</td><td>Q2</td><td>76.3</td><td>21.0%</td></tr><tr><td>6</td><td>Samsung</td><td>2019</td><td>Q3</td><td>78.2</td><td>21.0%</td></tr><tr><td>7</td><td>Samsung</td><td>2019</td><td>Q4</td><td>70.4</td><td>18.0%</td></tr><tr><td>8</td><td>Samsung</td><td>2020</td><td>Q1</td><td>58.6</td><td>20.0%</td></tr><tr><td>9</td><td>Samsung</td><td>2020</td><td>Q2</td><td>54.2</td><td>20.0%</td></tr><tr><td>10</td><td>Samsung</td><td>2020</td><td>Q3</td><td>80.4</td><td>22.0%</td></tr><tr><td>11</td><td>Samsung</td><td>2020</td><td>Q4</td><td>62.5</td><td>16.0%</td></tr><tr><td>12</td><td>Samsung</td><td>2021</td><td>Q1</td><td>76.6</td><td>22.0%</td></tr><tr><td>13</td><td>Apple</td><td>2018</td><td>Q1</td><td>52.2</td><td>14.0%</td></tr><tr><td>14</td><td>Apple</td><td>2018</td><td>Q2</td><td>41.3</td><td>11.0%</td></tr><tr><td>15</td><td>Apple</td><td>2018</td><td>Q3</td><td>46.9</td><td>12.0%</td></tr><tr><td>16</td><td>Apple</td><td>2018</td><td>Q4</td><td>65.9</td><td>17.0%</td></tr><tr><td>17</td><td>Apple</td><td>2019</td><td>Q1</td><td>42.0</td><td>12.0%</td></tr><tr><td>18</td><td>Apple</td><td>2019</td><td>Q2</td><td>36.5</td><td>10.0%</td></tr><tr><td>19</td><td>Apple</td><td>2019</td><td>Q3</td><td>44.8</td><td>12.0%</td></tr><tr><td>20</td><td>Apple</td><td>2019</td><td>Q4</td><td>72.3</td><td>18.0%</td></tr><tr><td>21</td><td>Apple</td><td>2020</td><td>Q1</td><td>40.0</td><td>14.0%</td></tr><tr><td>22</td><td>Apple</td><td>2020</td><td>Q2</td><td>37.5</td><td>14.0%</td></tr><tr><td>23</td><td>Apple</td><td>2020</td><td>Q3</td><td>41.7</td><td>11.0%</td></tr><tr><td>24</td><td>Apple</td><td>2020</td><td>Q4</td><td>81.9</td><td>21.0%</td></tr><tr><td>25</td><td>Apple</td><td>2021</td><td>Q1</td><td>59.5</td><td>17.0%</td></tr><tr><td>26</td><td>Huawei</td><td>2018</td><td>Q1</td><td>39.3</td><td>11.0%</td></tr><tr><td>27</td><td>Huawei</td><td>2018</td><td>Q2</td><td>54.2</td><td>15.0%</td></tr><tr><td>28</td><td>Huawei</td><td>2018</td><td>Q3</td><td>52.0</td><td>14.0%</td></tr><tr><td>29</td><td>Huawei</td><td>2018</td><td>Q4</td><td>59.7</td><td>15.0%</td></tr><tr><td>30</td><td>Huawei</td><td>2019</td><td>Q1</td><td>59.1</td><td>17.0%</td></tr><tr><td>31</td><td>Huawei</td><td>2019</td><td>Q2</td><td>56.6</td><td>16.0%</td></tr><tr><td>32</td><td>Huawei</td><td>2019</td><td>Q3</td><td>66.8</td><td>18.0%</td></tr><tr><td>33</td><td>Huawei</td><td>2019</td><td>Q4</td><td>56.2</td><td>14.0%</td></tr><tr><td>34</td><td>Huawei</td><td>2020</td><td>Q1</td><td>49.0</td><td>17.0%</td></tr><tr><td>35</td><td>Huawei</td><td>2020</td><td>Q2</td><td>54.8</td><td>20.0%</td></tr><tr><td>36</td><td>Huawei</td><td>2020</td><td>Q3</td><td>50.9</td><td>14.0%</td></tr><tr><td>37</td><td>Huawei</td><td>2020</td><td>Q4</td><td>33.0</td><td>8.0%</td></tr><tr><td>38</td><td>Huawei</td><td>2021</td><td>Q1</td><td>15.0</td><td>4.0%</td></tr><tr><td>39</td><td>Xiaomi</td><td>2018</td><td>Q1</td><td>28.1</td><td>8.0%</td></tr><tr><td>40</td><td>Xiaomi</td><td>2018</td><td>Q2</td><td>32.0</td><td>9.0%</td></tr><tr><td>41</td><td>Xiaomi</td><td>2018</td><td>Q3</td><td>33.3</td><td>9.0%</td></tr><tr><td>42</td><td>Xiaomi</td><td>2018</td><td>Q4</td><td>25.6</td><td>6.0%</td></tr><tr><td>43</td><td>Xiaomi</td><td>2019</td><td>Q1</td><td>27.8</td><td>8.0%</td></tr><tr><td>44</td><td>Xiaomi</td><td>2019</td><td>Q2</td><td>32.3</td><td>9.0%</td></tr><tr><td>45</td><td>Xiaomi</td><td>2019</td><td>Q3</td><td>31.7</td><td>8.0%</td></tr><tr><td>46</td><td>Xiaomi</td><td>2019</td><td>Q4</td><td>32.9</td><td>8.0%</td></tr><tr><td>47</td><td>Xiaomi</td><td>2020</td><td>Q1</td><td>29.7</td><td>10.0%</td></tr><tr><td>48</td><td>Xiaomi</td><td>2020</td><td>Q2</td><td>26.5</td><td>10.0%</td></tr><tr><td>49</td><td>Xiaomi</td><td>2020</td><td>Q3</td><td>46.2</td><td>13.0%</td></tr><tr><td>50</td><td>Xiaomi</td><td>2020</td><td>Q4</td><td>43.0</td><td>11.0%</td></tr><tr><td>51</td><td>Xiaomi</td><td>2021</td><td>Q1</td><td>48.5</td><td>14.0%</td></tr><tr><td>52</td><td>Oppo</td><td>2018</td><td>Q1</td><td>24.2</td><td>7.0%</td></tr><tr><td>53</td><td>Oppo</td><td>2018</td><td>Q2</td><td>29.6</td><td>8.0%</td></tr><tr><td>54</td><td>Oppo</td><td>2018</td><td>Q3</td><td>33.9</td><td>9.0%</td></tr><tr><td>55</td><td>Oppo</td><td>2018</td><td>Q4</td><td>31.3</td><td>8.0%</td></tr><tr><td>56</td><td>Oppo</td><td>2019</td><td>Q1</td><td>25.7</td><td>8.0%</td></tr><tr><td>57</td><td>Oppo</td><td>2019</td><td>Q2</td><td>30.6</td><td>9.0%</td></tr><tr><td>58</td><td>Oppo</td><td>2019</td><td>Q3</td><td>32.3</td><td>9.0%</td></tr><tr><td>59</td><td>Oppo</td><td>2019</td><td>Q4</td><td>31.4</td><td>8.0%</td></tr><tr><td>60</td><td>Oppo</td><td>2020</td><td>Q1</td><td>22.3</td><td>8.0%</td></tr><tr><td>61</td><td>Oppo</td><td>2020</td><td>Q2</td><td>24.5</td><td>9.0%</td></tr><tr><td>62</td><td>Oppo</td><td>2020</td><td>Q3</td><td>31.0</td><td>8.0%</td></tr><tr><td>63</td><td>Oppo</td><td>2020</td><td>Q4</td><td>34.0</td><td>9.0%</td></tr><tr><td>64</td><td>Oppo</td><td>2021</td><td>Q1</td><td>38.0</td><td>11.0%</td></tr><tr><td>65</td><td>Vivo</td><td>2018</td><td>Q1</td><td>18.9</td><td>5.0%</td></tr><tr><td>66</td><td>Vivo</td><td>2018</td><td>Q2</td><td>26.5</td><td>7.0%</td></tr><tr><td>67</td><td>Vivo</td><td>2018</td><td>Q3</td><td>30.5</td><td>8.0%</td></tr><tr><td>68</td><td>Vivo</td><td>2018</td><td>Q4</td><td>26.5</td><td>7.0%</td></tr><tr><td>69</td><td>Vivo</td><td>2019</td><td>Q1</td><td>23.9</td><td>7.0%</td></tr><tr><td>70</td><td>Vivo</td><td>2019</td><td>Q2</td><td>27.0</td><td>8.0%</td></tr><tr><td>71</td><td>Vivo</td><td>2019</td><td>Q3</td><td>31.3</td><td>8.0%</td></tr><tr><td>72</td><td>Vivo</td><td>2019</td><td>Q4</td><td>31.5</td><td>8.0%</td></tr><tr><td>73</td><td>Vivo</td><td>2020</td><td>Q1</td><td>21.6</td><td>7.0%</td></tr><tr><td>74</td><td>Vivo</td><td>2020</td><td>Q2</td><td>22.5</td><td>8.0%</td></tr><tr><td>75</td><td>Vivo</td><td>2020</td><td>Q3</td><td>31.0</td><td>8.0%</td></tr><tr><td>76</td><td>Vivo</td><td>2020</td><td>Q4</td><td>33.4</td><td>8.0%</td></tr><tr><td>77</td><td>Vivo</td><td>2021</td><td>Q1</td><td>35.5</td><td>10.0%</td></tr></tbody></table><h4 id="2018Q1-2021Q1-全球智能手机出货量-市场份额"><a href="#2018Q1-2021Q1-全球智能手机出货量-市场份额" class="headerlink" title="2018Q1 - 2021Q1 全球智能手机出货量/市场份额"></a>2018Q1 - 2021Q1 全球智能手机出货量/市场份额</h4><h5 id="出货量（按年份）柱状图"><a href="#出货量（按年份）柱状图" class="headerlink" title="出货量（按年份）柱状图"></a>出货量（按年份）柱状图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">grouped_df_year = GSMS[GSMS.Year &lt; <span class="number">2021</span>].groupby([<span class="string">'Vendor'</span>,<span class="string">'Year'</span>]).agg(&#123;<span class="string">'Shipment_Volumes'</span>:<span class="string">'sum'</span>,<span class="string">'Market_Share'</span>:<span class="string">'sum'</span>&#125;).reset_index()</span><br><span class="line">grouped_df_year.Shipment_Volumes = round(grouped_df_year.Shipment_Volumes,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bar = Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,\</span><br><span class="line">                                  width=<span class="string">'1100px'</span>,\</span><br><span class="line">                                  height=<span class="string">'500px'</span>))\</span><br><span class="line">            .add_xaxis(grouped_df_year.Vendor.unique().tolist())\</span><br><span class="line">            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'2018-2020全球年出货量'</span>),\</span><br><span class="line">                             legend_opts=opts.LegendOpts(type_=<span class="string">'plain'</span>,orient=<span class="string">'horizontal'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> grouped_df_year.Year.unique():</span><br><span class="line">    bar = bar.add_yaxis(str(y) + <span class="string">'年全球出货量（百万）'</span>,grouped_df_year[grouped_df_year.Year == y].Shipment_Volumes.tolist())</span><br><span class="line">    </span><br><span class="line">bar.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style><meta name="generator" content="Hexo 4.2.1"><link rel="alternate" href="/atom.xml" title="blog of meurice" type="application/atom+xml"></head><body onresize="resizeFresh()">    <div id="aaf3926ed4944c62aeb73f2b1424ec8e" class="chart-container" style="width:95%; height:395%;margin:auto; top:0px;"></div>    <script>        var chart_aaf3926ed4944c62aeb73f2b1424ec8e = echarts.init(            document.getElementById('aaf3926ed4944c62aeb73f2b1424ec8e'), 'light', {renderer: 'canvas'});        var option_aaf3926ed4944c62aeb73f2b1424ec8e = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "bar",            "name": "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                206.3,                205.2,                119.0,                291.8,                102.4,                119.0            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                195.6,                238.7,                120.0,                296.9,                113.7,                124.7            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                201.1,                187.7,                111.8,                255.7,                108.5,                145.4            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09"            ],            "selected": {                "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true            },            "type": "plain",            "show": true,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "Apple",                "Huawei",                "Oppo",                "Samsung",                "Vivo",                "Xiaomi"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_aaf3926ed4944c62aeb73f2b1424ec8e.setOption(option_aaf3926ed4944c62aeb73f2b1424ec8e);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html>  <h5 id="出货量（按季度）折线图"><a href="#出货量（按季度）折线图" class="headerlink" title="出货量（按季度）折线图"></a>出货量（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"></span><br><span class="line">line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,</span><br><span class="line">                                  width=<span class="string">'1200px'</span>,</span><br><span class="line">                                  height=<span class="string">'550px'</span>))\</span><br><span class="line">            .add_xaxis((GSMS.Year.astype(str) + GSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="string">'first'</span>).tolist())\</span><br><span class="line">            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'2018Q1-2021Q1\n季度全球出货量'</span>),\</span><br><span class="line">                             legend_opts=opts.LegendOpts(type_=<span class="string">'scroll'</span>,pos_top=<span class="number">10</span>,pos_left = <span class="number">100</span>, orient=<span class="string">'horizontal'</span>))<span class="comment">#horizontal vertical</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> grouped_df_year.Vendor.unique():</span><br><span class="line">    line = line.add_yaxis(str(v) + <span class="string">'季度全球出货量（百万）'</span>,GSMS[GSMS.Vendor == v].Shipment_Volumes.tolist())</span><br><span class="line"></span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1c4ca79d15c54b47abf178ba0084ad5b" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1c4ca79d15c54b47abf178ba0084ad5b = echarts.init(            document.getElementById('1c4ca79d15c54b47abf178ba0084ad5b'), 'light', {renderer: 'canvas'});        var option_1c4ca79d15c54b47abf178ba0084ad5b = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    52.2                ],                [                    "2018Q2",                    41.3                ],                [                    "2018Q3",                    46.9                ],                [                    "2018Q4",                    65.9                ],                [                    "2019Q1",                    42.0                ],                [                    "2019Q2",                    36.5                ],                [                    "2019Q3",                    44.8                ],                [                    "2019Q4",                    72.3                ],                [                    "2020Q1",                    40.0                ],                [                    "2020Q2",                    37.5                ],                [                    "2020Q3",                    41.7                ],                [                    "2020Q4",                    81.9                ],                [                    "2021Q1",                    59.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    39.3                ],                [                    "2018Q2",                    54.2                ],                [                    "2018Q3",                    52.0                ],                [                    "2018Q4",                    59.7                ],                [                    "2019Q1",                    59.1                ],                [                    "2019Q2",                    56.6                ],                [                    "2019Q3",                    66.8                ],                [                    "2019Q4",                    56.2                ],                [                    "2020Q1",                    49.0                ],                [                    "2020Q2",                    54.8                ],                [                    "2020Q3",                    50.9                ],                [                    "2020Q4",                    33.0                ],                [                    "2021Q1",                    15.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    24.2                ],                [                    "2018Q2",                    29.6                ],                [                    "2018Q3",                    33.9                ],                [                    "2018Q4",                    31.3                ],                [                    "2019Q1",                    25.7                ],                [                    "2019Q2",                    30.6                ],                [                    "2019Q3",                    32.3                ],                [                    "2019Q4",                    31.4                ],                [                    "2020Q1",                    22.3                ],                [                    "2020Q2",                    24.5                ],                [                    "2020Q3",                    31.0                ],                [                    "2020Q4",                    34.0                ],                [                    "2021Q1",                    38.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    78.2                ],                [                    "2018Q2",                    71.5                ],                [                    "2018Q3",                    72.3                ],                [                    "2018Q4",                    69.8                ],                [                    "2019Q1",                    72.0                ],                [                    "2019Q2",                    76.3                ],                [                    "2019Q3",                    78.2                ],                [                    "2019Q4",                    70.4                ],                [                    "2020Q1",                    58.6                ],                [                    "2020Q2",                    54.2                ],                [                    "2020Q3",                    80.4                ],                [                    "2020Q4",                    62.5                ],                [                    "2021Q1",                    76.6                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    18.9                ],                [                    "2018Q2",                    26.5                ],                [                    "2018Q3",                    30.5                ],                [                    "2018Q4",                    26.5                ],                [                    "2019Q1",                    23.9                ],                [                    "2019Q2",                    27.0                ],                [                    "2019Q3",                    31.3                ],                [                    "2019Q4",                    31.5                ],                [                    "2020Q1",                    21.6                ],                [                    "2020Q2",                    22.5                ],                [                    "2020Q3",                    31.0                ],                [                    "2020Q4",                    33.4                ],                [                    "2021Q1",                    35.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    28.1                ],                [                    "2018Q2",                    32.0                ],                [                    "2018Q3",                    33.3                ],                [                    "2018Q4",                    25.6                ],                [                    "2019Q1",                    27.8                ],                [                    "2019Q2",                    32.3                ],                [                    "2019Q3",                    31.7                ],                [                    "2019Q4",                    32.9                ],                [                    "2020Q1",                    29.7                ],                [                    "2020Q2",                    26.5                ],                [                    "2020Q3",                    46.2                ],                [                    "2020Q4",                    43.0                ],                [                    "2021Q1",                    48.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1c4ca79d15c54b47abf178ba0084ad5b.setOption(option_1c4ca79d15c54b47abf178ba0084ad5b);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）折线图"><a href="#市场份额（按季度）折线图" class="headerlink" title="市场份额（按季度）折线图"></a>市场份额（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"></span><br><span class="line">line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,</span><br><span class="line">                                  width=<span class="string">'1200px'</span>,</span><br><span class="line">                                  height=<span class="string">'550px'</span>))\</span><br><span class="line">            .add_xaxis((GSMS.Year.astype(str) + GSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="string">'first'</span>).tolist())\</span><br><span class="line">            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'2018Q1-2021Q1\n季度全球份额'</span>),\</span><br><span class="line">                             legend_opts=opts.LegendOpts(type_=<span class="string">'scroll'</span>,pos_top=<span class="number">10</span>,pos_left = <span class="number">210</span>, orient=<span class="string">'horizontal'</span>))<span class="comment">#horizontal vertical</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> grouped_df_year.Vendor.unique():</span><br><span class="line">    line = line.add_yaxis(str(v) + <span class="string">'季度全球份额（%）'</span>,np.round(<span class="number">100</span> * GSMS[GSMS.Vendor == v].Market_Share, <span class="number">0</span>).tolist())</span><br><span class="line"></span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1a350fedf1644c1b804480e2c16bbd63" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1a350fedf1644c1b804480e2c16bbd63 = echarts.init(            document.getElementById('1a350fedf1644c1b804480e2c16bbd63'), 'light', {renderer: 'canvas'});        var option_1a350fedf1644c1b804480e2c16bbd63 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    14.0                ],                [                    "2018Q2",                    11.0                ],                [                    "2018Q3",                    12.0                ],                [                    "2018Q4",                    17.0                ],                [                    "2019Q1",                    12.0                ],                [                    "2019Q2",                    10.0                ],                [                    "2019Q3",                    12.0                ],                [                    "2019Q4",                    18.0                ],                [                    "2020Q1",                    14.0                ],                [                    "2020Q2",                    14.0                ],                [                    "2020Q3",                    11.0                ],                [                    "2020Q4",                    21.0                ],                [                    "2021Q1",                    17.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    11.0                ],                [                    "2018Q2",                    15.0                ],                [                    "2018Q3",                    14.0                ],                [                    "2018Q4",                    15.0                ],                [                    "2019Q1",                    17.0                ],                [                    "2019Q2",                    16.0                ],                [                    "2019Q3",                    18.0                ],                [                    "2019Q4",                    14.0                ],                [                    "2020Q1",                    17.0                ],                [                    "2020Q2",                    20.0                ],                [                    "2020Q3",                    14.0                ],                [                    "2020Q4",                    8.0                ],                [                    "2021Q1",                    4.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    7.0                ],                [                    "2018Q2",                    8.0                ],                [                    "2018Q3",                    9.0                ],                [                    "2018Q4",                    8.0                ],                [                    "2019Q1",                    8.0                ],                [                    "2019Q2",                    9.0                ],                [                    "2019Q3",                    9.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    8.0                ],                [                    "2020Q2",                    9.0                ],                [                    "2020Q3",                    8.0                ],                [                    "2020Q4",                    9.0                ],                [                    "2021Q1",                    11.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    22.0                ],                [                    "2018Q2",                    19.0                ],                [                    "2018Q3",                    19.0                ],                [                    "2018Q4",                    18.0                ],                [                    "2019Q1",                    21.0                ],                [                    "2019Q2",                    21.0                ],                [                    "2019Q3",                    21.0                ],                [                    "2019Q4",                    18.0                ],                [                    "2020Q1",                    20.0                ],                [                    "2020Q2",                    20.0                ],                [                    "2020Q3",                    22.0                ],                [                    "2020Q4",                    16.0                ],                [                    "2021Q1",                    22.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    5.0                ],                [                    "2018Q2",                    7.0                ],                [                    "2018Q3",                    8.0                ],                [                    "2018Q4",                    7.0                ],                [                    "2019Q1",                    7.0                ],                [                    "2019Q2",                    8.0                ],                [                    "2019Q3",                    8.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    7.0                ],                [                    "2020Q2",                    8.0                ],                [                    "2020Q3",                    8.0                ],                [                    "2020Q4",                    8.0                ],                [                    "2021Q1",                    10.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    8.0                ],                [                    "2018Q2",                    9.0                ],                [                    "2018Q3",                    9.0                ],                [                    "2018Q4",                    6.0                ],                [                    "2019Q1",                    8.0                ],                [                    "2019Q2",                    9.0                ],                [                    "2019Q3",                    8.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    10.0                ],                [                    "2020Q2",                    10.0                ],                [                    "2020Q3",                    13.0                ],                [                    "2020Q4",                    11.0                ],                [                    "2021Q1",                    14.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1a350fedf1644c1b804480e2c16bbd63.setOption(option_1a350fedf1644c1b804480e2c16bbd63);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）饼状图-南丁格尔玫瑰图"><a href="#市场份额（按季度）饼状图-南丁格尔玫瑰图" class="headerlink" title="市场份额（按季度）饼状图/南丁格尔玫瑰图"></a>市场份额（按季度）饼状图/南丁格尔玫瑰图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"></span><br><span class="line">pies = []</span><br><span class="line">pie = Pie(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,width=<span class="string">'1500px'</span>,height=<span class="string">'1500px'</span>))</span><br><span class="line"><span class="keyword">for</span> xi, y <span class="keyword">in</span> enumerate(GSMS.Year.unique()):</span><br><span class="line">    _ = GSMS[(GSMS.Year == y)]</span><br><span class="line">    <span class="keyword">for</span> yi, q <span class="keyword">in</span> enumerate(_.Quarterly.unique()):</span><br><span class="line">        df_temp = GSMS[(GSMS.Year == y) &amp; (GSMS.Quarterly == q)]</span><br><span class="line">        </span><br><span class="line">        data_pair = [list(_) <span class="keyword">for</span> _ <span class="keyword">in</span> zip(df_temp.Vendor.tolist() + [<span class="string">'Others'</span>], </span><br><span class="line">                                          df_temp.Market_Share.tolist() + [round(<span class="number">1</span> - sum(df_temp.Market_Share.tolist()),<span class="number">1</span>)])]</span><br><span class="line">        pie = pie.add(series_name=str(y) + str(q),</span><br><span class="line">                     data_pair=data_pair,</span><br><span class="line">                     rosetype=<span class="literal">None</span>,<span class="comment">#'area',</span></span><br><span class="line">                     radius=<span class="number">75</span>,</span><br><span class="line">                     center=[<span class="number">300</span> * (yi + <span class="number">1</span>) - <span class="number">150</span>,  <span class="number">300</span> * (xi + <span class="number">1</span>) - <span class="number">150</span>],</span><br><span class="line">                     label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>, position=<span class="string">"center"</span>),)\</span><br><span class="line">                .set_series_opts(tooltip_opts=opts.TooltipOpts(trigger=<span class="string">"item"</span>, formatter=<span class="string">"&#123;b&#125; &lt;br/&gt;&#123;a&#125;: &#123;c&#125;"</span>),</span><br><span class="line">                                 label_opts=opts.LabelOpts(color=<span class="string">"rgba(0, 0, 1, 0.8)"</span>),)\</span><br><span class="line">                .set_global_opts(legend_opts=opts.LegendOpts(type_=<span class="string">'scroll'</span>,pos_left=<span class="number">0</span>, orient=<span class="string">'horizontal'</span>))</span><br><span class="line">                </span><br><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure><p><strong>2018 Q1 - Q4</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="23d7d227653d4d80bcaa8c33887917e6" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_23d7d227653d4d80bcaa8c33887917e6 = echarts.init(            document.getElementById('23d7d227653d4d80bcaa8c33887917e6'), 'light', {renderer: 'canvas'});        var option_23d7d227653d4d80bcaa8c33887917e6 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2018Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.11                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.07                },                {                    "name": "Vivo",                    "value": 0.05                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.19                },                {                    "name": "Apple",                    "value": 0.11                },                {                    "name": "Huawei",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.19                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.18                },                {                    "name": "Apple",                    "value": 0.17                },                {                    "name": "Huawei",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.06                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_23d7d227653d4d80bcaa8c33887917e6.setOption(option_23d7d227653d4d80bcaa8c33887917e6);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2019 Q1 - Q4</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="4e8fa8394cc74b9a8a84bb8d38012a9b" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_4e8fa8394cc74b9a8a84bb8d38012a9b = echarts.init(            document.getElementById('4e8fa8394cc74b9a8a84bb8d38012a9b'), 'light', {renderer: 'canvas'});        var option_4e8fa8394cc74b9a8a84bb8d38012a9b = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2019Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Huawei",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.18                },                {                    "name": "Apple",                    "value": 0.18                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_4e8fa8394cc74b9a8a84bb8d38012a9b.setOption(option_4e8fa8394cc74b9a8a84bb8d38012a9b);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2020 Q1 - Q4</strong><br><!DOCTYPE html></p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="fe82505eb0764a5aa8c1c73870c13b0c" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_fe82505eb0764a5aa8c1c73870c13b0c = echarts.init(            document.getElementById('fe82505eb0764a5aa8c1c73870c13b0c'), 'light', {renderer: 'canvas'});        var option_fe82505eb0764a5aa8c1c73870c13b0c = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2020Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.2                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.2                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.11                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.16                },                {                    "name": "Apple",                    "value": 0.21                },                {                    "name": "Huawei",                    "value": 0.08                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_fe82505eb0764a5aa8c1c73870c13b0c.setOption(option_fe82505eb0764a5aa8c1c73870c13b0c);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2021 Q1</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="e9932162f97641d68914deb431d49724" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_e9932162f97641d68914deb431d49724 = echarts.init(            document.getElementById('e9932162f97641d68914deb431d49724'), 'light', {renderer: 'canvas'});        var option_e9932162f97641d68914deb431d49724 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2021Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.17                },                {                    "name": "Huawei",                    "value": 0.04                },                {                    "name": "Xiaomi",                    "value": 0.14                },                {                    "name": "Oppo",                    "value": 0.11                },                {                    "name": "Vivo",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "75%",            "center": [                "50%",                "50%"            ],            "roseType": "area",            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_e9932162f97641d68914deb431d49724.setOption(option_e9932162f97641d68914deb431d49724);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h3 id="国内手机市场份额数据可视化"><a href="#国内手机市场份额数据可视化" class="headerlink" title="国内手机市场份额数据可视化"></a>国内手机市场份额数据可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CSMS = pd.read_csv(<span class="string">'China_Smartphone_Market_Share.csv'</span>).iloc[:,<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">CSMS.Market_Share = CSMS.Market_Share.str[:<span class="number">-1</span>].astype(int)</span><br></pre></td></tr></table></figure><table><thead><tr><th>Index</th><th>品牌</th><th>年份</th><th>季度</th><th>市场份额</th></tr></thead><tbody><tr><td>0</td><td>Huawei</td><td>2017</td><td>Q1</td><td>20%</td></tr><tr><td>1</td><td>Huawei</td><td>2017</td><td>Q2</td><td>20%</td></tr><tr><td>2</td><td>Huawei</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>3</td><td>Huawei</td><td>2017</td><td>Q4</td><td>20%</td></tr><tr><td>4</td><td>Huawei</td><td>2018</td><td>Q1</td><td>22%</td></tr><tr><td>5</td><td>Huawei</td><td>2018</td><td>Q2</td><td>26%</td></tr><tr><td>6</td><td>Huawei</td><td>2018</td><td>Q3</td><td>23%</td></tr><tr><td>7</td><td>Huawei</td><td>2018</td><td>Q4</td><td>28%</td></tr><tr><td>8</td><td>Huawei</td><td>2019</td><td>Q1</td><td>34%</td></tr><tr><td>9</td><td>Huawei</td><td>2019</td><td>Q2</td><td>35%</td></tr><tr><td>10</td><td>Huawei</td><td>2019</td><td>Q3</td><td>40%</td></tr><tr><td>11</td><td>Huawei</td><td>2019</td><td>Q4</td><td>35%</td></tr><tr><td>12</td><td>Huawei</td><td>2020</td><td>Q1</td><td>41%</td></tr><tr><td>13</td><td>Huawei</td><td>2020</td><td>Q2</td><td>46%</td></tr><tr><td>14</td><td>Huawei</td><td>2020</td><td>Q3</td><td>43%</td></tr><tr><td>15</td><td>Huawei</td><td>2020</td><td>Q4</td><td>30%</td></tr><tr><td>16</td><td>Huawei</td><td>2021</td><td>Q1</td><td>16%</td></tr><tr><td>17</td><td>Vivo</td><td>2017</td><td>Q1</td><td>17%</td></tr><tr><td>18</td><td>Vivo</td><td>2017</td><td>Q2</td><td>17%</td></tr><tr><td>19</td><td>Vivo</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>20</td><td>Vivo</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>21</td><td>Vivo</td><td>2018</td><td>Q1</td><td>16%</td></tr><tr><td>22</td><td>Vivo</td><td>2018</td><td>Q2</td><td>19%</td></tr><tr><td>23</td><td>Vivo</td><td>2018</td><td>Q3</td><td>21%</td></tr><tr><td>24</td><td>Vivo</td><td>2018</td><td>Q4</td><td>20%</td></tr><tr><td>25</td><td>Vivo</td><td>2019</td><td>Q1</td><td>19%</td></tr><tr><td>26</td><td>Vivo</td><td>2019</td><td>Q2</td><td>18%</td></tr><tr><td>27</td><td>Vivo</td><td>2019</td><td>Q3</td><td>19%</td></tr><tr><td>28</td><td>Vivo</td><td>2019</td><td>Q4</td><td>17%</td></tr><tr><td>29</td><td>Vivo</td><td>2020</td><td>Q1</td><td>17%</td></tr><tr><td>30</td><td>Vivo</td><td>2020</td><td>Q2</td><td>16%</td></tr><tr><td>31</td><td>Vivo</td><td>2020</td><td>Q3</td><td>18%</td></tr><tr><td>32</td><td>Vivo</td><td>2020</td><td>Q4</td><td>18%</td></tr><tr><td>33</td><td>Vivo</td><td>2021</td><td>Q1</td><td>23%</td></tr><tr><td>34</td><td>Oppo</td><td>2017</td><td>Q1</td><td>17%</td></tr><tr><td>35</td><td>Oppo</td><td>2017</td><td>Q2</td><td>19%</td></tr><tr><td>36</td><td>Oppo</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>37</td><td>Oppo</td><td>2017</td><td>Q4</td><td>17%</td></tr><tr><td>38</td><td>Oppo</td><td>2018</td><td>Q1</td><td>18%</td></tr><tr><td>39</td><td>Oppo</td><td>2018</td><td>Q2</td><td>18%</td></tr><tr><td>40</td><td>Oppo</td><td>2018</td><td>Q3</td><td>21%</td></tr><tr><td>41</td><td>Oppo</td><td>2018</td><td>Q4</td><td>19%</td></tr><tr><td>42</td><td>Oppo</td><td>2019</td><td>Q1</td><td>18%</td></tr><tr><td>43</td><td>Oppo</td><td>2019</td><td>Q2</td><td>19%</td></tr><tr><td>44</td><td>Oppo</td><td>2019</td><td>Q3</td><td>18%</td></tr><tr><td>45</td><td>Oppo</td><td>2019</td><td>Q4</td><td>16%</td></tr><tr><td>46</td><td>Oppo</td><td>2020</td><td>Q1</td><td>15%</td></tr><tr><td>47</td><td>Oppo</td><td>2020</td><td>Q2</td><td>16%</td></tr><tr><td>48</td><td>Oppo</td><td>2020</td><td>Q3</td><td>16%</td></tr><tr><td>49</td><td>Oppo</td><td>2020</td><td>Q4</td><td>16%</td></tr><tr><td>50</td><td>Oppo</td><td>2021</td><td>Q1</td><td>22%</td></tr><tr><td>51</td><td>Xiaomi</td><td>2017</td><td>Q1</td><td>8%</td></tr><tr><td>52</td><td>Xiaomi</td><td>2017</td><td>Q2</td><td>13%</td></tr><tr><td>53</td><td>Xiaomi</td><td>2017</td><td>Q3</td><td>14%</td></tr><tr><td>54</td><td>Xiaomi</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>55</td><td>Xiaomi</td><td>2018</td><td>Q1</td><td>13%</td></tr><tr><td>56</td><td>Xiaomi</td><td>2018</td><td>Q2</td><td>13%</td></tr><tr><td>57</td><td>Xiaomi</td><td>2018</td><td>Q3</td><td>13%</td></tr><tr><td>58</td><td>Xiaomi</td><td>2018</td><td>Q4</td><td>9%</td></tr><tr><td>59</td><td>Xiaomi</td><td>2019</td><td>Q1</td><td>12%</td></tr><tr><td>60</td><td>Xiaomi</td><td>2019</td><td>Q2</td><td>11%</td></tr><tr><td>61</td><td>Xiaomi</td><td>2019</td><td>Q3</td><td>8%</td></tr><tr><td>62</td><td>Xiaomi</td><td>2019</td><td>Q4</td><td>9%</td></tr><tr><td>63</td><td>Xiaomi</td><td>2020</td><td>Q1</td><td>11%</td></tr><tr><td>64</td><td>Xiaomi</td><td>2020</td><td>Q2</td><td>10%</td></tr><tr><td>65</td><td>Xiaomi</td><td>2020</td><td>Q3</td><td>13%</td></tr><tr><td>66</td><td>Xiaomi</td><td>2020</td><td>Q4</td><td>13%</td></tr><tr><td>67</td><td>Xiaomi</td><td>2021</td><td>Q1</td><td>15%</td></tr><tr><td>68</td><td>Apple</td><td>2017</td><td>Q1</td><td>10%</td></tr><tr><td>69</td><td>Apple</td><td>2017</td><td>Q2</td><td>8%</td></tr><tr><td>70</td><td>Apple</td><td>2017</td><td>Q3</td><td>10%</td></tr><tr><td>71</td><td>Apple</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>72</td><td>Apple</td><td>2018</td><td>Q1</td><td>13%</td></tr><tr><td>73</td><td>Apple</td><td>2018</td><td>Q2</td><td>8%</td></tr><tr><td>74</td><td>Apple</td><td>2018</td><td>Q3</td><td>9%</td></tr><tr><td>75</td><td>Apple</td><td>2018</td><td>Q4</td><td>12%</td></tr><tr><td>76</td><td>Apple</td><td>2019</td><td>Q1</td><td>9%</td></tr><tr><td>77</td><td>Apple</td><td>2019</td><td>Q2</td><td>6%</td></tr><tr><td>78</td><td>Apple</td><td>2019</td><td>Q3</td><td>8%</td></tr><tr><td>79</td><td>Apple</td><td>2019</td><td>Q4</td><td>14%</td></tr><tr><td>80</td><td>Apple</td><td>2020</td><td>Q1</td><td>9%</td></tr><tr><td>81</td><td>Apple</td><td>2020</td><td>Q2</td><td>8%</td></tr><tr><td>82</td><td>Apple</td><td>2020</td><td>Q3</td><td>8%</td></tr><tr><td>83</td><td>Apple</td><td>2020</td><td>Q4</td><td>8%</td></tr><tr><td>84</td><td>Apple</td><td>2021</td><td>Q1</td><td>13%</td></tr></tbody></table><h4 id="2017Q1-2021Q1-国内智能手机市场份额"><a href="#2017Q1-2021Q1-国内智能手机市场份额" class="headerlink" title="2017Q1 - 2021Q1 国内智能手机市场份额"></a>2017Q1 - 2021Q1 国内智能手机市场份额</h4><h5 id="市场份额（按季度）折线图-1"><a href="#市场份额（按季度）折线图-1" class="headerlink" title="市场份额（按季度）折线图"></a>市场份额（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"></span><br><span class="line">line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,</span><br><span class="line">                                  width=<span class="string">'1200px'</span>,</span><br><span class="line">                                  height=<span class="string">'550px'</span>))\</span><br><span class="line">            .add_xaxis((CSMS.Year.astype(str) + CSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="string">'first'</span>).tolist())\</span><br><span class="line">            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">''</span>),\</span><br><span class="line">                             legend_opts=opts.LegendOpts(type_=<span class="string">'scroll'</span>,pos_top=<span class="number">10</span>, orient=<span class="string">'horizontal'</span>))<span class="comment">#horizontal vertical</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> grouped_df_year.Vendor.unique():</span><br><span class="line">    line = line.add_yaxis(str(v) + <span class="string">'季度全球份额（%）'</span>,np.round(<span class="number">100</span> * CSMS[CSMS.Vendor == v].Market_Share, <span class="number">0</span>).tolist())</span><br><span class="line"></span><br><span class="line">line.render_notebook()</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="622d0adc2696444983cb91188184e257" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_622d0adc2696444983cb91188184e257 = echarts.init(            document.getElementById('622d0adc2696444983cb91188184e257'), 'light', {renderer: 'canvas'});        var option_622d0adc2696444983cb91188184e257 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    10                ],                [                    "2017Q2",                    8                ],                [                    "2017Q3",                    10                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    13                ],                [                    "2018Q2",                    8                ],                [                    "2018Q3",                    9                ],                [                    "2018Q4",                    12                ],                [                    "2019Q1",                    9                ],                [                    "2019Q2",                    6                ],                [                    "2019Q3",                    8                ],                [                    "2019Q4",                    14                ],                [                    "2020Q1",                    9                ],                [                    "2020Q2",                    8                ],                [                    "2020Q3",                    8                ],                [                    "2020Q4",                    8                ],                [                    "2021Q1",                    13                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    20                ],                [                    "2017Q2",                    20                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    20                ],                [                    "2018Q1",                    22                ],                [                    "2018Q2",                    26                ],                [                    "2018Q3",                    23                ],                [                    "2018Q4",                    28                ],                [                    "2019Q1",                    34                ],                [                    "2019Q2",                    35                ],                [                    "2019Q3",                    40                ],                [                    "2019Q4",                    35                ],                [                    "2020Q1",                    41                ],                [                    "2020Q2",                    46                ],                [                    "2020Q3",                    43                ],                [                    "2020Q4",                    30                ],                [                    "2021Q1",                    16                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    17                ],                [                    "2017Q2",                    19                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    17                ],                [                    "2018Q1",                    18                ],                [                    "2018Q2",                    18                ],                [                    "2018Q3",                    21                ],                [                    "2018Q4",                    19                ],                [                    "2019Q1",                    18                ],                [                    "2019Q2",                    19                ],                [                    "2019Q3",                    18                ],                [                    "2019Q4",                    16                ],                [                    "2020Q1",                    15                ],                [                    "2020Q2",                    16                ],                [                    "2020Q3",                    16                ],                [                    "2020Q4",                    16                ],                [                    "2021Q1",                    22                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    17                ],                [                    "2017Q2",                    17                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    16                ],                [                    "2018Q2",                    19                ],                [                    "2018Q3",                    21                ],                [                    "2018Q4",                    20                ],                [                    "2019Q1",                    19                ],                [                    "2019Q2",                    18                ],                [                    "2019Q3",                    19                ],                [                    "2019Q4",                    17                ],                [                    "2020Q1",                    17                ],                [                    "2020Q2",                    16                ],                [                    "2020Q3",                    18                ],                [                    "2020Q4",                    18                ],                [                    "2021Q1",                    23                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    8                ],                [                    "2017Q2",                    13                ],                [                    "2017Q3",                    14                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    13                ],                [                    "2018Q2",                    13                ],                [                    "2018Q3",                    13                ],                [                    "2018Q4",                    9                ],                [                    "2019Q1",                    12                ],                [                    "2019Q2",                    11                ],                [                    "2019Q3",                    8                ],                [                    "2019Q4",                    9                ],                [                    "2020Q1",                    11                ],                [                    "2020Q2",                    10                ],                [                    "2020Q3",                    13                ],                [                    "2020Q4",                    13                ],                [                    "2021Q1",                    15                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2017Q1",                "2017Q2",                "2017Q3",                "2017Q4",                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_622d0adc2696444983cb91188184e257.setOption(option_622d0adc2696444983cb91188184e257);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）饼状图-南丁格尔玫瑰图-1"><a href="#市场份额（按季度）饼状图-南丁格尔玫瑰图-1" class="headerlink" title="市场份额（按季度）饼状图/南丁格尔玫瑰图"></a>市场份额（按季度）饼状图/南丁格尔玫瑰图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"></span><br><span class="line">pies = []</span><br><span class="line">pie = Pie(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,width=<span class="string">'1500px'</span>,height=<span class="string">'1500px'</span>))</span><br><span class="line"><span class="keyword">for</span> xi, y <span class="keyword">in</span> enumerate(GSMS.Year.unique()):</span><br><span class="line">    _ = CSMS[(CSMS.Year == y)]</span><br><span class="line">    <span class="keyword">for</span> yi, q <span class="keyword">in</span> enumerate(_.Quarterly.unique()):</span><br><span class="line">        df_temp = CSMS[(CSMS.Year == y) &amp; (CSMS.Quarterly == q)]</span><br><span class="line">        </span><br><span class="line">        data_pair = [list(_) <span class="keyword">for</span> _ <span class="keyword">in</span> zip(df_temp.Vendor.tolist() + [<span class="string">'Others'</span>], </span><br><span class="line">                                          df_temp.Market_Share.tolist() + [round(<span class="number">1</span> - sum(df_temp.Market_Share.tolist()),<span class="number">1</span>)])]</span><br><span class="line">        pie = pie.add(series_name=str(y) + str(q),</span><br><span class="line">                     data_pair=data_pair,</span><br><span class="line">                     rosetype=<span class="literal">None</span>,<span class="comment">#'area',</span></span><br><span class="line">                     radius=<span class="number">75</span>,</span><br><span class="line">                     center=[<span class="number">300</span> * (yi + <span class="number">1</span>) - <span class="number">150</span>,  <span class="number">300</span> * (xi + <span class="number">1</span>) - <span class="number">150</span>],</span><br><span class="line">                     label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>, position=<span class="string">"center"</span>),)\</span><br><span class="line">                .set_series_opts(tooltip_opts=opts.TooltipOpts(trigger=<span class="string">"item"</span>, formatter=<span class="string">"&#123;b&#125; &lt;br/&gt;&#123;a&#125;: &#123;c&#125;"</span>),</span><br><span class="line">                                 label_opts=opts.LabelOpts(color=<span class="string">"rgba(0, 0, 1, 0.8)"</span>),)\</span><br><span class="line">                .set_global_opts(legend_opts=opts.LegendOpts(type_=<span class="string">'scroll'</span>,pos_left=<span class="number">0</span>, orient=<span class="string">'horizontal'</span>))</span><br><span class="line"></span><br><span class="line">pie.render_notebook()</span><br></pre></td></tr></table></figure><p><strong>2017 Q1 - Q4</strong>  </p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="88cd37287e9f41af83bdf529e6605e92" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_88cd37287e9f41af83bdf529e6605e92 = echarts.init(            document.getElementById('88cd37287e9f41af83bdf529e6605e92'), 'light', {renderer: 'canvas'});        var option_88cd37287e9f41af83bdf529e6605e92 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2017Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.19                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.14                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.15                },                {                    "name": "Oppo",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.15                },                {                    "name": "Apple",                    "value": 0.15                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_88cd37287e9f41af83bdf529e6605e92.setOption(option_88cd37287e9f41af83bdf529e6605e92);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2018 Q1 - Q4</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="4d03d0cb260141bdb749db0a60e4c887" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_4d03d0cb260141bdb749db0a60e4c887 = echarts.init(            document.getElementById('4d03d0cb260141bdb749db0a60e4c887'), 'light', {renderer: 'canvas'});        var option_4d03d0cb260141bdb749db0a60e4c887 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2018Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.22                },                {                    "name": "Vivo",                    "value": 0.16                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.13                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.26                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.23                },                {                    "name": "Vivo",                    "value": 0.21                },                {                    "name": "Oppo",                    "value": 0.21                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.28                },                {                    "name": "Vivo",                    "value": 0.2                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_4d03d0cb260141bdb749db0a60e4c887.setOption(option_4d03d0cb260141bdb749db0a60e4c887);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2019 Q1 - Q4</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1b0c39282f4748ceb082461450acc201" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1b0c39282f4748ceb082461450acc201 = echarts.init(            document.getElementById('1b0c39282f4748ceb082461450acc201'), 'light', {renderer: 'canvas'});        var option_1b0c39282f4748ceb082461450acc201 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2019Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.34                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.12                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.35                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Apple",                    "value": 0.06                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.4                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.35                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1b0c39282f4748ceb082461450acc201.setOption(option_1b0c39282f4748ceb082461450acc201);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2020 Q1 - Q4</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="f88c166921aa484b8c5757553af520d3" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_f88c166921aa484b8c5757553af520d3 = echarts.init(            document.getElementById('f88c166921aa484b8c5757553af520d3'), 'light', {renderer: 'canvas'});        var option_f88c166921aa484b8c5757553af520d3 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2020Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.41                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.46                },                {                    "name": "Vivo",                    "value": 0.16                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.0                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.43                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.0                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.3                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_f88c166921aa484b8c5757553af520d3.setOption(option_f88c166921aa484b8c5757553af520d3);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2021 Q1</strong></p><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="a5130f29eb0a4159a0af97ec3301f27d" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_a5130f29eb0a4159a0af97ec3301f27d = echarts.init(            document.getElementById('a5130f29eb0a4159a0af97ec3301f27d'), 'light', {renderer: 'canvas'});        var option_a5130f29eb0a4159a0af97ec3301f27d = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2021Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.16                },                {                    "name": "Vivo",                    "value": 0.23                },                {                    "name": "Oppo",                    "value": 0.22                },                {                    "name": "Xiaomi",                    "value": 0.15                },                {                    "name": "Apple",                    "value": 0.13                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "75%",            "center": [                "50%",                "50%"            ],            "roseType": "area",            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_a5130f29eb0a4159a0af97ec3301f27d.setOption(option_a5130f29eb0a4159a0af97ec3301f27d);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h3 id="小米公司财报情况"><a href="#小米公司财报情况" class="headerlink" title="小米公司财报情况"></a>小米公司财报情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FR = pd.read_csv(<span class="string">'Financial_Report_Xiaomi.csv'</span>)</span><br><span class="line">FR = FR.sort_values(by=<span class="string">'年度'</span>)</span><br><span class="line">FR</span><br></pre></td></tr></table></figure><table><thead><tr><th>Index</th><th>年度</th><th>营业收入</th><th>归母净利润</th><th>毛利</th><th>主营利润率</th></tr></thead><tbody><tr><td>0</td><td>2015</td><td>668.11亿元</td><td>-75.81亿元</td><td>27.00亿元</td><td>-11.05%</td></tr><tr><td>1</td><td>2016</td><td>684.34亿元</td><td>5.53亿元</td><td>72.49亿元</td><td>1.94%</td></tr><tr><td>2</td><td>2017</td><td>1146.25亿元</td><td>-438.26亿元</td><td>151.54亿元</td><td>-36.29%</td></tr><tr><td>3</td><td>2018</td><td>1749.15亿元</td><td>135.54亿元</td><td>221.92亿元</td><td>8.31%</td></tr><tr><td>4</td><td>2019</td><td>2058.39亿元</td><td>100.44亿元</td><td>285.54亿元</td><td>6.24%</td></tr><tr><td>5</td><td>2020</td><td>2458.66亿元</td><td>203.56亿元</td><td>367.52亿元</td><td>8.24%</td></tr></tbody></table><h3 id="全球市场Top国家-地区可视化"><a href="#全球市场Top国家-地区可视化" class="headerlink" title="全球市场Top国家/地区可视化"></a>全球市场Top国家/地区可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Global_top5 = pd.read_csv(<span class="string">'Global_Top5.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map, Geo</span><br><span class="line"></span><br><span class="line">value = Global_top5[<span class="string">'rank'</span>].tolist()</span><br><span class="line">attr = Global_top5[<span class="string">'country'</span>].tolist()</span><br><span class="line">map = Map( init_opts=opts.InitOpts(width=<span class="string">"1900px"</span>, height=<span class="string">"900px"</span>, bg_color=<span class="string">"#ADD8E6"</span>,</span><br><span class="line">                                       page_title=<span class="string">"-"</span>,theme=ThemeType.LIGHT))</span><br><span class="line"></span><br><span class="line">map.add(<span class="string">"Rank"</span>,[list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(attr, value)],is_map_symbol_show=<span class="literal">False</span>,</span><br><span class="line">    maptype=<span class="string">"world"</span>,label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>),)</span><br><span class="line"></span><br><span class="line">map.set_global_opts(title_opts = opts.TitleOpts(title=<span class="string">'全球销量Top5国家和地区（不完全统计，至2021/05）'</span>),</span><br><span class="line">    legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">    visualmap_opts = opts.VisualMapOpts(min_=<span class="number">1</span>,max_=<span class="number">5</span>,range_color=map.colors))</span><br><span class="line"></span><br><span class="line">map.render(<span class="string">'map.html'</span>)</span><br></pre></td></tr></table></figure><!DOCTYPE html><html><head>    <meta charset="UTF-8">    <title>-</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>        <script type="text/javascript" src="https://assets.pyecharts.org/assets/maps/world.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="738b6258e1184f95a31b7f9acb9cf69a" class="chart-container" style="width:100%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_738b6258e1184f95a31b7f9acb9cf69a = echarts.init(            document.getElementById('738b6258e1184f95a31b7f9acb9cf69a'), 'light', {renderer: 'canvas'});        var option_738b6258e1184f95a31b7f9acb9cf69a = {    "backgroundColor": "#ADD8E6",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "map",            "name": "Rank",            "label": {                "show": false,                "position": "top",                "margin": 8            },            "mapType": "world",            "data": [                {                    "name": "Belarus",                    "value": 1                },                {                    "name": "Greece",                    "value": 1                },                {                    "name": "India",                    "value": 1                },                {                    "name": "Myanmar",                    "value": 1                },                {                    "name": "Poland",                    "value": 1                },                {                    "name": "Spain",                    "value": 1                },                {                    "name": "Ukraine",                    "value": 1                },                {                    "name": "Croatia",                    "value": 1                },                {                    "name": "France",                    "value": 2                },                {                    "name": "Latvia",                    "value": 2                },                {                    "name": "Nepal",                    "value": 1                },                {                    "name": "Russia",                    "value": 1                },                {                    "name": "Slovakia",                    "value": 2                },                {                    "name": "Austria",                    "value": 3                },                {                    "name": "Cambodia",                    "value": 3                },                {                    "name": "Hungary",                    "value": 3                },                {                    "name": "Israel",                    "value": 3                },                {                    "name": "Laos",                    "value": 3                },                {                    "name": "Lithuania",                    "value": 3                },                {                    "name": "Nigeria",                    "value": 3                },                {                    "name": "Peru",                    "value": 3                },                {                    "name": "Portugal",                    "value": 3                },                {                    "name": "Qatar",                    "value": 3                },                {                    "name": "Sweden",                    "value": 3                },                {                    "name": "Turkey",                    "value": 3                },                {                    "name": "China",                    "value": 4                },                {                    "name": "Colombia",                    "value": 4                },                {                    "name": "Czech Republic",                    "value": 4                },                {                    "name": "Egypt",                    "value": 4                },                {                    "name": "Germany",                    "value": 4                },                {                    "name": "Indonesia",                    "value": 4                },                {                    "name": "Italy",                    "value": 4                },                {                    "name": "Kenya",                    "value": 4                },                {                    "name": "Kuwait",                    "value": 4                },                {                    "name": "Netherlands",                    "value": 4                },                {                    "name": "Romania",                    "value": 4                },                {                    "name": "Saudi Arabia",                    "value": 4                },                {                    "name": "Slovenia",                    "value": 4                },                {                    "name": "South Korea",                    "value": 4                },                {                    "name": "United Arab Emirates",                    "value": 4                },                {                    "name": "Brazil",                    "value": 5                },                {                    "name": "Chile",                    "value": 5                },                {                    "name": "Estonia",                    "value": 5                },                {                    "name": "Malaysia",                    "value": 5                },                {                    "name": "Mexico",                    "value": 5                },                {                    "name": "Singapore",                    "value": 5                },                {                    "name": "Sri Lanka",                    "value": 5                },                {                    "name": "Switzerland",                    "value": 5                }            ],            "roam": true,            "aspectScale": 0.75,            "nameProperty": "name",            "selectedMode": false,            "zoom": 1,            "mapValueCalculation": "sum",            "showLegendSymbol": false,            "emphasis": {}        }    ],    "legend": [        {            "data": [                "Rank"            ],            "selected": {                "Rank": true            },            "show": false,            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "text": "\u5168\u7403\u9500\u91cfTop5\u56fd\u5bb6\u548c\u5730\u533a\uff08\u4e0d\u5b8c\u5168\u7edf\u8ba1\uff0c\u81f32021/05\uff09",            "padding": 5,            "itemGap": 10        }    ],    "visualMap": {        "show": true,        "type": "continuous",        "min": 1,        "max": 5,        "inRange": {            "color": [                "#c23531",                "#2f4554",                "#61a0a8",                "#d48265",                "#749f83",                "#ca8622",                "#bda29a",                "#6e7074",                "#546570",                "#c4ccd3",                "#f05b72",                "#ef5b9c",                "#f47920",                "#905a3d",                "#fab27b",                "#2a5caa",                "#444693",                "#726930",                "#b2d235",                "#6d8346",                "#ac6767",                "#1d953f",                "#6950a1",                "#918597"            ]        },        "calculable": true,        "inverse": false,        "splitNumber": 5,        "orient": "vertical",        "showLabel": true,        "itemWidth": 20,        "itemHeight": 140,        "borderWidth": 0    }};        chart_738b6258e1184f95a31b7f9acb9cf69a.setOption(option_738b6258e1184f95a31b7f9acb9cf69a);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题任务&quot;&gt;&lt;a href=&quot;#赛题任务&quot; class=&quot;headerlink&quot; title=&quot;赛题任务&quot;&gt;&lt;/a&gt;赛题任务&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;题目1：&lt;/strong&gt;&lt;br&gt;　　分析小米公司手机业务目前所处的宏观经营环境以及产业环境。&lt;br&gt;　
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[赛后总结]山东省第二届数据应用创新创业大赛-主赛场——疫情密切接触人员追踪</title>
    <link href="http://meurice.xyz/2021/ckoilxhur000554lx8uci8esy/"/>
    <id>http://meurice.xyz/2021/ckoilxhur000554lx8uci8esy/</id>
    <published>2021-04-03T15:13:06.000Z</published>
    <updated>2021-05-09T04:43:46.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　过去一年所参加过的各种类型的竞赛，表格、CV、NLP…，性能优化是第一次接触，对这场比赛也投入了不少时间和精力，以下对这场比赛进行复盘和总结。  </p><h2 id="赛题介绍"><a href="#赛题介绍" class="headerlink" title="赛题介绍"></a>赛题介绍</h2><h3 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h3><p>　　通过筛选个人基本信息、个人防疫信息、亮码位置、亮码时间等数据，判定直接密接人员，间接密接人员，判定疫情传播风险等级，辅助决策疫情防控力度。  </p><h3 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h3><p>　　准确率分数使用<strong>macro F1</strong>计算。</p><p>　　直接密接人员：与确诊患者亮码时间差的绝对值在5分钟内，距离在10米以内。<br>　　间接密接人员：与直接密接人员的亮码时间差的绝对值在5分钟内，距离在10米以内。<br>　　如果既是直接密接人员又是间接密接人员，统一归类为直接密接人员。</p><p>　　距离计算参考函数如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> radians, cos, sin, asin, sqrt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geodistance</span><span class="params">(lng1, lat1, lng2, lat2)</span>:</span></span><br><span class="line">lng1, lat1, lng2, lat2 = map(radians, [float(lng1), float(lat1), float(lng2), float(lat2)])</span><br><span class="line">    dlon = lng2-lng1</span><br><span class="line">    dlat = lat2-lat1</span><br><span class="line">    a = sin(dlat/<span class="number">2</span>)**<span class="number">2</span> + cos(lat1) * cos(lat2) * sin(dlon/<span class="number">2</span>)**<span class="number">2</span></span><br><span class="line">    distance = <span class="number">2</span> * asin(sqrt(a)) * <span class="number">6371.393</span> * <span class="number">1000</span></span><br><span class="line">    distance = round(distance, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> distance</span><br></pre></td></tr></table></figure><h3 id="数据集描述"><a href="#数据集描述" class="headerlink" title="数据集描述"></a>数据集描述</h3><p>　　<strong>个人轨迹数据（df_travel.csv）</strong>：<br>　　id：String，人员唯一ID<br>　　usetime：Date，亮码时间<br>　　lng：Float，亮码位置经度（小数点5位，GCJ02坐标系）<br>　　lat：Float，亮码位置纬度（小数点5位，GCJ02坐标系）  </p><p>　　<strong>确诊患者亮码记录（confirm.csv）</strong>：<br>　　亮码时间：Date，亮码时间；<br>　　lng：Float，亮码位置经度（小数点5位，GCJ02坐标系）<br>　　lat：Float，亮码位置纬度（小数点5位，GCJ02坐标系）<br>　　备注：String，确诊患者的具体行为<br>　　<em>只有一名确诊患者</em></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>　　整体上来看，方案比较常规，决赛还未开始，对于这题有没有一些特殊的方法，还需要等待答辩结束。  位于Rank5的江离重楼大佬在复赛结束后就分享了自己的代码和思路<br>　　为每条轨迹记录添加唯一索引，先根据确诊人员信息和条件判断出直接密接的记录，根据这些记录筛选每个id在接触时间以后的所有记录，最后再根据这些记录和条件判断间接密接人员，<strong>先初筛，后细筛</strong>。</p><h3 id="直接密接人员"><a href="#直接密接人员" class="headerlink" title="直接密接人员"></a>直接密接人员</h3><p>　　轨迹数据的规模为200万+条，确诊人员记录约为50条，规模并不大，所以直接考虑计算所有点对之间的Euclidean Distance / CityBlock Distance，筛选出亮码时间差在300秒以内以及经纬度距离在0.00025内的点对，再根据经纬度计算精确距离差，筛选出直接密接人员。<br>　　在复赛阶段对这个方案又做了一些小优化，在线下环境成绩有所提升。由于确诊人员记录数量极少，所以根据这些点的经纬度及时间可以先大幅缩小搜索范围，即先使用集合运算挑选出处在可能范围内的人员轨迹记录，再做如上操作，代码如下。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_idx_direct</span><span class="params">(candidate, target)</span>:</span></span><br><span class="line">    set_target_time = set([j <span class="keyword">for</span> i <span class="keyword">in</span> target.time <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">300</span>,i + <span class="number">301</span>)]) </span><br><span class="line">    set_target_lng = set(np.around([j <span class="keyword">for</span> i <span class="keyword">in</span> target.lng <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i - <span class="number">0.00025</span>,i + <span class="number">0.00025</span>,<span class="number">0.00001</span>)], <span class="number">5</span>))</span><br><span class="line">    set_target_lat = set(np.around([j <span class="keyword">for</span> i <span class="keyword">in</span> target.lat <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i - <span class="number">0.00025</span>,i + <span class="number">0.00025</span>,<span class="number">0.00001</span>)], <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    candidate_ = candidate[(</span><br><span class="line">                    candidate.time.isin(list(set_target_time))) &amp; (</span><br><span class="line">                    np.round(candidate.lng, <span class="number">5</span>).isin(list(set_target_lng))) &amp; (</span><br><span class="line">                    np.round(candidate.lat, <span class="number">5</span>).isin(list(set_target_lat)))].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    time_diff = np.where(</span><br><span class="line">                    abs(cdist(candidate_[[<span class="string">'time'</span>,<span class="string">'temp'</span>]],</span><br><span class="line">                        target[[<span class="string">'time'</span>,<span class="string">'temp'</span>]], metric=<span class="string">'cityblock'</span>)) &lt;= <span class="number">300</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    distance = np.where(</span><br><span class="line">                    abs(cdist(candidate_[[<span class="string">'lng'</span>, <span class="string">'lat'</span>]],</span><br><span class="line">                        target[[<span class="string">'lng'</span>, <span class="string">'lat'</span>]])) &lt;= <span class="number">0.00025</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    result_mat = time_diff * distance</span><br><span class="line"></span><br><span class="line">    c_idx = np.where(result_mat == <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    t_idx = np.where(result_mat == <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    distance = geodistance(candidate_.iloc[c_idx, <span class="number">3</span>],</span><br><span class="line">                           candidate_.iloc[c_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    c_result = c_idx[np.where(distance &lt;= <span class="number">10</span>)[<span class="number">0</span>]]</span><br><span class="line">    <span class="comment"># t_result = t_idx[np.where(distance &lt;= 10)[0]]</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> candidate_.loc[list(set(c_result)), <span class="string">'idx'</span>].tolist()</span><br></pre></td></tr></table></figure><p>　　<strong>对距离计算函数进行了修改</strong>，使用numpy，改为矩阵并行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numexpr <span class="keyword">as</span> ne</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geodistance</span><span class="params">(lng1, lat1, lng2, lat2)</span>:</span></span><br><span class="line">    lng1 = np.radians(np.array(lng1))</span><br><span class="line">    lat1 = np.radians(np.array(lat1))</span><br><span class="line">    lng2 = np.radians(np.array(lng2))</span><br><span class="line">    lat2 = np.radians(np.array(lat2))</span><br><span class="line">    <span class="keyword">return</span> np.round(ne.evaluate(<span class="string">"2 * arcsin(sqrt(sin((lat2 - lat1) / 2) ** 2 + cos(lat1) * cos(lat2) * sin((lng2 - lng1) / 2) ** 2)) * 6371.393 * 1000"</span>), <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="间接密接人员"><a href="#间接密接人员" class="headerlink" title="间接密接人员"></a>间接密接人员</h3><p>　　关于间接密接人员的搜索，尝试了两种方案，一种是使用KD树，另一种是将经纬度以一定的尺度网格化（0.0001），对于直接密接人员的记录，搜索其附近的九个格子。<br>　　我所使用的是KD树的方案，然而比赛结束后看到Rank5 江离.重楼大佬在群里的分享，也是使用的网格化搜索的方案，不过语言方面使用的是C++，这才意识到针对计算密集型程序Python和C++巨大的效率差距，初赛阶段看到以Python作为入口语言，就默认用Python实现了，复赛阶段也一直没向这个方向进行优化，最后只排到了Rank16，这也是做这次比赛的遗憾之处吧~</p><h4 id="K-D-Tree"><a href="#K-D-Tree" class="headerlink" title="K-D Tree"></a>K-D Tree</h4><p>　　kd（k-dimensional）树的概念自1975年提出，试图解决的是在k维空间为数据集建立索引的问题，即已知样本空间如何快速查询得到其近邻？它的思想如同分治法，即：利用已有数据对k维空间进行切分。<br>　　Scipy中提供了KDTree的接口，scipy.spatial.cKDTree，其底层使用C语言实现，效率更高。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_idx_indirect_kd</span><span class="params">(candidate, target)</span>:</span></span><br><span class="line">    candidate.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    target.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    kd_time_diff = cKDTree(candidate[[<span class="string">'time'</span>]])</span><br><span class="line">    time_diff_idx = kd_time_diff.query_ball_point(target[[<span class="string">'time'</span>]].values.tolist(), r = <span class="number">300</span>, p = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    kd_distance = cKDTree(candidate[[<span class="string">'lng'</span>,<span class="string">'lat'</span>]])</span><br><span class="line">    distance_idx = kd_distance.query_ball_point(target[[<span class="string">'lng'</span>,<span class="string">'lat'</span>]].values.tolist(), r = <span class="number">0.00025</span>, p = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    intersection = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(distance_idx)):</span><br><span class="line">        intersection.append(list(set(distance_idx[i]).intersection(set(time_diff_idx[i]))))</span><br><span class="line"></span><br><span class="line">    c_idx = []</span><br><span class="line">    t_idx = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(intersection)):</span><br><span class="line">        c_idx.extend(intersection[i])</span><br><span class="line">        t_idx.extend([i] * len(intersection[i]))</span><br><span class="line"></span><br><span class="line">    distance = geodistance(candidate.iloc[c_idx, <span class="number">3</span>],</span><br><span class="line">                           candidate.iloc[c_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">3</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    c_result = [c_idx[i] <span class="keyword">for</span> i <span class="keyword">in</span> (np.where((distance &lt;= <span class="number">10</span>))[<span class="number">0</span>]).tolist()]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> candidate.iloc[list(set(c_result)), <span class="number">0</span>].tolist()</span><br></pre></td></tr></table></figure><h4 id="网格化搜索"><a href="#网格化搜索" class="headerlink" title="网格化搜索"></a>网格化搜索</h4><p>　　网格化搜索实现起来相对比较简单，其思想类似于GeoHash，即将二位的经纬度坐标点映射到一维，但GeoHash在这里并不适合，一方面是效率过低，另一方面，和直接将经纬度点映射到0,1,…,n的效果相同。<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/ShanDongBD_covid/2095550-d86dc182d102451b.png" alt="GeoHash"><br>　　具体实现待补充…</p><h2 id="关于效率"><a href="#关于效率" class="headerlink" title="关于效率"></a>关于效率</h2><p>　　复赛结束时，线上成绩约为30s，并不算优秀，但站在纯Python语言的角度来看应该不算慢。<br>　　除计算外，I/O方面的优化也是本题的上分点之一。<br>　　关于效率的计算，比较奇怪的是，线上评测成绩的抖动幅度似乎不小，我个人第一次和第二次提交的代码几乎相同，但线上成绩提升了近30%，除此之外，主办方所的线上环境只开放了CPU的一个核心，但经过实验，多进程对该题是work的，能带来大概25%的提升。但如果时间效率足够高的话，多进程显然就不太合适了，进程创建和切换所带来的开销已经不能忽略不计了。<br>　　待补充…</p><h2 id="关于准确率"><a href="#关于准确率" class="headerlink" title="关于准确率"></a>关于准确率</h2><p>　　初赛使用该方案的macro F1为1.0，但是对于复赛阶段的数据为0.999179，针对复赛的数据如何达到1.0还需要等决赛答辩后学习思路。<br>　　待补充…</p><h2 id="个人实现完整代码"><a href="#个人实现完整代码" class="headerlink" title="个人实现完整代码"></a>个人实现完整代码</h2><p>　　<strong>由纯Python实现</strong>，和C/C++等语言的实现相比，时间效率并不算高，仅供参考。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cdist</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> cKDTree</span><br><span class="line"><span class="keyword">import</span> numexpr <span class="keyword">as</span> ne</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geodistance</span><span class="params">(lng1, lat1, lng2, lat2)</span>:</span></span><br><span class="line">    lng1 = np.radians(np.array(lng1))</span><br><span class="line">    lat1 = np.radians(np.array(lat1))</span><br><span class="line">    lng2 = np.radians(np.array(lng2))</span><br><span class="line">    lat2 = np.radians(np.array(lat2))</span><br><span class="line">    <span class="keyword">return</span> np.round(ne.evaluate(<span class="string">"2 * arcsin(sqrt(sin((lat2 - lat1) / 2) ** 2 + cos(lat1) * cos(lat2) * sin((lng2 - lng1) / 2) ** 2)) * 6371.393 * 1000"</span>), <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_idx_direct</span><span class="params">(candidate, target)</span>:</span></span><br><span class="line">    set_target_time = set([j <span class="keyword">for</span> i <span class="keyword">in</span> target.time <span class="keyword">for</span> j <span class="keyword">in</span> range(i - <span class="number">300</span>,i + <span class="number">301</span>)]) </span><br><span class="line">    set_target_lng = set(np.around([j <span class="keyword">for</span> i <span class="keyword">in</span> target.lng <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i - <span class="number">0.00025</span>,i + <span class="number">0.00025</span>,<span class="number">0.00001</span>)], <span class="number">5</span>))</span><br><span class="line">    set_target_lat = set(np.around([j <span class="keyword">for</span> i <span class="keyword">in</span> target.lat <span class="keyword">for</span> j <span class="keyword">in</span> np.arange(i - <span class="number">0.00025</span>,i + <span class="number">0.00025</span>,<span class="number">0.00001</span>)], <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    candidate_ = candidate[(</span><br><span class="line">                    candidate.time.isin(list(set_target_time))) &amp; (</span><br><span class="line">                    np.round(candidate.lng, <span class="number">5</span>).isin(list(set_target_lng))) &amp; (</span><br><span class="line">                    np.round(candidate.lat, <span class="number">5</span>).isin(list(set_target_lat)))].reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    time_diff = np.where(</span><br><span class="line">                    abs(cdist(candidate_[[<span class="string">'time'</span>,<span class="string">'temp'</span>]],</span><br><span class="line">                        target[[<span class="string">'time'</span>,<span class="string">'temp'</span>]], metric=<span class="string">'cityblock'</span>)) &lt;= <span class="number">300</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    distance = np.where(</span><br><span class="line">                    abs(cdist(candidate_[[<span class="string">'lng'</span>, <span class="string">'lat'</span>]],</span><br><span class="line">                        target[[<span class="string">'lng'</span>, <span class="string">'lat'</span>]])) &lt;= <span class="number">0.00025</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    result_mat = time_diff * distance</span><br><span class="line"></span><br><span class="line">    c_idx = np.where(result_mat == <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    t_idx = np.where(result_mat == <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    distance = geodistance(candidate_.iloc[c_idx, <span class="number">3</span>],</span><br><span class="line">                           candidate_.iloc[c_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    c_result = c_idx[np.where(distance &lt;= <span class="number">10</span>)[<span class="number">0</span>]]</span><br><span class="line">    t_result = t_idx[np.where(distance &lt;= <span class="number">10</span>)[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> candidate_.iloc[list(set(c_result)), <span class="number">4</span>].tolist(), pd.concat([candidate_.iloc[c_result,[<span class="number">0</span>,<span class="number">6</span>]].reset_index(drop=<span class="literal">True</span>), (target.iloc[t_result,<span class="number">6</span>]).reset_index(drop=<span class="literal">True</span>)],axis=<span class="number">1</span>,ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_idx_indirect_kd</span><span class="params">(candidate, target)</span>:</span></span><br><span class="line">    candidate.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    target.reset_index(inplace=<span class="literal">True</span>, drop=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    kd_time_diff = cKDTree(candidate[[<span class="string">'time'</span>]])</span><br><span class="line">    time_diff_idx = kd_time_diff.query_ball_point(target[[<span class="string">'time'</span>]].values.tolist(), r = <span class="number">300</span>, p = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    kd_distance = cKDTree(candidate[[<span class="string">'lng'</span>,<span class="string">'lat'</span>]])</span><br><span class="line">    distance_idx = kd_distance.query_ball_point(target[[<span class="string">'lng'</span>,<span class="string">'lat'</span>]].values.tolist(), r = <span class="number">0.00025</span>, p = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    intersection = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(distance_idx)):</span><br><span class="line">        intersection.append(list(set(distance_idx[i]).intersection(set(time_diff_idx[i]))))</span><br><span class="line"></span><br><span class="line">    c_idx = []</span><br><span class="line">    t_idx = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(intersection)):</span><br><span class="line">        c_idx.extend(intersection[i])</span><br><span class="line">        t_idx.extend([i] * len(intersection[i]))</span><br><span class="line"></span><br><span class="line">    distance = geodistance(candidate.iloc[c_idx, <span class="number">3</span>],</span><br><span class="line">                           candidate.iloc[c_idx, <span class="number">2</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">3</span>],</span><br><span class="line">                           target.iloc[t_idx, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    c_result = [c_idx[i] <span class="keyword">for</span> i <span class="keyword">in</span> (np.where((distance &lt;= <span class="number">10</span>))[<span class="number">0</span>]).tolist()]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> candidate.iloc[list(set(c_result)), <span class="number">0</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(dirname, savePath)</span>:</span></span><br><span class="line">    confirmPath = os.path.join(dirname, <span class="string">"confirm.csv"</span>)</span><br><span class="line">    travelPath = os.path.join(dirname, <span class="string">"df_travel.csv"</span>)</span><br><span class="line">    </span><br><span class="line">    confirmed = pd.read_csv(confirmPath)</span><br><span class="line">    df_travel = pd.read_csv(travelPath)</span><br><span class="line"></span><br><span class="line">    confirmed[<span class="string">'亮码时间'</span>] = pd.to_datetime(confirmed[<span class="string">'亮码时间'</span>],format=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    df_travel[<span class="string">'usetime'</span>] = pd.to_datetime(df_travel[<span class="string">'usetime'</span>],format=<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    </span><br><span class="line">    df_travel_length = len(df_travel)</span><br><span class="line"></span><br><span class="line">    confirmed[<span class="string">'idx'</span>] = range(len(confirmed))</span><br><span class="line">    df_travel[<span class="string">'idx'</span>] = range(df_travel_length)</span><br><span class="line"></span><br><span class="line">    confirmed[<span class="string">'temp'</span>] = <span class="number">0</span></span><br><span class="line">    df_travel[<span class="string">'temp'</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    confirmed[<span class="string">'time'</span>] = (pd.to_timedelta(confirmed[<span class="string">'亮码时间'</span>] - datetime(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">30</span>)).dt.total_seconds()).astype(int)</span><br><span class="line">    df_travel[<span class="string">'time'</span>] = (pd.to_timedelta(df_travel[<span class="string">'usetime'</span>] - datetime(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">30</span>)).dt.total_seconds()).astype(int)</span><br><span class="line">    </span><br><span class="line">    direct_idx, df_direct_min_time_ = gen_idx_direct(df_travel, confirmed)</span><br><span class="line">    df_direct_min_time_.columns = [<span class="string">'id'</span>,<span class="string">'ctime_direct'</span>, <span class="string">'ctime_confirm'</span>]</span><br><span class="line">    </span><br><span class="line">    df_direct = df_travel[df_travel[<span class="string">'idx'</span>].isin(direct_idx)]</span><br><span class="line"></span><br><span class="line">    df_travel = pd.merge(df_travel, df_direct_min_time_.groupby(<span class="string">'id'</span>).agg(&#123;<span class="string">'ctime_direct'</span>:min&#125;), on=<span class="string">'id'</span>, how=<span class="string">'left'</span>)</span><br><span class="line">    df_travel.ctime_direct.fillna(<span class="number">-1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    df_travel[<span class="string">'direct'</span>] = <span class="number">0</span></span><br><span class="line">    df_travel.loc[(df_travel[<span class="string">'time'</span>] &gt;= df_travel[<span class="string">'ctime_direct'</span>]) &amp; (df_travel[<span class="string">'ctime_direct'</span>] &gt;= <span class="number">0</span>),<span class="string">'direct'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    df_direct = df_travel[df_travel[<span class="string">'direct'</span>] == <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#df_indirect_min_time = gen_idx_indirect_kd(df_travel[df_travel['direct'] == 0], df_direct)</span></span><br><span class="line">    <span class="comment">#indirect_id = df_indirect_min_time.id_i.tolist()</span></span><br><span class="line"></span><br><span class="line">    p_i = multiprocessing.Pool(<span class="number">3</span>)</span><br><span class="line">    indirect_id_0 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="number">0</span>, df_travel_length, <span class="number">3</span>)], df_direct))</span><br><span class="line">    indirect_id_1 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="number">1</span>, df_travel_length, <span class="number">3</span>)], df_direct))</span><br><span class="line">    indirect_id_2 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="number">2</span>, df_travel_length, <span class="number">3</span>)], df_direct))</span><br><span class="line">    p_i.close()</span><br><span class="line">    p_i.join()</span><br><span class="line"></span><br><span class="line">    submission = pd.DataFrame(&#123;<span class="string">'id'</span>:list(set(df_travel[<span class="string">'id'</span>].tolist())),<span class="string">'label'</span>:<span class="number">0</span>&#125;)</span><br><span class="line">    submission.loc[submission[<span class="string">'id'</span>].isin(list(set([i <span class="keyword">for</span> l <span class="keyword">in</span> [indirect_id_0.get(),indirect_id_1.get(),indirect_id_2.get()] <span class="keyword">for</span> i <span class="keyword">in</span> l]))),<span class="string">'label'</span>] = <span class="number">2</span></span><br><span class="line">    submission.loc[submission[<span class="string">'id'</span>].isin(df_direct[<span class="string">'id'</span>].tolist()),<span class="string">'label'</span>] = <span class="number">1</span></span><br><span class="line">    submission.to_csv(savePath,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    dirname = sys.argv[<span class="number">1</span>]  <span class="comment"># 所需预测的文件夹</span></span><br><span class="line">    savePath = sys.argv[<span class="number">2</span>]  <span class="comment"># 预测结果保存文件</span></span><br><span class="line">    main(dirname, savePath)</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;　　过去一年所参加过的各种类型的竞赛，表格、CV、NLP…，性能优化是第一次接触，对这场比赛也投入了不少时间和精力，以下对这
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习笔记]Meta Learning(元学习)</title>
    <link href="http://meurice.xyz/2021/ckoilxhuq000454lx1wpx6wqd/"/>
    <id>http://meurice.xyz/2021/ckoilxhuq000454lx1wpx6wqd/</id>
    <published>2021-01-07T12:51:38.000Z</published>
    <updated>2021-01-08T15:52:06.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>　　Meta Learning = Learn to learn<br>　　Meta：How to learn a new model</p><h2 id="Meta-Learning"><a href="#Meta-Learning" class="headerlink" title="Meta Learning"></a>Meta Learning</h2><p>　　Meta Learning即“学会学习”，学习了一些task后，机器学会如何去学习新的task，例如机器学习了task1——语音辨识，task2——图像辨识，…，然后给一个新的task（例如文本分类），面对这个新的task，机器能够快速的学习。<br><img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/0.png" alt><br>　　其步骤和Machine Learning类似，其中不同的是Maching Learning需要找到一个Function <strong>f</strong>，而Meta Learning需要找到的是一个Learning algorithm <strong>F</strong>：<br>　　step1. define a set of learning algorithm<br>　　step2. goodness of learning algorithm<br>　　step3. pick the best learnDing algorithm<br><img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/1.png" alt></p><h3 id="step1-Define-a-set-of-learning-algorithm"><a href="#step1-Define-a-set-of-learning-algorithm" class="headerlink" title="step1. Define a set of learning algorithm"></a>step1. Define a set of learning algorithm</h3><p>　　首先准备训练资料，其为一堆训练数据D和一堆f的集合，对于每一个task来说，整个流程构成的不再是像Machine Learning中的参数θ，而是构成了一个f，即每当使用新的参数进行初始化时，我们定义了一个新的f。<br><img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/2.png" alt></p><h3 id="step2-Define-the-goodness-of-a-Function-F"><a href="#step2-Define-the-goodness-of-a-Function-F" class="headerlink" title="step2. Define the goodness of a Function F"></a>step2. Define the goodness of a Function F</h3><p>　　对于每一个task，都能得到f，并且有损失l。<br><img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/3.png" alt><br>　　N：N tasks<br>　　l^n：Testing loss for task n after training<br><img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/4.png" alt></p><h2 id="Omniglot——Few-shot-Classification"><a href="#Omniglot——Few-shot-Classification" class="headerlink" title="Omniglot——Few-shot Classification"></a>Omniglot——Few-shot Classification</h2><p>　　Omniglot 数据集总共包含 5050 个字母。我们通常将这些分成一组包含 3030 个字母的背景（background）集和一组包含 2020 个字母的评估（evaluation）集。  </p><h3 id="N-ways-K-shot"><a href="#N-ways-K-shot" class="headerlink" title="N-ways K-shot"></a>N-ways K-shot</h3><p>　　N-ways K-shot： In each training and test tasks, there are N classes, each has K examples.<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/5.png" alt="example"></p><h2 id="MAML"><a href="#MAML" class="headerlink" title="MAML"></a>MAML</h2><p>　　MAML的基本思想是：对于每一个task中学到的f，其仅决定参数的赋值方式，而不决定模型架构等内容，网络结构是提前固定的。  </p><h3 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h3><p>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/6.png" alt>  </p><p>　　最小化L(Φ)：<strong>Gradient Descent</strong><br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/7.png" alt></p><h3 id="MAML对比Model-Pre-training"><a href="#MAML对比Model-Pre-training" class="headerlink" title="MAML对比Model Pre-training"></a>MAML对比Model Pre-training</h3><p>　　MAML不在意Φ在train task上的表现如何，而是在意用Φ训练出的参数θ hat ^ n表现如何。<br>　　而Model Pre-training希望找到在task1和task2上损失都最小的Φ。<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/10.png" alt><br>　　如下图，可能Φ在task1和task2上表现都不太好，但假设拿这个Φ做初始参数，对于task1和task2来说，都能比较容易的找到最佳参数。<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/8.png" alt><br>　　而对于Model Pre-training来说，希望找到的是如下图所示的这个Φ，但不保证拿这个Φ去训练后能得到好的θ hat ^ n。<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/9.png" alt><br>　　MAML中参数仅被update一次后就被当作最终的参数。其一原因是需要获得的结果参数量过大，多次更新带来的时间成本大大增加。另一原因是MAML的训练目标是训练后得到非常好的Init，希望更新一次后就能得到非常好的效果，一般训练时只更新一次参数，但测试的时候更新多次。<br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/11.png" alt><br>  <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/12.png" alt></p><h2 id="Reptile"><a href="#Reptile" class="headerlink" title="Reptile"></a>Reptile</h2><h2 id="Gradient-Descent-as-LSTM"><a href="#Gradient-Descent-as-LSTM" class="headerlink" title="Gradient Descent as LSTM"></a>Gradient Descent as LSTM</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;　　Meta Learning = Learn to lea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>中移集成（雄安产业研究院）首届OneCity编程大赛</title>
    <link href="http://meurice.xyz/2020/ckoilxhuy000854lx35cz4ep5/"/>
    <id>http://meurice.xyz/2020/ckoilxhuy000854lx35cz4ep5/</id>
    <published>2020-12-03T04:33:49.000Z</published>
    <updated>2020-12-30T11:04:50.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h2><p>　　选手需要建立模型，针对政务表格文件实现自动化分类。允许使用一些常见的开源预训练模型，如bert。<br>　　数据智能分类按照行业领域，将政务数据分为以下20个基础大类，分别是：生态环境、资源能源、信息产业、医疗卫生、文化休闲、财税金融、经济管理、教育科技、交通运输、工业、农业畜牧业、政法监察、城乡建设、商业贸易、旅游服务、气象水文测绘地震地理、外交外事、文秘行政、民政社区、劳动人事。</p><h2 id="初赛方案"><a href="#初赛方案" class="headerlink" title="初赛方案"></a>初赛方案</h2><p>　　参赛时赛事日程已过半，提交次数较少，仅考虑了一些简单的方案。<br>　　初赛阶段，文件标题基本完整，首先仅使用标题进行训练，预训练模型使用了RoBERTa-wwm-ext，使用五折CV。<br>　　读取文件content后，针对content单独训练bert，最后将title和content的raw_output按0.7、0.3加权平均，线上accuracy 0.985，rank 13。</p><h2 id="决赛方案"><a href="#决赛方案" class="headerlink" title="决赛方案"></a>决赛方案</h2><p>　　舍弃初赛方案——Bert训练标题+TextCNN训练Content，直接使用TextCNN训练标题+Content拼接后的内容，并且最终acc指标受文本长度影响较大。<br>　　训练前做了一定量的数据预处理工作，包括关键字提取、地理位置提取等，其中省市提取使用了<a href="https://github.com/DQinYuan/chinese_province_city_area_mapper" target="_blank" rel="noopener">cpca</a>。<br>　　由于花了大量的时间用于文件读取上，导致预处理不够深入，而预处理也是本题的一个关键上分点，此外还可以对网络增加例如文件长度等特征输入。最终决赛线上rank20+。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题任务&quot;&gt;&lt;a href=&quot;#赛题任务&quot; class=&quot;headerlink&quot; title=&quot;赛题任务&quot;&gt;&lt;/a&gt;赛题任务&lt;/h2&gt;&lt;p&gt;　　选手需要建立模型，针对政务表格文件实现自动化分类。允许使用一些常见的开源预训练模型，如bert。&lt;br&gt;　　数据智能分类
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第三届全国高校绿色计算大赛半决赛——OpenEuler（第一阶段）</title>
    <link href="http://meurice.xyz/2020/ckoilxhv6000c54lx8f07f8ih/"/>
    <id>http://meurice.xyz/2020/ckoilxhv6000c54lx8f07f8ih/</id>
    <published>2020-10-24T08:33:55.000Z</published>
    <updated>2020-10-29T06:16:05.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenEuler-、-Shell-编程"><a href="#OpenEuler-、-Shell-编程" class="headerlink" title="OpenEuler 、 Shell 编程"></a>OpenEuler 、 Shell 编程</h2><h3 id="1-正则替换"><a href="#1-正则替换" class="headerlink" title="1.正则替换"></a>1.正则替换</h3><p>系统提供了一个待处理的test.txt文件，其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ZhangSan25man</span><br><span class="line">LiSi7man</span><br><span class="line">WangWu16woman</span><br><span class="line">Alex77man</span><br></pre></td></tr></table></figure><p>请在右侧的编码区域，通过shell脚本将文件内容中的三列用 ,(英文逗号) 分割开来。其中，第一列为人名，由字母组成；第二列为年龄，由数字组成；第三列为性别，只会是 man 或者 woman。  </p><p>处理完成后预期结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">ZhangSan,25,man</span><br><span class="line">LiSi,7,man</span><br><span class="line">WangWu,16,woman</span><br><span class="line">Alex,77,man</span><br></pre></td></tr></table></figure><p>Solve：<br>正则表达式匹配字母+任意位数字+字母，分别以\1，\2，\3引用匹配到的内容，添加逗号即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat test.txt | sed "s/\([a-z]\)\([0-9]*[0-9]\)\([a-z]\)/\1,\2,\3/g"</span><br></pre></td></tr></table></figure><h3 id="2-求集合差集"><a href="#2-求集合差集" class="headerlink" title="2.求集合差集"></a>2.求集合差集</h3><p>系统提供了两个待处理文件a.txt和b.txt，其中文件 a.txt 中的部分内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">My Name is Alice</span><br><span class="line">What is your name</span><br><span class="line">I am Bob</span><br><span class="line">I came from China</span><br><span class="line">Where are you from</span><br><span class="line">Oh my God</span><br></pre></td></tr></table></figure><p>文件 b.txt 中的部分内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice is a good boy</span><br><span class="line">Bob is a nice man and he is one of my best friend</span><br><span class="line">God bless you</span><br></pre></td></tr></table></figure><p>将文件 a.txt 中每一行的最后一个单词作为集合 1 ；将文件 b.txt 中每一行的第一个单词作为集合 2 ；请使用 shell 语言编写程序，输出包含在集合 1 但不包含在集合 2 的所有元素。<br>Solve：通过正则将a.txt中最后一个空格前的全部字符替换为空，b.txt中第一个空格后的全部字符替换为空，sort后通过uniq命令解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sed -i &#39;s&#x2F;.* &#x2F;&#x2F;g&#39; a.txt</span><br><span class="line">sed -i &#39;s&#x2F; .*&#x2F;&#x2F;g&#39; b.txt</span><br><span class="line">grep -F -v -f b.txt a.txt | sort | uniq</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OpenEuler-、-Shell-编程&quot;&gt;&lt;a href=&quot;#OpenEuler-、-Shell-编程&quot; class=&quot;headerlink&quot; title=&quot;OpenEuler 、 Shell 编程&quot;&gt;&lt;/a&gt;OpenEuler 、 Shell 编程&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]智算之道——人工智能应用挑战赛</title>
    <link href="http://meurice.xyz/2020/ckoilxhv2000a54lx38lugfww/"/>
    <id>http://meurice.xyz/2020/ckoilxhv2000a54lx38lugfww/</id>
    <published>2020-10-10T02:01:16.000Z</published>
    <updated>2021-01-08T04:14:55.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空值填充"><a href="#空值填充" class="headerlink" title="空值填充"></a>空值填充</h2><p>　　以众数填充为例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> list(all_data.columns[all_data.isnull().sum() &gt; <span class="number">0</span>]):</span><br><span class="line">  mode_val = all_data[column].mode()[<span class="number">0</span>]</span><br><span class="line">  all_data[column].fillna(mode_val, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>　　注意可能有多个众数，一般取第一个（mode()[0]），否则填充后的DataFrame仍存在空值。</p><h2 id="focal-loss-——tensorflow实现"><a href="#focal-loss-——tensorflow实现" class="headerlink" title="focal loss ——tensorflow实现"></a>focal loss ——tensorflow实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focal_loss</span><span class="params">(logits, labels, gamma=<span class="number">2</span>)</span>:</span></span><br><span class="line">    softmax = tf.reshape(tf.nn.softmax(logits), [<span class="number">-1</span>])</span><br><span class="line">    labels = tf.range(<span class="number">0</span>, tf.shape(logits)[<span class="number">0</span>]) * tf.shape(logits)[<span class="number">1</span>] + labels</span><br><span class="line">    prob = tf.gather(softmax, labels)</span><br><span class="line">    weight = tf.pow(tf.subtract(<span class="number">1.</span>, prob), gamma)</span><br><span class="line">    loss = -tf.reduce_mean(tf.multiply(weight, tf.log(prob)))</span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><h2 id="初赛解决方案"><a href="#初赛解决方案" class="headerlink" title="初赛解决方案"></a>初赛解决方案</h2><p>　　原始特征 + 交叉特征 + 整体(train+test)空值填充，lgb 5折 + catboost，Averaging加权0.4 / 0.6，线上auc 0.8581，个人rank4。<br>　　尝试过FiBiNET + Facol Loss，结果不够稳定，随机种子对结果有一定影响，初赛算力有限，无法做过多特征，线上auc约0.856</p><h2 id="Function-call-stack-train-function"><a href="#Function-call-stack-train-function" class="headerlink" title="Function call stack: train_function"></a>Function call stack: train_function</h2><p>　　在tensorflow2.x下调用tf.combat1没有关闭eager_execution()，加入如下代码解决：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.compat.v1.disable_eager_execution()</span><br></pre></td></tr></table></figure></p><h2 id="fit-generator"><a href="#fit-generator" class="headerlink" title="fit_generator"></a>fit_generator</h2><p>　　从tensorflow 2.1.0开始已不推荐使用fit_generator，fit替代之。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># generator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(batch_size)</span>:</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x_train = np.zeros((batch_size, <span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(batch_size):</span><br><span class="line">            img_path= <span class="string">'./'</span></span><br><span class="line">            img = cv2.imread(img_path)</span><br><span class="line">            img = cv2.resize(img,(<span class="number">128</span>,<span class="number">128</span>))</span><br><span class="line">            x_train[i] = img</span><br><span class="line">        labels = y_train[(j<span class="number">-1</span>)*batch_size:j*batch_size]</span><br><span class="line">        j=j+<span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> x_train, labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># fit_generator</span></span><br><span class="line">fit_generator(self, </span><br><span class="line">generator, </span><br><span class="line">            steps_per_epoch,</span><br><span class="line">            epochs=<span class="number">1</span>, </span><br><span class="line">            verbose=<span class="number">1</span>, </span><br><span class="line">            callbacks=<span class="literal">None</span>, </span><br><span class="line">            validation_data=<span class="literal">None</span>, </span><br><span class="line">            validation_steps=<span class="literal">None</span>, </span><br><span class="line">            class_weight=<span class="literal">None</span>, </span><br><span class="line">            max_q_size=<span class="number">10</span>, </span><br><span class="line">            workers=<span class="number">1</span>, </span><br><span class="line">            pickle_safe=<span class="literal">False</span>, </span><br><span class="line">            initial_epoch=<span class="number">0</span></span><br><span class="line">            )</span><br></pre></td></tr></table></figure><h2 id="决赛解决方案"><a href="#决赛解决方案" class="headerlink" title="决赛解决方案"></a>决赛解决方案</h2><p>　　基线模型为EfficientNET-b5，使用20%的数据预热后，冻结除Dense外的所有层并使用全量数据调整网络，可以参考NeurIPS 2019所收录的一篇文章——<a href="http://papers.nips.cc/paper/9035-fixing-the-train-test-resolution-discrepancy" target="_blank" rel="noopener">Fixing the train-test resolution discrepancy</a>。<br> 　　调用模型对测试集分类结果进行推断时，对测试集做了测试时增强（test time augmentation, TTA），此部分内容可参考<a href="https://github.com/ultralytics/yolov5/issues/303" target="_blank" rel="noopener">Test-Time Augmentation (TTA) Tutorial</a>，包括随机裁切、左右翻转等（考虑天气图像的特殊性，未做上下翻转）。<br>   <img src= "/img/loading.gif" data-src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%932020/scheme.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;空值填充&quot;&gt;&lt;a href=&quot;#空值填充&quot; class=&quot;headerlink&quot; title=&quot;空值填充&quot;&gt;&lt;/a&gt;空值填充&lt;/h2&gt;&lt;p&gt;　　以众数填充为例。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020 计蒜之道 预赛 第一场</title>
    <link href="http://meurice.xyz/2020/ckoilxhub000054lx9crxdsan/"/>
    <id>http://meurice.xyz/2020/ckoilxhub000054lx9crxdsan/</id>
    <published>2020-09-20T12:11:32.000Z</published>
    <updated>2020-09-24T05:43:54.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-五子棋"><a href="#A-五子棋" class="headerlink" title="A.五子棋"></a>A.五子棋</h2><p>　　题意：给出当前状态棋盘，判断下一步黑棋是否可以获胜，并输出下在哪里可获胜。<br>　　思路：遍历棋盘每一处，判断每个位置能否获胜，<strong>需要判断先手方</strong>。<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/09/24/GzuD8.png" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//solution</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cerr <span class="meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pi;</span><br><span class="line"><span class="keyword">typedef</span> V&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">25</span>][<span class="number">25</span>], who;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">yes</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(a[i+k][j]!=who) ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">20</span>; j++) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(a[i][j+k]!=who) ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">20</span>; j++) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(a[i+k][j+k]!=who) ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">20</span>; j++) &#123;</span><br><span class="line"><span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++)</span><br><span class="line"><span class="keyword">if</span>(a[i-k][j+k]!=who) ok = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(ok) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IO_OP;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line"><span class="keyword">if</span>(a[i][j] != <span class="string">'.'</span>) cnt++;</span><br><span class="line">&#125;</span><br><span class="line">who = <span class="string">'x'</span>;</span><br><span class="line"><span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) who = <span class="string">'o'</span>;</span><br><span class="line"><span class="keyword">bool</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">25</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">a[i][j] = who;</span><br><span class="line"><span class="keyword">if</span>(yes()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a[i][j] = <span class="string">'.'</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!y) <span class="built_in">cout</span> &lt;&lt; <span class="string">"tie"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-染色-简单"><a href="#B-染色-简单" class="headerlink" title="B.染色(简单)"></a>B.染色(简单)</h2><p>　　题意：序列中的第 i 个位置染成黑色会产生 b_i 的美感，染成白色会产生 w_i 的美感。有些区间比较特殊，如果区间内的所有数都染成黑色会额外得到 c_i 的美感；另一些区间则恰好相反，如果区间内的所有数都染成白色会额外得到 c_i 的美感。求美感总和最大值。<br>　　思路：<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/09/24/Gzq8m.png" alt></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V vector</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EB emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cerr <span class="meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pi;</span><br><span class="line"><span class="keyword">typedef</span> V&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, N = <span class="number">3e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b[N], w[N], bsum[N], wsum[N], mx[N], sum[N], yes[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IO_OP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">bsum[i] = bsum[i - <span class="number">1</span>] + b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w[i];</span><br><span class="line">wsum[i] = wsum[i - <span class="number">1</span>] + w[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">mx[i] = <span class="built_in">max</span>(b[i], w[i]);</span><br><span class="line">sum[i] = mx[i] + sum[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> t, l, r, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt;= r; j++) yes[j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cur = sum[r] - sum[l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>) &#123;</span><br><span class="line">cur = <span class="built_in">max</span>(cur, bsum[r] - bsum[l<span class="number">-1</span>] + c);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cur = <span class="built_in">max</span>(cur, wsum[r] - wsum[l<span class="number">-1</span>] + c);</span><br><span class="line">&#125;</span><br><span class="line">ans += cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(!yes[i]) ans += mx[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-五子棋&quot;&gt;&lt;a href=&quot;#A-五子棋&quot; class=&quot;headerlink&quot; title=&quot;A.五子棋&quot;&gt;&lt;/a&gt;A.五子棋&lt;/h2&gt;&lt;p&gt;　　题意：给出当前状态棋盘，判断下一步黑棋是否可以获胜，并输出下在哪里可获胜。&lt;br&gt;　　思路：遍历棋盘每一处，判断
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]2020 DIGIX全球校园AI算法精英大赛——赛道B</title>
    <link href="http://meurice.xyz/2020/ckoilxhus000654lx8514c57u/"/>
    <id>http://meurice.xyz/2020/ckoilxhus000654lx8514c57u/</id>
    <published>2020-07-28T10:06:11.000Z</published>
    <updated>2020-08-11T15:52:20.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-7-28"><a href="#2020-7-28" class="headerlink" title="2020.7.28"></a>2020.7.28</h2><h3 id="Resnet50预训练权重文件"><a href="#Resnet50预训练权重文件" class="headerlink" title="Resnet50预训练权重文件"></a>Resnet50预训练权重文件</h3><p>　　.h5文件已上传至百度网盘，链接放在此处。<br>   　　<a href="https://pan.baidu.com/s/1jTn1lI101BZfOoFys9tlOA" target="_blank" rel="noopener">resnet50_weights_tf_dim_ordering_tf_kernels.h5</a>，提取码: pdcg<br>      　　放在C://users//(yourusername)//.keras//models文件下。<br>         　　另外，可以通过<a href="https://d.serctl.com/" target="_blank" rel="noopener">该网站</a>下载Github上的release内容。</p><h3 id="plt-imshow与cv2-imshow显示色差"><a href="#plt-imshow与cv2-imshow显示色差" class="headerlink" title="plt.imshow与cv2.imshow显示色差"></a>plt.imshow与cv2.imshow显示色差</h3><p>　　使用plt.imshow和cv2.imshow对同一幅图显示时，可能会出现色差，这是由于opencv的接口为BGR，而matplotlib.pyplot接口使用的是RGB。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><br>　　或通过以下方法也可实现：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b,g,r &#x3D; cv2.split(cv2.imread(img_path))</span><br><span class="line">img &#x3D; cv2.merge([r,g,b])</span><br></pre></td></tr></table></figure></p><h2 id="2020-8-7"><a href="#2020-8-7" class="headerlink" title="2020.8.7"></a>2020.8.7</h2><h3 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h3><p>　　余弦相似性通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。该结果仅与向量方向相关。余弦相似度通常用于正空间，因此给出的值为-1到1之间。<br>　　<img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/08/08/oJscK.png" alt><br>　　给定两个属性向量，A和B，其余弦相似性θ由点积和向量长度给出：<br>　　<img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/08/08/oJLVT.png" alt><br>　　对于两个向量的<strong>余弦距离</strong>（余弦距离 = 1 - 余弦相似度）的基本计算，Python代码如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cosin_distance</span><span class="params">(vec_1, vec_2)</span>:</span></span><br><span class="line">  dot_product = <span class="number">0.0</span></span><br><span class="line">  normA = <span class="number">0.0</span></span><br><span class="line">  normB = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(vec_1, vec_2):</span><br><span class="line">      dot_product += a * b</span><br><span class="line">      normA += a ** <span class="number">2</span></span><br><span class="line">      normB += b ** <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> normA == <span class="number">0.0</span> <span class="keyword">or</span> normB == <span class="number">0.0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> dot_product / ((normA * normB) ** <span class="number">0.5</span>)</span><br></pre></td></tr></table></figure></p><h2 id="2020-8-8"><a href="#2020-8-8" class="headerlink" title="2020.8.8"></a>2020.8.8</h2><h3 id="大规模数据下使用faiss计算余弦相似度-待完善"><a href="#大规模数据下使用faiss计算余弦相似度-待完善" class="headerlink" title="大规模数据下使用faiss计算余弦相似度(待完善)"></a>大规模数据下使用faiss计算余弦相似度(待完善)</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">d = <span class="number">2048</span>                           <span class="comment"># dimension</span></span><br><span class="line"></span><br><span class="line">nb = gallery_features.shape[<span class="number">0</span>]        <span class="comment"># database size</span></span><br><span class="line">nq = query_features.shape[<span class="number">0</span>]      <span class="comment"># nb of queries</span></span><br><span class="line"></span><br><span class="line">xb = gallery_features.astype(<span class="string">'float32'</span>)</span><br><span class="line">xq = query_features.astype(<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nlist = <span class="number">1000</span>                      <span class="comment">#聚类中心的个数</span></span><br><span class="line">k = <span class="number">10</span>      <span class="comment"># topk搜索</span></span><br><span class="line">quantizer = faiss.IndexFlatL2(d)  <span class="comment"># the other index</span></span><br><span class="line">index = faiss.IndexIVFFlat(quantizer, d, nlist, faiss.METRIC_L2)</span><br><span class="line">     <span class="comment"># here we specify METRIC_L2, by default it performs inner-product search</span></span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">not</span> index.is_trained</span><br><span class="line">index.train(xb)</span><br><span class="line"><span class="keyword">assert</span> index.is_trained</span><br><span class="line"> </span><br><span class="line">index.add(xb)                  <span class="comment"># add may be a bit slower as well</span></span><br><span class="line">D, I = index.search(xq, k)     <span class="comment"># actual search</span></span><br><span class="line">index.nprobe = <span class="number">10</span>              <span class="comment"># default nprobe is 1, try a few more</span></span><br><span class="line">D, I = index.search(xq, k)</span><br></pre></td></tr></table></figure><p>　　此处参考<a href="https://github.com/facebookresearch/faiss/wiki/Getting-started" target="_blank" rel="noopener">官方样例</a>。</p><h2 id="2020-8-11"><a href="#2020-8-11" class="headerlink" title="2020.8.11"></a>2020.8.11</h2><h3 id="Keras添加网络结构报错"><a href="#Keras添加网络结构报错" class="headerlink" title="Keras添加网络结构报错"></a>Keras添加网络结构报错</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(load_model(<span class="string">'/mnt/resnet.model'</span>).get_output_at(<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>　　<em>TypeError: The added layer must be an instance of class Layer.</em><br>　　可能是混合使用了keras.Sequential()和tf.keras.Sequential()；Keras的layer中有input和output属性，错误地使用该部分的成员函数时也可能导致该问题。<br>　　修改如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Sequential()</span><br><span class="line">model.add(load_model(<span class="string">'/mnt/resnet.model'</span>).get_layer(index=<span class="number">0</span>))</span><br></pre></td></tr></table></figure>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020-7-28&quot;&gt;&lt;a href=&quot;#2020-7-28&quot; class=&quot;headerlink&quot; title=&quot;2020.7.28&quot;&gt;&lt;/a&gt;2020.7.28&lt;/h2&gt;&lt;h3 id=&quot;Resnet50预训练权重文件&quot;&gt;&lt;a href=&quot;#Resnet50预训
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>特征工程</title>
    <link href="http://meurice.xyz/2020/ckoilxhv5000b54lxgv5824mg/"/>
    <id>http://meurice.xyz/2020/ckoilxhv5000b54lxgv5824mg/</id>
    <published>2020-07-18T03:42:42.000Z</published>
    <updated>2020-09-06T12:23:12.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言　　"></a>前言　　</h2><p>　　数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>　　特征工程是对原始数据进行一系列工程处理，将其提炼为特征，作为输入供算法和模型使用，简单来说，就是通过X，创造新的X’，目的是去除原始数据中的杂质和冗余，设计更高效的特征以刻画求解的问题与预测模型之间的关系，其本质是一个表示和展现数据的过程。基本的操作包括，衍生（升维），筛选（降维）等。<br>　　例如某分类器接收身高、体重两个参数来判断这个人是否肥胖，仅通过体重无法判断某个人的胖瘦，对于该例，一个非常经典的特征工程是，BMI指数，BMI=体重/(身高^2)，通过BMI指数，可以清晰地对一个人的胖瘦进行刻画。  </p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>　　常见的数据可分为结构化数据（例如关系型数据库的表）和非结构化数据（文本、图像、音频、视频等）。</p><h3 id="单特征"><a href="#单特征" class="headerlink" title="单特征"></a>单特征</h3><h4 id="标准化与归一化"><a href="#标准化与归一化" class="headerlink" title="标准化与归一化"></a>标准化与归一化</h4><p>　　该部分可以参考<a href="http://meurice.xyz/2020/ckcqevh3t0004xclxakyx24ma/">数据预处理——归一化与标准化</a>。</p><h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><h5 id="均值-中位数-众数-固定值填充"><a href="#均值-中位数-众数-固定值填充" class="headerlink" title="均值/中位数/众数/固定值填充"></a>均值/中位数/众数/固定值填充</h5><p>　　如果样本属性的距离是可度量的，则使用该属性有效值的平均值来补全；如果样本属性的距离不可度量，则可以采用众数或者中位数来补全。<br>　　或可根据某一特征对样本进行分类/聚合后（例如船运GPS数据，根据运单号进行聚合后，对样本数据缺失值进行填充），根据同类其他样本该属性的均值补全缺失值，同上述方法类似。<br>　　对于缺失值也可以采用固定的数值来进行填充。</p><h5 id="建模预测"><a href="#建模预测" class="headerlink" title="建模预测"></a>建模预测</h5><p>　　将缺失值字段作为预测对象，建立模型对其进行预测，根据该模型补全原训练集的缺失值。这个方法根本的缺陷是如果其他属性和缺失属性无关，则预测的结果毫无意义；但若模型对预测字段拟合效果相当好，则说明这个缺失属性没必要纳入数据集；一般的情况是介于两者之间。</p><h5 id="高维映射"><a href="#高维映射" class="headerlink" title="高维映射"></a>高维映射</h5><p>　　将属性映射到高维空间，采用独热码编码（one-hot）技术。将包含 K 个离散取值范围的属性值扩展为 K+1 个属性值，若该属性值缺失，则扩展后的第 K+1 个属性值置为 1。<br>　　这种做法既保留了所有的信息，也未添加任何额外信息，但会增加数据的维度，增大了计算量，一般在样本量非常大时效果才比较好。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>　　如多重插补、压缩感知和矩阵补全等，此处不具体展开，可以参考<a href="https://mp.weixin.qq.com/s/BnTXjzHSb5-4s0O0WuZYlg" target="_blank" rel="noopener">这篇文章</a>。</p><h4 id="特征二值化"><a href="#特征二值化" class="headerlink" title="特征二值化"></a>特征二值化</h4><p>　　 设立阈值，将特征二值化。<br>　　<img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/18/ClGSk.png" alt="erzhihua"><br>　　可以类比将模拟信号转换成数字信号过程中的量化。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_ = preprocessing.Binarizer(threshold=<span class="number">0</span>).transform(X)</span><br></pre></td></tr></table></figure></p><h4 id="哑编码-独热编码"><a href="#哑编码-独热编码" class="headerlink" title="哑编码/独热编码"></a>哑编码/独热编码</h4><p>　　哑编码/独热编码针对定性的特征进行处理。</p><h5 id="哑编码-dummy-encoding"><a href="#哑编码-dummy-encoding" class="headerlink" title="哑编码(dummy encoding)"></a>哑编码(dummy encoding)</h5><p>　　假设有N种定性值，则将这一个特征扩展为N种特征，当原始特征值为第i种定性值时，第i个扩展特征赋值为1，其他扩展特征赋值为0。哑编码的方式相比直接指定的方式，不用增加调参的工作，对于线性模型来说，使用哑编码后的特征可达到非线性的效果。<br>　　例如描述一个人的身材，我们可以用偏瘦、正常、偏胖，这些描述词经过哑编码就会得到：<br>　　　　偏廋 —&gt; [1, 0, 0]<br>　　　　正常 —&gt; [0, 1, 0]<br>　　　　偏胖 —&gt; [0, 0, 1]<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_ = pd.Categorical(df[<span class="string">'c'</span>]).codes</span><br></pre></td></tr></table></figure></p><h5 id="独热编码-one-hot-encoding"><a href="#独热编码-one-hot-encoding" class="headerlink" title="独热编码(one-hot encoding)"></a>独热编码(one-hot encoding)</h5><p>　　同上例，实际用2个状态位就足够反应上述3个类别的信息：<br>　　　　偏廋 —&gt; [1, 0]<br>　　　　正常 —&gt; [0, 1]<br>　　　　偏胖 —&gt; [0, 0]<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">encoder=OneHotEncoder(sparse=<span class="literal">False</span>) </span><br><span class="line"><span class="comment"># sparse是一个布尔值，指定结果是否稀疏。</span></span><br><span class="line"><span class="comment"># 若sparse=True，则每个样本的独热码为一个稀疏矩阵。</span></span><br></pre></td></tr></table></figure><br>  <br><br>　　关于哑编码/独热编码的区别和联系以及连续值的离散化提升模型的非线性能力的原因，可以参考<a href="https://www.cnblogs.com/lianyingteng/p/7792693.html" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="多特征"><a href="#多特征" class="headerlink" title="多特征"></a>多特征</h3><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><p>　　数据预处理完成后，需要选择有意义的特征输入机器学习的算法和模型进行训练，一般从以下两个方面考虑：<br>　　· 特征是否发散（某特征不发散，说明对于区分样本作用并不大）<br>　　· 特征与目标的相关性  </p><p>　　特征选择主要包括：<br>　　· Filter Method （过滤式）<br>　　· Wrapper Method （包装式）<br>　　· Embedded Method （嵌入式）</p><h5 id="特征选择原理"><a href="#特征选择原理" class="headerlink" title="特征选择原理"></a>特征选择原理</h5><p>　　·去除无关特征可以降低学习任务的难度，也同样让模型变得简单，降低计算复杂度　　</p><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><p>　　过滤式方法先对数据集进行特征选择，然后再训练模型，<strong>特征选择过程与后续模型训练无关</strong>。<br>　　通过统计学的方法对每个feature给出一个score，通过score对特征进行排序，然后选取score最高的子集.。这种方法仅仅对每个feature进行<strong>独立考虑</strong>，没有考虑到feture之间的依赖性或相关性。  </p><h6 id="方差选择法"><a href="#方差选择法" class="headerlink" title="方差选择法"></a>方差选择法</h6><p>　　计算各个特征的方差，根据阈值，<strong>选择方差大于阈值的特征</strong>。即若样本中该特征差异并不大，则认为该特征对于区分样本贡献不大，故可以将其去掉。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"></span><br><span class="line">VarianceThreshold(threshold=<span class="number">0</span>).fit_transform(data)</span><br></pre></td></tr></table></figure></p><h6 id="相关系数法"><a href="#相关系数法" class="headerlink" title="相关系数法"></a>相关系数法</h6><p>　　计算各个特征对目标值的相关系数以及相关系数的P值。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> VarianceThreshold</span><br><span class="line"></span><br><span class="line">SelectKBest(<span class="keyword">lambda</span> X, Y: array(map(<span class="keyword">lambda</span> x:pearsonr(x, Y), X.T)).T, </span><br><span class="line">            k=<span class="number">4</span>).fit_transform(data, target)</span><br><span class="line"><span class="comment"># 第一个参数为计算评估特征是否好的函数，该函数输入特征矩阵和目标向量，输出二元组（评分，P值）的数组，数组第i项为第i个特征的评分和P值。（在此定义为计算相关系数）</span></span><br><span class="line"><span class="comment"># 参数k为选择的特征个数，选择k个最好的特征，返回选择特征后的数据</span></span><br></pre></td></tr></table></figure></p><h6 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h6><p>　　经典的卡方检验是<strong>检验定性自变量对定性因变量的相关性</strong>，是统计样本的实际观测值与理论推断值之间的偏离程度，实际观测值与理论推断值之间的偏离程度就决定卡方值的大小，如果卡方值越大，二者偏差程度越大；反之，二者偏差越小；若两个值完全相等时，卡方值就为0，表明理论值完全符合。<br>　　假设自变量有N种取值，因变量有M种取值，考虑自变量等于 i 且因变量等于 j 的样本频数的观察值与期望的差距。<br>　　<img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/19/Cyng1.png" alt="x2"><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> chi2 </span><br><span class="line"><span class="comment"># 选择k个最佳特征</span></span><br><span class="line">SelectKBest(chi2, k=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br></pre></td></tr></table></figure></p><h6 id="互信息法"><a href="#互信息法" class="headerlink" title="互信息法"></a>互信息法</h6><p>　　互信息(Mutual Information)是信息论里一种有用的信息度量，它可以看成是一个随机变量中包含的关于另一个随机变量的信息量，或者说是一个随机变量由于已知另一个随机变量而减少的不肯定性。<br>　　经典的互信息<strong>评价定性自变量对定性因变量的相关性</strong>。<br>　　设两个随机变量(X, Y)的联合分布为p(x, y)，边缘分布分别为p(x), p(y)，互信息I(X, Y)是联合分布p(x, y)与边缘分布p(x)p(y)的相对熵，即：<br><img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/19/CV0Ek.png" alt="mutual info"><br> 　　关系图：<br><img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/19/CVofa.png" alt="mutual"><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> minepy <span class="keyword">import</span> MINE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义mic方法将MINE设为函数式的，返回一个二元组，二元组的第2 项设置成固定的P值0.5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mic</span><span class="params">(x, y)</span>:</span></span><br><span class="line">m = MINE()</span><br><span class="line">  m.compute_score(x, y)</span><br><span class="line">  <span class="keyword">return</span> (m.mic(), <span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">SelectKBest(<span class="keyword">lambda</span> X, Y: array(map(<span class="keyword">lambda</span> x:mic(x, Y), X.T)).T,</span><br><span class="line">k=<span class="number">2</span>).fit_transform(iris.data, iris.target)</span><br></pre></td></tr></table></figure></p><h5 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h5><p>　　包裹式特征选择直接把最终将要使用的模型的性能作为特征子集的评价标准，即包裹式特征选择的目的就是为给定的模型选择最有利于其性能的特征子集。从最终模型的性能来看，包裹式特征选择比过滤式特征选择更好，但需要多次训练模型，计算开销较大。<br><img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/19/CVCpn.png" alt="filter mutual"></p><h6 id="递归特征消除法"><a href="#递归特征消除法" class="headerlink" title="递归特征消除法"></a>递归特征消除法</h6><p>　　递归特征消除法使用一个基模型来进行多轮训练，每轮训练后，消除若干权值系数的特征，再基于新的特征集进行下一轮训练。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFE</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处选择LR为基模型(estimator)</span></span><br><span class="line">RFE(estimator=LogisticRegression(), n_features_to_select=<span class="number">4</span>).fit_transform(data, target)</span><br></pre></td></tr></table></figure></p><h5 id="Embedded"><a href="#Embedded" class="headerlink" title="Embedded"></a>Embedded</h5><p>　　在前两种特征选择方法中，特征选择过程和模型训练过程是有明显分别的两个过程。嵌入式特征选择是<strong>将特征选择过程与学习器训练过程融为一体</strong>，两者在同一个优化过程中完成，即在学习器训练过程中自动地进行了特征选择。例如岭回归(Ridge)、LASSO回归。常利用正则化，如L1，L2范数，主要应用于如线性回归、逻辑回归以及支持向量机(SVM)等算法；使用决策树思想，包括决策树、随机森林、Gradient Boosting 等。<br>　　若使用L2范数正则化，则此时优化目标的公式即为岭回归(ridge regression)，若是L1范数正则化，则是LASSO回归(Least Absolute Shrinkage and Selection Operator)。L1范数和L2范数正则化都有助于降低过拟合风险，但前者还会带来一个额外的好处，它比后者更易于获得稀疏解，即它求得的w会有更少的非零分类。换言之，采用L1范数比L2范数更易于得到稀疏解。（参考<a href="https://zhuanlan.zhihu.com/p/120924870" target="_blank" rel="noopener">机器学习（六）：特征选择方法—Filter,Wrapper,Embedded</a>）</p><h6 id="基于惩罚项的特征选择法"><a href="#基于惩罚项的特征选择法" class="headerlink" title="基于惩罚项的特征选择法"></a>基于惩罚项的特征选择法</h6><p>　　使用带惩罚项的基模型，除了筛选出特征外，同时也进行了降维。<br>　　带L1惩罚项的LR：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.feature_selection import SelectFromModel</span><br><span class="line">from sklearn.linear_model import LogisticRegression</span><br><span class="line"> </span><br><span class="line">SelectFromModel(LogisticRegression(penalty&#x3D;&quot;l1&quot;, C&#x3D;0.1)).fit_transform(data, target)</span><br></pre></td></tr></table></figure></p><h6 id="基于树模型的特征选择法"><a href="#基于树模型的特征选择法" class="headerlink" title="基于树模型的特征选择法"></a>基于树模型的特征选择法</h6><p>　　GBDT作为基模型<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectFromModel</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line">SelectFromModel(GradientBoostingClassifier()).fit_transform(data, target)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言　　&quot;&gt;&lt;/a&gt;前言　　&lt;/h2&gt;&lt;p&gt;　　数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。&lt;/p&gt;
&lt;h2 id=&quot;特征工程&quot;&gt;&lt;a href=&quot;#特征
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据预处理——归一化与标准化</title>
    <link href="http://meurice.xyz/2020/ckoilxhv0000954lxg9g6c9bq/"/>
    <id>http://meurice.xyz/2020/ckoilxhv0000954lxg9g6c9bq/</id>
    <published>2020-07-17T09:33:10.000Z</published>
    <updated>2020-07-18T03:28:29.237Z</updated>
    
    <content type="html"><![CDATA[<p>归一化和标准化都属于四种Feature scaling（特征缩放）方法：<br>　　1.Rescaling(min-max normalization)<br>  <img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/17/C8jCa.png" alt="Rescaling"><br>　　2.Mean normalization<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/17/C8h9n.png" alt="Mean normalization"><br>　　3.Standardization(Z-score normalization)<br>  <img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/17/C8swh.png" alt="Standardization"><br>　　4.Scaling to unit length<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/17/C8JrM.png" alt="Scaling to unit length"></p><h2 id="归一化-Normalization"><a href="#归一化-Normalization" class="headerlink" title="归一化(Normalization)"></a>归一化(Normalization)</h2><h3 id="归一化目标"><a href="#归一化目标" class="headerlink" title="归一化目标"></a>归一化目标</h3><p>　　归一化将一列数据变化到某个固定区间（范围）中，这一区间通常是[0,1]，广义的讲，可以是各种区间，例如图像中可能会映射到[0,255]。<br>　　归一化使得各个特征维度对目标函数的影响权重是一致的，将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量，同时使得扁平分布的数据伸缩变换成类圆形。<br>　　概率模型不需要归一化，因为它们不关心变量的值，而是关心变量的分布和变量之间的条件概率，如决策树、rf。而像Adaboost、、xgboost、SVM、LR、KNN、KMeans之类的最优化问题就需要归一化。</p><h3 id="归一化带来的好处"><a href="#归一化带来的好处" class="headerlink" title="归一化带来的好处"></a>归一化带来的好处</h3><p>　　Feature Sacling(Normalization)对基于Gradient descent算法友好，可让算法最终收敛并且提高训练速度和精度。<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/17/C8wYT.jpg" alt="scaling"></p><p>　　对于使用梯度下降算法来更新权重的训练过程，每一次更新的delta，除了与学习率有关，还与样本值本身也有关系。<br>  <img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/17/C8vxJ.png" alt="gd"><br>　　Xj(i)就是当前更新批次对应的样本值，因此值越大的样本单次更新权重更快，这就有可能带来收敛速度不一样甚至不收敛等问题。</p><h3 id="归一化算法："><a href="#归一化算法：" class="headerlink" title="归一化算法："></a>归一化算法：</h3><p>　　1.线性转换：x’ = (x - min(x)) / (max(x) - min(x))<br>　　2.对数函数转换：x’ = lg(x) / lg(max)，其中max表示样本数据的最大值，所有样本数据均要大于等于1。<br>　　3.arctan反正切函数转换：x’ = arctan(x) * (2 / pi)，应注意的是，若希望映射的区间为[0,1]，则数据都应该大于等于0，小于0的数据将被映射到[-1,0]区间上。<br>　　4.L2范数归一化：对向量X的每个维度数据x1, x2, …, xn都除以||x||2得到一个新向量，即<br>  <img src= "/img/loading.gif" data-src="https://wx1.sbimg.cn/2020/07/17/C8imm.png" alt="l2"><br>　　经过L2范数归一化后，一组向量的欧式距离和它们的余弦相似度可以等价，严格数学证明可以参考<a href="https://www.cnblogs.com/Kalafinaian/p/11180519.html" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="标准化-Standardization"><a href="#标准化-Standardization" class="headerlink" title="标准化(Standardization)"></a>标准化(Standardization)</h2><h3 id="标准化目标"><a href="#标准化目标" class="headerlink" title="标准化目标"></a>标准化目标</h3><p>　　将数据变换为均值为0，标准差为1的分布（<strong>不一定是正态分布</strong>）。<br>　　<img src= "/img/loading.gif" data-src="https://wx2.sbimg.cn/2020/07/17/C8FgD.png" alt="st"></p><h2 id="联系与差异"><a href="#联系与差异" class="headerlink" title="联系与差异"></a>联系与差异</h2><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p>　　· Normalization和Standardization都是使数值都落入到统一的数值范围，消除了数据量纲的影响。  </p><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>　　此处参考文章<a href="https://blog.csdn.net/weixin_36604953/article/details/102652160" target="_blank" rel="noopener">标准化和归一化，请勿混为一谈，透彻理解数据变换</a>。<br>　　· Normalization把数据限定在需要的范围，一般为[0,1]区间；Standardization将数据变换为μ=0，σ=1的分布，但没有严格规定区间。<br>　　· Normalization对数据的缩放比例仅仅和极值有关；但对于Standardization而言，若将除极大值和极小值外的数据更换，则均值和标准差也可能会因此改变，缩放比例也随之改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归一化和标准化都属于四种Feature scaling（特征缩放）方法：&lt;br&gt;　　1.Rescaling(min-max normalization)&lt;br&gt;  &lt;img src= &quot;/img/loading.gif&quot; data-src=&quot;https://wx1.sbim
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux设置定时任务</title>
    <link href="http://meurice.xyz/2020/ckoilxhup000354lx5kan3lmi/"/>
    <id>http://meurice.xyz/2020/ckoilxhup000354lx5kan3lmi/</id>
    <published>2020-07-16T11:40:44.000Z</published>
    <updated>2020-07-17T14:22:00.702Z</updated>
    
    <content type="html"><![CDATA[<p>环境：CentOS 8</p><h3 id="执行内容"><a href="#执行内容" class="headerlink" title="执行内容"></a>执行内容</h3><p>　　新建文件_crond.sh，作为定时执行的内容。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">cd &#x2F;www&#x2F;blog&#x2F;hexo</span><br><span class="line">git pull git@github.com:egname&#x2F;egrepo.git</span><br><span class="line"></span><br><span class="line">#echo pull successfully &gt; &#x2F;home&#x2F;gitpull.log</span><br></pre></td></tr></table></figure></p><h3 id="crontab服务"><a href="#crontab服务" class="headerlink" title="crontab服务"></a>crontab服务</h3><p>　　启动crontab服务，CentOS版本不同，具体命令可能有所差异。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start crond</span><br></pre></td></tr></table></figure><br>　　启动服务</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop crond            # 关闭服务</span><br><span class="line">systemctl restart crond         # 重启服务     </span><br><span class="line">systemctl reload crond          # 重新载入配置</span><br><span class="line">systemctl status crond          # 状态</span><br></pre></td></tr></table></figure><h3 id="设置计时器"><a href="#设置计时器" class="headerlink" title="设置计时器"></a>设置计时器</h3><p>　　crontab 选项 参数<br>　　选项:<br>　　　　-e：编辑该用户的计时器设置；<br>　　　　-l：列出该用户的计时器设置；<br>　　　　-r：删除该用户的计时器设置；<br>　　　　-u：指定要设定计时器的用户名称。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></p><p> 　　进入insert插入模式，以每五分钟执行一次为例。ESC后输入wq保存并退出。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#x2F;5 * * * * &#x2F;root&#x2F;_crond.sh</span><br></pre></td></tr></table></figure><br>  <br></p><p>  关于Crontab更多具体用法，您可以参考<a href="https://www.cnblogs.com/muscles/p/9532451.html" target="_blank" rel="noopener">这篇文章</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：CentOS 8&lt;/p&gt;
&lt;h3 id=&quot;执行内容&quot;&gt;&lt;a href=&quot;#执行内容&quot; class=&quot;headerlink&quot; title=&quot;执行内容&quot;&gt;&lt;/a&gt;执行内容&lt;/h3&gt;&lt;p&gt;　　新建文件_crond.sh，作为定时执行的内容。&lt;br&gt;  &lt;figure cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]2020 DIGIX全球校园AI算法精英大赛——赛道A</title>
    <link href="http://meurice.xyz/2020/ckoilxhuw000754lx4co5ct6i/"/>
    <id>http://meurice.xyz/2020/ckoilxhuw000754lx4co5ct6i/</id>
    <published>2020-07-16T04:23:28.000Z</published>
    <updated>2020-08-15T04:26:18.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-7-16"><a href="#2020-7-16" class="headerlink" title="2020.7.16"></a>2020.7.16</h2><p>　　7.20放赛题数据，先拿kaggle五年前的Click-Through Rate Prediction试水。</p><h3 id="分块读取全部数据"><a href="#分块读取全部数据" class="headerlink" title="分块读取全部数据"></a>分块读取全部数据</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">loop = <span class="literal">True</span></span><br><span class="line">chunkSize = <span class="number">1000000</span></span><br><span class="line">chunks = []</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> loop:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(index)</span><br><span class="line">        chunk = train_data.get_chunk(chunkSize)</span><br><span class="line">        chunks.append(chunk)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">  <span class="keyword">except</span> StopIteration:</span><br><span class="line">        loop = <span class="literal">False</span></span><br><span class="line">        print(<span class="string">"Iteration is stopped."</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(chunks):</span><br><span class="line">    train_data = pd.concat(chunks, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="随机读取一定比例的数据"><a href="#随机读取一定比例的数据" class="headerlink" title="随机读取一定比例的数据"></a>随机读取一定比例的数据</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> pd.read_csv(train_data, chunksize=chunksize):</span><br><span class="line">    chunks += <span class="number">1</span></span><br><span class="line">    train = pd.concat([train, chunk.sample(frac=<span class="number">.05</span>, replace=<span class="literal">False</span>, random_state=<span class="number">42</span>)], axis=<span class="number">0</span>) </span><br><span class="line">    print(<span class="string">'Processing Chunk '</span> + str(chunks))</span><br></pre></td></tr></table></figure><h3 id="条件筛选修改"><a href="#条件筛选修改" class="headerlink" title="条件筛选修改"></a>条件筛选修改</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'column_d'</span>].loc[df[<span class="string">'column_c'</span>] == <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"><span class="comment"># df['column_d'][df['column_c'] == 0] = 0</span></span><br></pre></td></tr></table></figure><h3 id="lightgbm-梯度提升决策树"><a href="#lightgbm-梯度提升决策树" class="headerlink" title="lightgbm 梯度提升决策树"></a>lightgbm 梯度提升决策树</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kfold_lightgbm</span><span class="params">(train, test, features, target, seed=<span class="number">42</span>, is_shuffle=True)</span>:</span></span><br><span class="line">   train_pred = np.zeros((train.shape[<span class="number">0</span>],))</span><br><span class="line">   test_pred = np.zeros((test.shape[<span class="number">0</span>],))</span><br><span class="line">   n_splits = <span class="number">5</span>  </span><br><span class="line">   </span><br><span class="line">   fold = KFold(n_splits=n_splits, shuffle=is_shuffle, random_state=seed)</span><br><span class="line">   kf_way = fold.split(train[features])</span><br><span class="line"></span><br><span class="line">   params = &#123;</span><br><span class="line">       <span class="string">'learning_rate'</span>: <span class="number">0.003</span>,</span><br><span class="line">       <span class="string">'boosting_type'</span>: <span class="string">'gbdt'</span>,</span><br><span class="line">       <span class="string">'objective'</span>: <span class="string">'regression'</span>,</span><br><span class="line">       <span class="string">'num_leaves'</span>: <span class="number">36</span>,</span><br><span class="line">       <span class="string">'metric'</span>: <span class="string">'mse'</span>,</span><br><span class="line">       <span class="string">'feature_fraction'</span>: <span class="number">0.6</span>,</span><br><span class="line">       <span class="string">'bagging_fraction'</span>: <span class="number">0.7</span>,</span><br><span class="line">       <span class="string">'bagging_freq'</span>: <span class="number">6</span>,</span><br><span class="line">       <span class="string">'seed'</span>: <span class="number">42</span>,</span><br><span class="line">       <span class="string">'bagging_seed'</span>: <span class="number">1</span>,</span><br><span class="line">       <span class="string">'feature_fraction_seed'</span>: <span class="number">7</span>,</span><br><span class="line">       <span class="string">'min_data_in_leaf'</span>: <span class="number">7</span>,</span><br><span class="line">       <span class="string">'nthread'</span>: <span class="number">8</span>,</span><br><span class="line">       <span class="string">'verbose'</span>: <span class="number">1</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   fold_importance_df = pd.DataFrame()</span><br><span class="line">   <span class="keyword">for</span> n_fold, (train_idx, valid_idx) <span class="keyword">in</span> enumerate(kf_way, start=<span class="number">1</span>):</span><br><span class="line">       train_x, train_y = train[features].iloc[train_idx], train[target].iloc[train_idx]</span><br><span class="line">       valid_x, valid_y = train[features].iloc[valid_idx], train[target].iloc[valid_idx]</span><br><span class="line"></span><br><span class="line">       n_train = lgb.Dataset(train_x, label=train_y)</span><br><span class="line">       n_valid = lgb.Dataset(valid_x, label=valid_y)</span><br><span class="line"></span><br><span class="line">       clf = lgb.train(</span><br><span class="line">           params= params,</span><br><span class="line">           train_set= n_train,</span><br><span class="line">           num_boost_round= <span class="number">10000</span>,</span><br><span class="line">           valid_sets= [n_valid],</span><br><span class="line">           early_stopping_rounds= <span class="number">150</span>,</span><br><span class="line">           verbose_eval= <span class="number">100</span></span><br><span class="line">       )</span><br><span class="line">       train_pred[valid_idx] = clf.predict(valid_x, num_iteration=clf.best_iteration)</span><br><span class="line">       test_pred += clf.predict(test[features], num_iteration=clf.best_iteration) / fold.n_splits</span><br><span class="line"></span><br><span class="line">       fold_importance_df[<span class="string">"Feature"</span>] = features</span><br><span class="line">       fold_importance_df[<span class="string">"importance"</span>] = clf.feature_importance(importance_type=<span class="string">'gain'</span>)</span><br><span class="line">       fold_importance_df[<span class="string">"fold"</span>] = n_splits</span><br><span class="line"></span><br><span class="line">   test[TARGET] = test_pred</span><br><span class="line">   <span class="keyword">return</span> test[[<span class="string">'id'</span>, TARGET]], fold_importance_df</span><br></pre></td></tr></table></figure><h3 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> cat_features:</span><br><span class="line">    ce_oe = ce.OrdinalEncoder(cols=cat_features, handle_unknown=<span class="string">'impute'</span>)</span><br><span class="line">    ce_oe.fit(train)</span><br><span class="line">    train = ce_oe.transform(train)</span><br><span class="line">    test = ce_oe.transform(test)</span><br></pre></td></tr></table></figure><h2 id="2020-7-20"><a href="#2020-7-20" class="headerlink" title="2020.7.20"></a>2020.7.20</h2><p>　　下午官网放了赛题数据，随机抽了5%的数据放进GBDT跑了一下，目测效果并不是很好，CTR标签分布很不均匀，训练集标签为1的样本大概只占到了3%。</p><h3 id="结果出现负值"><a href="#结果出现负值" class="headerlink" title="结果出现负值"></a>结果出现负值</h3><p>　　GBDT是加法模型，下一轮都是上一轮预测值和实际值的残差作为label继续拟合，将结果相加，最后可能会出现负值，特别是例如CTR场景下大部分标签都为0的场景下更容易出现这种情况。</p><h2 id="2020-7-21"><a href="#2020-7-21" class="headerlink" title="2020.7.21"></a>2020.7.21</h2><p>　　丢了几个缺失比较大的特征，对数据做了简单随机采样之后跑lgb5折交了一发，线上分数能到0.7，比预想中的要好，还有一定的提升空间，下一步打算从模型角度切入。</p><h2 id="2020-7-22"><a href="#2020-7-22" class="headerlink" title="2020.7.22"></a>2020.7.22</h2><h3 id="error-Only-one-class-present-in-y-true"><a href="#error-Only-one-class-present-in-y-true" class="headerlink" title="error:Only one class present in y_true"></a>error:Only one class present in y_true</h3><p>　　DeepFM训练过程报错：Only one class present in y_true. ROC AUC score is not defined in that case.<br>　　定义的AUROC函数如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auroc</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line"><span class="keyword">return</span> tf.compat.v1.py_func(roc_auc_score, (y_true, y_pred), tf.double)</span><br></pre></td></tr></table></figure><br>　　AUC（ROC 曲线下的面积）需要足够数量的任一类才能有意义，而CTR样本中本身就存在着非常严重的正负样本不平衡的问题。<br>　　目前解决方案如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AUC for a binary classifier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auc</span><span class="params">(y_true, y_pred)</span>:</span></span><br><span class="line">    ptas = tf.stack([binary_PTA(y_true, y_pred, k) <span class="keyword">for</span> k <span class="keyword">in</span> np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)], axis=<span class="number">0</span>)</span><br><span class="line">    pfas = tf.stack([binary_PFA(y_true, y_pred, k) <span class="keyword">for</span> k <span class="keyword">in</span> np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1000</span>)], axis=<span class="number">0</span>)</span><br><span class="line">    pfas = tf.concat([tf.ones((<span class="number">1</span>,)), pfas], axis=<span class="number">0</span>)</span><br><span class="line">    binSizes = -(pfas[<span class="number">1</span>:] - pfas[:<span class="number">-1</span>])</span><br><span class="line">    s = ptas * binSizes</span><br><span class="line">    <span class="keyword">return</span> K.sum(s, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># PFA, prob false alert for binary classifier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_PFA</span><span class="params">(y_true, y_pred, threshold=K.variable<span class="params">(value=<span class="number">0.5</span>)</span>)</span>:</span></span><br><span class="line">    y_pred = K.cast(y_pred &gt;= threshold, <span class="string">'float32'</span>)</span><br><span class="line">    <span class="comment"># N = total number of negative labels</span></span><br><span class="line">    N = K.sum(<span class="number">1</span> - y_true)</span><br><span class="line">    <span class="comment"># FP = total number of false alerts, alerts from the negative class labels</span></span><br><span class="line">    FP = K.sum(y_pred - y_pred * y_true)</span><br><span class="line">    <span class="keyword">return</span> FP / N</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># P_TA prob true alerts for binary classifier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_PTA</span><span class="params">(y_true, y_pred, threshold=K.variable<span class="params">(value=<span class="number">0.5</span>)</span>)</span>:</span></span><br><span class="line">    y_pred = K.cast(y_pred &gt;= threshold, <span class="string">'float32'</span>)</span><br><span class="line">    <span class="comment"># P = total number of positive labels</span></span><br><span class="line">    P = K.sum(y_true)</span><br><span class="line">    <span class="comment"># TP = total number of correct alerts, alerts from the positive class labels</span></span><br><span class="line">    TP = K.sum(y_pred * y_true)</span><br><span class="line">    <span class="keyword">return</span> TP / P</span><br></pre></td></tr></table></figure><br>　　也可在整个训练过程完成后，在vaild_set上计算auc。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pred_ans_val = model.predict(vaild_model_input, batch_size=<span class="number">512</span>)</span><br><span class="line">print(<span class="string">'val_auc'</span>, roc_auc_score(vaild[target].values, pred_ans_val))</span><br></pre></td></tr></table></figure></p><h2 id="2020-7-24"><a href="#2020-7-24" class="headerlink" title="2020.7.24"></a>2020.7.24</h2><h3 id="DeepFM参数调整"><a href="#DeepFM参数调整" class="headerlink" title="DeepFM参数调整"></a>DeepFM参数调整</h3><p>　　* <strong>Regression</strong><br>　　This implementation also supports regression task. To use DeepFM for regression, you can set loss_type as mse. Accordingly, you should use eval_metric for regression, e.g., mse or mae.*<br>　　DeepFM中task参数调整为regression后，loss也需随之进行更改。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">model = DeepFM(</span><br><span class="line">linear_feature_columns=linear_feature_columns,</span><br><span class="line">dnn_feature_columns=dnn_feature_columns,</span><br><span class="line">task=<span class="string">'regression'</span>,</span><br><span class="line">l2_reg_embedding=<span class="number">1e-5</span></span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  model.compile(</span><br><span class="line">  <span class="string">'adam'</span>,</span><br><span class="line">  <span class="string">'mse'</span>,</span><br><span class="line">  metrics=[<span class="string">'accuracy'</span>]</span><br><span class="line">      )</span><br></pre></td></tr></table></figure></p><h2 id="2020-7-29"><a href="#2020-7-29" class="headerlink" title="2020.7.29"></a>2020.7.29</h2><h3 id="onehot编码"><a href="#onehot编码" class="headerlink" title="onehot编码"></a>onehot编码</h3><p>　　OneHotEncoder 的输入为 2-D array，data[feat] 返回的 Series 为 1-D array。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> feat <span class="keyword">in</span> cat_features:</span><br><span class="line">ohe = OneHotEncoder()</span><br><span class="line">data[feat] = ohe.fit_transform(data[[feat]])</span><br></pre></td></tr></table></figure><br>　　将data[feat]改为data[[feat]]</p><h2 id="2020-8-14"><a href="#2020-8-14" class="headerlink" title="2020.8.14"></a>2020.8.14</h2><h3 id="Error-Input-contains-NaN"><a href="#Error-Input-contains-NaN" class="headerlink" title="Error:Input contains NaN"></a>Error:Input contains NaN</h3><p>　　报错<em>ValueError: Input contains NaN, infinity or a value too large for dtype(‘float32’).</em><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> tr_x.columns:</span><br><span class="line"><span class="keyword">if</span>(df[index].isna().T.any()):</span><br><span class="line">  print(index,df[index].isna())</span><br><span class="line"><span class="comment"># ------</span></span><br><span class="line">print(df[df.isnull().T.any()])</span><br></pre></td></tr></table></figure><br>　　若检查dataframe无空值后仍然报错。可尝试检查dataframe索引是否连续。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.reset_index(drop=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="2020-8-15"><a href="#2020-8-15" class="headerlink" title="2020.8.15"></a>2020.8.15</h2><h3 id="pandas-apply设置进度条"><a href="#pandas-apply设置进度条" class="headerlink" title="pandas apply设置进度条"></a>pandas apply设置进度条</h3><p>　　apply速度较慢，可设置进度条实时显示处理进度。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">tqdm.pandas(desc=<span class="string">'pandas bar'</span>)</span><br><span class="line"></span><br><span class="line">test[<span class="string">'B'</span>] = test.progress_apply(<span class="keyword">lambda</span> x:func(x[<span class="string">'A'</span>]), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020-7-16&quot;&gt;&lt;a href=&quot;#2020-7-16&quot; class=&quot;headerlink&quot; title=&quot;2020.7.16&quot;&gt;&lt;/a&gt;2020.7.16&lt;/h2&gt;&lt;p&gt;　　7.20放赛题数据，先拿kaggle五年前的Click-Through Rate
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo+Nginx搭建静态页面博客</title>
    <link href="http://meurice.xyz/2020/ckoilxhuk000154lx8zhb5gb7/"/>
    <id>http://meurice.xyz/2020/ckoilxhuk000154lx8zhb5gb7/</id>
    <published>2020-07-15T07:54:00.000Z</published>
    <updated>2020-07-16T10:32:32.590Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架，且支持 Markdown 语法。</p><p>• 本地环境配置：Node.js+Git+Hexo <br><br>• ECS环境配置：(CentOs 8) Node.js+Git+Pm2+Nginx <br><br>• 安全组配置：阿里云ECS <br><br>• 域名：腾讯云域名解析 <br><br>• Webhook：Github</p><h3 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置 "></a>本地环境配置 <br></h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js "></a>Node.js <br></h4><p>　Node.js官网<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>，安装目录尽量不要包括空格，命令行下<code>node -v</code>验证是否安装成功。<br><br>　或通过<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝npm镜像</a>安装。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git<br></h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>　Git官网 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，命令行<code>git --version</code>验证。</p><h5 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h5><p>　　配置Github用户名 <br><br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;example&quot;</span><br><span class="line">git config --global user.email &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure><br>　　生成秘钥<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure></p><p>　　~/.ssh文件夹下生成id_rsa.pub公有密钥，依次进入Github——Settings——SSH and GPG keys，添加SSH key，将d_rsa.pub中的内容放入Key中。具体可以参考<a href="https://blog.csdn.net/playboyanta123/article/details/49611873?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">这篇文章</a>，Linux系统可以参考<a href="https://blog.csdn.net/qq_36663951/article/details/78749217?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1" target="_blank" rel="noopener">这篇文章</a>。</p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo<br></h4><p>　　npm全局安装<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>　　验证<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -version</span><br></pre></td></tr></table></figure></p><p>　　新建文件夹用来存放Hexo代码，在该文件夹下执行命令行。<br>　　初始化Hexo，生成相关文件。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -init</span><br></pre></td></tr></table></figure></p><p>　　安装相关依赖<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>　　预览效果<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>　　浏览器进入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h4 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github<br></h4><p>　　安装git部署工具<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><br>　　修改_config.yml，repo字段修改为github仓库的SSH链接。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo:git@github.com:egname&#x2F;egrepo.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><br>　　代码上传至Github<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><h3 id="ECS环境配置"><a href="#ECS环境配置" class="headerlink" title="ECS环境配置 "></a>ECS环境配置 <br></h3><p>　　服务器为阿里云ECS云服务器，CentOS 8。</p><h4 id="Node-js-1"><a href="#Node-js-1" class="headerlink" title="Node.js"></a>Node.js<br></h4><p>　　采用yum方式安装<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https:&#x2F;&#x2F;rpm.nodesource.com&#x2F;setup_10.x | bash -</span><br><span class="line">yum install -y nodejs</span><br><span class="line"></span><br><span class="line">node -v # 验证</span><br></pre></td></tr></table></figure></p><h4 id="Git-1"><a href="#Git-1" class="headerlink" title="Git "></a>Git <br></h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br><span class="line"></span><br><span class="line">git --version # 验证</span><br></pre></td></tr></table></figure><h5 id="SSH配置-1"><a href="#SSH配置-1" class="headerlink" title="SSH配置"></a>SSH配置<br></h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;example&quot;</span><br><span class="line">git config --global user.email &quot;example@email.com&quot;</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;example@email.com&quot;</span><br></pre></td></tr></table></figure><p>　　复制公有密钥，在Github上添加新的SSH key，具体可参考上文本地配置。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~&#x2F;.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><br>　　从Github仓库中克隆代码。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;</span><br><span class="line">mkdir www</span><br><span class="line"> </span><br><span class="line">cd www</span><br><span class="line">mkdir blog</span><br><span class="line"></span><br><span class="line">cd blog</span><br><span class="line">git clone git@github.com:egname&#x2F;egrepo.git</span><br></pre></td></tr></table></figure></p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx "></a>Nginx <br></h4><p>　　安装EPEL存储库<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install epel-release</span><br></pre></td></tr></table></figure></p><p>　　安装Nginx<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nginx</span><br></pre></td></tr></table></figure><br>　　启动Nginx，设置自启动<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure></p><h5 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h5><p>　　进入etc/nginx文件夹下的nginx.conf<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><br>　　修改配置文件<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name www.example.com;</span><br><span class="line">  root &#x2F;www&#x2F;blog&#x2F;example;</span><br><span class="line">  include &#x2F;etc&#x2F;nginx&#x2F;default.d&#x2F;*.conf;</span><br><span class="line">  </span><br><span class="line">  location &#x2F; &#123;</span><br><span class="line">    root &#x2F;www&#x2F;blog&#x2F;example;</span><br><span class="line">    index index.jsp index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>　　重启Nginx<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure></p><h3 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a>安全组配置</h3><p>　　以阿里云ECS为例。<br>　　进入控制台——网络与安全——安全组，添加入方向规则。<br>　　添加端口范围分别为80/80（HTTP），443/443（HTTPS），7777/7777（Webhook），授权对象均为0.0.0.0/0。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>　　以腾讯云为例。<br>　　DNS 解析 DNSPod——域名解析列表——选择域名——添加记录——快速添加网站解析——指定服务器主机IP（公网）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架，且支持 Markdown 语法。&lt;/p&gt;
&lt;p&gt;• 本地环境配置：Node.js+Git+Hexo &lt;br&gt;&lt;br&gt;• ECS环境配置：(CentOs 8) Node.js+Git+Pm2+Nginx &lt;br&gt;&lt;br&gt;• 安全组配
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://meurice.xyz/2020/ckoilxhuo000254lx1ho4ff5t/"/>
    <id>http://meurice.xyz/2020/ckoilxhuo000254lx1ho4ff5t/</id>
    <published>2020-07-15T04:29:57.340Z</published>
    <updated>2020-07-15T04:29:57.340Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
