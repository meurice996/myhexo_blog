<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>meurice&#39;s Notes</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meurice.xyz/"/>
  <updated>2021-05-26T04:35:57.588Z</updated>
  <id>http://meurice.xyz/</id>
  
  <author>
    <name>meurice</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大数据处理技术复习要点总结[Pandas]</title>
    <link href="http://meurice.xyz/2021/ckp3lze3a0000rglx549f6424/"/>
    <id>http://meurice.xyz/2021/ckp3lze3a0000rglx549f6424/</id>
    <published>2021-05-25T05:39:29.000Z</published>
    <updated>2021-05-26T04:35:57.588Z</updated>
    
    <content type="html"><![CDATA[<p>本文章就『Lending Club贷款数据转换与融合』、『行星数据分组与聚合』以及『德国能源数据时间序列分析』等案例对Pandas中的部分分析方法以及机器学习中部分算法进行总结。<br><a id="more"></a></p><h2 id="Lending-Club贷款数据转换与融合"><a href="#Lending-Club贷款数据转换与融合" class="headerlink" title="Lending Club贷款数据转换与融合"></a>Lending Club贷款数据转换与融合</h2><p> 　　该案例完整Jupyter Notebook可参考<a href="http://cookdata.cn/note/view_static_note/5acc2adb881ca8e68cfbb1cd1347d28d/" target="_blank" rel="noopener">Lending Club贷款数据转换与融合</a>。</p><h3 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">user</span> = pd.read_csv(<span class="hljs-string">"./input/user.csv"</span>)<br><span class="hljs-attr">loan</span> = pd.read_csv(<span class="hljs-string">"./input/loan.csv"</span>)<br><span class="hljs-attr">history</span> = pd.read_csv(<span class="hljs-string">"./input/history.csv"</span>)<br></code></pre></td></tr></table></figure><h3 id="随机采样-sample"><a href="#随机采样-sample" class="headerlink" title="随机采样(sample)"></a>随机采样(sample)</h3><p>　　随机查看贷款交易数据中的5行。 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">loan.sample(<span class="hljs-attribute">n</span>=5)<br></code></pre></td></tr></table></figure><p>　　随机查看贷款交易数据中的1%。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">loan.sample(<span class="hljs-attribute">frac</span>=0.01)<br></code></pre></td></tr></table></figure><br>　　sample默认的是不放回采样（每个样本只可能出现一次），可以调整replace参数为True改为有放回采样。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">loan.sample(<span class="hljs-built_in">n</span>=<span class="hljs-number">10</span>,<span class="hljs-built_in">replace</span>=<span class="hljs-built_in">True</span>)<br></code></pre></td></tr></table></figure><br>　　若希望重复调用某次采样的结果，可以设定random_state参数为同一个数来实现。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">loan.sample(n=<span class="hljs-number">5</span>,random_state=<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><br>　　除了行采样，sample也可以实现列采样，只需要调整axis参数为1即可。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">loan.sample(n=<span class="hljs-number">3</span>,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p><h3 id="数据融合-merge-join"><a href="#数据融合-merge-join" class="headerlink" title="数据融合(merge,join)"></a>数据融合(merge,join)</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">test_user = user.loc[[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]]<br>test_loan = loan[loan.user.isin([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>])]<br></code></pre></td></tr></table></figure><p>　　merge和join作为Pandas中常用的数据融合方法，目的都是将两个数据表通过共同变量进行连接。  </p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>　　merge参数如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">left.merge(right, <span class="hljs-attribute">how</span>=<span class="hljs-string">'inner'</span>, <span class="hljs-attribute">on</span>=None, <br><span class="hljs-attribute">left_on</span>=None, <span class="hljs-attribute">right_on</span>=None, <br><span class="hljs-attribute">left_index</span>=<span class="hljs-literal">False</span>, <span class="hljs-attribute">right_index</span>=<span class="hljs-literal">False</span>, <br><span class="hljs-attribute">sort</span>=<span class="hljs-literal">False</span>, suffixes=(<span class="hljs-string">'_x'</span>, <span class="hljs-string">'_y'</span>), <span class="hljs-attribute">indicator</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><br>　　left和right分别指代要进行连接的两个数据框。<br>　　on, left_on, right_on, 用来指定连接的变量。若这一变量在两个数据框中命名相同，直接使用on指定即可，否则通过left_on和right_on分别指定左表变量名和右表变量名。<br>　　若需要基于数据框的索引进行连接，则要通过设定left_index和right_index的参数为True来实现。<br>　　how为连接方式，有’inner’, ‘left’, ‘right’, ‘outer’四种。  </p><p>　　基于用户信息数据的’user_id’变量和贷款交易数据的’user’变量进行内连接(inner)。这种方式下，只有所选定列在左表与右表能匹配的行会被保留。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test_user.merge(test_loan,<span class="hljs-attribute">how</span>=<span class="hljs-string">"inner"</span>,<br><span class="hljs-attribute">left_on</span>=<span class="hljs-string">"user_id"</span>,right_on="user")<br></code></pre></td></tr></table></figure><br>　　基于用户信息数据的’user_id’变量和贷款交易数据的’user’变量进行左连接(left)。这种方式下，左表所有行都被保留，不能匹配的部分用缺失值填充。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test_user.merge(test_loan,<span class="hljs-attribute">how</span>=<span class="hljs-string">"left"</span>,<br><span class="hljs-attribute">left_on</span>=<span class="hljs-string">"user_id"</span>,right_on="user")<br></code></pre></td></tr></table></figure><br>　　基于用户信息数据的’user_id’变量和贷款交易数据的’user’变量进行右连接(right)。这种方式下，右表所有行都被保留，不能匹配的部分用缺失值填充。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test_user.merge(test_loan,<span class="hljs-attribute">how</span>=<span class="hljs-string">"right"</span>,<br><span class="hljs-attribute">left_on</span>=<span class="hljs-string">"user_id"</span>,right_on="user")<br></code></pre></td></tr></table></figure><br>　　基于用户信息数据的’user_id’变量和贷款交易数据的’user’变量进行外连接(outer)。这种方式下，左表和右表所有行都会被保留，不能匹配的部分用缺失值填充。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test_user.merge(test_loan,<span class="hljs-attribute">how</span>=<span class="hljs-string">"outer"</span>,<br><span class="hljs-attribute">left_on</span>=<span class="hljs-string">"user_id"</span>,right_on="user")<br></code></pre></td></tr></table></figure><br>　　merge中的indicator参数能很好地找到返回结果的来源,设定indicator参数为Ture后，返回结果中多了一列”_merge”，取值有”both”, “left_only”, “right_only”三种。分别代表左右表匹配成功，左表有而右表没有，右表有而左表没有三种情况。  </p><script type="math/tex; mode=display">\begin{array}{c|c|c} & .. & \_merge \\\hline 0 & .. & both \\\hline 1 & .. & left\_only \\\hline 2 & .. & right\_only\end{array}</script><p>　　当左表与右表中变量同名时，我们可以通过suffixes参数为左表变量与右表变量附加不同字段，便于后续区分。  </p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c|c|c} & user & term\_l & grade\_l & .. & term\_r & grade\_r & .. \\\hline0 & 6 & 60 months & .. & .. & 60 months & .. & .. \\\hline.. & .. & .. & .. & .. & .. & .. & ..\end{array}</script><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><p>　　join参数如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">left.join(right, <span class="hljs-attribute">on</span>=None, <span class="hljs-attribute">how</span>=<span class="hljs-string">'left'</span>,<br><span class="hljs-attribute">lsuffix</span>=<span class="hljs-string">''</span>, <span class="hljs-attribute">rsuffix</span>=<span class="hljs-string">''</span>, <span class="hljs-attribute">sort</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><br>　　事实上，join就是merge的简化版本，所有join能实现的操作，都可以使用merge实现。  </p><ul><li>使用join时，右表只能基于索引进行连接；  </li><li>通过on参数，可以指定左表进行连接的变量（可以是索引也可以是任意列）。   </li></ul><p>　　merge和join中还有一个参数sort，指定为True会让返回的结果按连接变量进行升序排列。  </p><h3 id="排序-sort-index-sort-values"><a href="#排序-sort-index-sort-values" class="headerlink" title="排序(sort_index,sort_values)"></a>排序(sort_index,sort_values)</h3><p>　　Pandas中的sort_index和sort_values也可以对DataFrame进行排序，sort_index是按照索引进行排序，sort_values是按照指定变量排序。<br>　　例如想将用户历史数据按账户平均存款排序。<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">history.sort<span class="hljs-constructor">_values(<span class="hljs-params">by</span>='<span class="hljs-params">avg_cur_bal</span>')</span><br></code></pre></td></tr></table></figure><br>　　若要降序排列，可以指定ascending参数为False。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">history.sort_values(<span class="hljs-attribute">by</span>=<span class="hljs-string">'avg_cur_bal'</span>,<br><span class="hljs-attribute">ascending</span>=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><br>　　也可以指定对缺失值的排序方式，默认缺失值将排在最后，可以设定na_position为first将缺失值排在最前面。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">history.sort_values(<span class="hljs-attribute">by</span>=<span class="hljs-string">'avg_cur_bal'</span>,<br><span class="hljs-attribute">na_position</span>=<span class="hljs-string">'first'</span>)<br></code></pre></td></tr></table></figure></p><h3 id="离散化-cut-qcut"><a href="#离散化-cut-qcut" class="headerlink" title="离散化(cut,qcut)"></a>离散化(cut,qcut)</h3><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><p>　　使用cut函数按照指定的分割点对数据进行划分。<br>　　通过设定bin参数设定了分割点，将数据按照中位数进行了划分。同时设定了参数labels，使用这个参数可以方便地为新的划分区间命名。<br>　　<strong>左开右闭区间</strong>  </p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">annual_inc = pd.cut(<span class="hljs-built_in">combine</span>.annual_inc,<br>bins=[<span class="hljs-built_in">np</span>.<span class="hljs-built_in">min</span>(<span class="hljs-built_in">combine</span>.annual_inc)-<span class="hljs-number">1</span>,<br>                    <span class="hljs-built_in">np</span>.percentile(<span class="hljs-built_in">combine</span>.annual_inc,<span class="hljs-number">50</span>),<br>                    <span class="hljs-built_in">np</span>.<span class="hljs-built_in">max</span>(<span class="hljs-built_in">combine</span>.annual_inc)+<span class="hljs-number">1</span>],<br><span class="hljs-built_in">labels</span>=['low','high'])<br></code></pre></td></tr></table></figure><p>　　cut也可以直接指定划分份数，将数据等距划分。<br>　　例如，将数据等距分为五份：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">pd</span><span class="hljs-selector-class">.cut</span>(<span class="hljs-selector-tag">combine</span><span class="hljs-selector-class">.annual_inc</span>,5)<br></code></pre></td></tr></table></figure><br>　　理论上，数据应被等距分为了五份，每一个区间的长度都相同，但我们计算可以发现，第一个区间的长度为113364，而其他几个区间的长度都为112800。这并不是cut分割错误，只是为了包含最小值或最大值，<strong>cut的左右端会拓展0.1%</strong>。</p><h4 id="qcut"><a href="#qcut" class="headerlink" title="qcut"></a>qcut</h4><p>　　Pandas中与cut相似的另一个函数是qcut，它将按照每个区间中频数相同的原则进行划分,当我们指定划分份数后，就会用相应的分位数进行划分。例如，当我们使用qcut将数据分为两份时，分割点就是中位数，四份时分割点就是四分位数。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">pd</span><span class="hljs-selector-class">.qcut</span>(<span class="hljs-selector-tag">combine</span><span class="hljs-selector-class">.annual_inc</span>,2)<br></code></pre></td></tr></table></figure></p><h3 id="值替换-replace-map"><a href="#值替换-replace-map" class="headerlink" title="值替换(replace,map)"></a>值替换(replace,map)</h3><p>　　认为状态为”Charged Off”,”In Grace Period”, “Late (31-120 days)”的贷款有违约风险，视为不良贷款，将其值标记为1，其他贷款标记为0。<br>　　使用replace进行值替换。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">combine</span>[<span class="hljs-string">'loan_status'</span>].<span class="hljs-built_in">replace</span>(<br>to_replace=[<span class="hljs-string">'Fully Paid'</span>,<span class="hljs-string">'Current'</span>,<span class="hljs-string">'Charged Off'</span>,<span class="hljs-string">'In Grace Period'</span>,<span class="hljs-string">'Late (31-120 days)'</span>],<br>    <span class="hljs-built_in">value</span>=[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>    inplace=True)<br></code></pre></td></tr></table></figure><br>　　除了将需要替换的值与替换的新值分别用列表输入外，也可以使用字典进行指定。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">test_loan.replace(to_replace=&#123;<span class="hljs-string">'loan_status'</span>:&#123;<span class="hljs-string">'Fully Paid'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'Charged Off'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'In Grace Period'</span>:<span class="hljs-number">1</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><br>　　也可以同时指定不同变量的不同值替换为相同新值。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">test_loan.replace(to_replace=&#123;<span class="hljs-string">'loan_status'</span>:<span class="hljs-string">'Fully Paid'</span>,<span class="hljs-string">'grade'</span>:<span class="hljs-string">'A'</span>&#125;,<span class="hljs-keyword">value</span>=<span class="hljs-string">'Good'</span>)<br></code></pre></td></tr></table></figure><br>　　也可以指定正则表达式进行替换，这时需要设定参数regex为True，代表to_replace部分输入的是正则表达式。如查找所有以C开头的字段并替换为Bad。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">test_loan.replace(<span class="hljs-attribute">to_replace</span>=<span class="hljs-string">'C+.*$'</span>, <span class="hljs-attribute">value</span>=<span class="hljs-string">'Bad'</span>, <span class="hljs-attribute">regex</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>　　在Pandas中，如果只是针对某一个Series进行数值替代，我们也可以使用map方法。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">test_loan[<span class="hljs-string">'loan_status'</span>].<span class="hljs-keyword">map</span>(&#123;<span class="hljs-string">'Fully Paid'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'Charged Off'</span>:<span class="hljs-number">0</span>,<span class="hljs-string">'In Grace Period'</span>:<span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><br>　　这同样实现了将贷款状态进行替换的效果，但map不能像replace一样直接对DataFrame进行操作。不过map不仅仅可以像上面一样输入字典作为参数，也可以直接输入一个函数进行映射。<br>　　例如，将数据中利率低于12%的映射为’Low’，高于12%的映射为’High’。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">12</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'Low'</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'High'</span><br>        <br>combine[<span class="hljs-string">'int_rate'</span>].map(f)<br></code></pre></td></tr></table></figure></p><h3 id="哑变量处理-get-dummies"><a href="#哑变量处理-get-dummies" class="headerlink" title="哑变量处理(get_dummies)"></a>哑变量处理(get_dummies)</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cat_vars=[<span class="hljs-string">'term'</span>,<span class="hljs-string">'grade'</span>,<span class="hljs-string">'emp_length'</span>,<span class="hljs-string">'annual_inc'</span>,<span class="hljs-string">'home_ownership'</span>,<span class="hljs-string">'verification_status'</span>]<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> cat_vars:<br>    cat_list = pd.get_dummies(combine[var], <span class="hljs-attribute">prefix</span>=var, <span class="hljs-attribute">drop_first</span>=<span class="hljs-literal">True</span>)<br>    <span class="hljs-attribute">combine</span>=combine.join(cat_list)<br></code></pre></td></tr></table></figure><p>　　get_dummies函数中使用了两个参数。prefix可以为新生成的哑变量添加前缀，这方便我们识别新生成的变量是从原来哪一个变量中得来的。drop_first设置为True将删去所获得哑变量的第一个，这是因为在建模中，有k类的分类变量只需要k-1个变量就可以将其描述，如果使用k个变量则会出现完全共线性的问题。<br>　　此外，在这里选择了使用join而不是merge，这是因为get_dummies返回的结果与原始数据有相同的索引，使用join直接基于索引进行连接更简洁。<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">pd.get<span class="hljs-constructor">_dummies(<span class="hljs-params">combine</span>['<span class="hljs-params">grade</span>'], <span class="hljs-params">prefix</span>='<span class="hljs-params">grade</span>',<span class="hljs-params">drop_first</span>=True)</span><span class="hljs-literal">[:<span class="hljs-number">5</span>]</span><br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c}&grade_B&    grade_C&    grade_D&    grade_E&    grade_F&    grade_G\\\hline0&    0&    0&    1&    0&    0&    0& \\\hline1&    0&    1&    0&    0&    0&    0& \\\hline2&    1&    0&    0&    0&    0&    0& \\ \hline3&    0&    0&    0&    0&    0&    0&\\\hline4&    0&    1&    0&    0&    0&    0& \end{array}</script><p>　　如果使用merge：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">combine</span>=combine.merge(cat_list,left_index=<span class="hljs-literal">True</span>,right_index=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><h3 id="添加常数项列-concat"><a href="#添加常数项列-concat" class="headerlink" title="添加常数项列(concat)"></a>添加常数项列(concat)</h3><p>　　在回归分析中，我们往往还需要为自变量添加常数项列，值全为1。<br>　　首先创建一个长度为X的行数，值全为1的列表。再将其转化为Series，并命名”const”。<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const = pd.<span class="hljs-constructor">Series([1] <span class="hljs-operator">*</span> <span class="hljs-params">combine</span>.<span class="hljs-params">shape</span>[0],<span class="hljs-params">name</span>=<span class="hljs-string">"const"</span>)</span><br></code></pre></td></tr></table></figure><br>　　重设X索引，使用concat对数据进行合并，并指定方向为列。<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">X</span>.<span class="hljs-meta">reset</span><span class="hljs-meta">_index(</span><span class="hljs-meta">drop</span>=True,inplace=True)<br><span class="hljs-meta">X</span> = pd.concat([const,<span class="hljs-meta">X</span>],axis=1)<br></code></pre></td></tr></table></figure><br>　　这里之所以要先重新设置X的索引，是因为concat是基于索引进行拼接的。这么看来，对于列的拼接其实直接使用join就可以了，不过目前join只能作为DataFrame的方法，想拼接DataFrame和Series就必须把DataFrame写在前面：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs">X.<span class="hljs-keyword">join</span>(<span class="hljs-keyword">const</span>)<br></code></pre></td></tr></table></figure><br>　　此外，concat更常用的是进行行的连接。concat参数如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pandas.concat(objs, <span class="hljs-attribute">axis</span>=0, <span class="hljs-attribute">join</span>=<span class="hljs-string">'outer'</span>)<br></code></pre></td></tr></table></figure><br>　　objs: Series,DataFrame等构成的list<br>　　axis: 合并连接的方向，0是行，1是列<br>　　join：连接方式，”inner”或者”outer”  </p><p>　　可以看到，concat的对象必须是一个list。  </p><p>　　创建两个dataframe:df1,df2。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">df1 = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span>], [<span class="hljs-string">'b'</span>,<span class="hljs-string">'b'</span>, <span class="hljs-number">2</span>]],columns=[<span class="hljs-string">'letter'</span>,<span class="hljs-string">'letter1'</span>,<span class="hljs-string">'number'</span>])<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c} & letter & letter1    & number\\\hline0    & a    & a    & 1\\\hline1    & b    & b    & 2\end{array}</script><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">df2 = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-string">'c'</span>,<span class="hljs-string">'c'</span>, <span class="hljs-number">3</span>], [<span class="hljs-string">'d'</span>,<span class="hljs-string">'d'</span>, <span class="hljs-number">4</span>]],columns=[<span class="hljs-string">'letter'</span>,<span class="hljs-string">'letter2'</span>,<span class="hljs-string">'number'</span>])<br></code></pre></td></tr></table></figure><script type="math/tex; mode=display">\begin{array}{c|c|c|c}& letter & letter1    & number\\\hline0    & c    & c    & 3\\\hline1    & d    & d    & 4\end{array}</script><p>　　使用inner方式进行连接，只有能够匹配的变量才会保留。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pd.concat([df1,df2],axis=<span class="hljs-number">0</span>,join=<span class="hljs-string">'inner'</span>)<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c} & letter & number \\\hline0 &    a &    1 \\\hline1 &    b &    2 \\\hline0 &    c &    3 \\\hline1 &    d &    4\end{array}</script><p>　　使用outer方式进行连接，所有变量都会保留，不能匹配的部分用缺失值填充。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pd.concat([df1,df2],axis=<span class="hljs-number">0</span>,join=<span class="hljs-string">'outer'</span>)<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c} & letter &    letter1 & letter2 &    number \\\hline0 &    a&    a&    NaN&    1 \\ \hline1&    b&    b&    NaN&    2 \\ \hline0&    c&    NaN&    c&    3 \\\hline1&    d&    NaN&d    4&\end{array}</script><p>　　ignore_index参数为Ture将忽略原来的索引，从0开始重建索引。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pd.concat([df1,df2],<span class="hljs-attribute">ignore_index</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><br>　　通过key参数可以建立多层索引，方便识别数据来自于哪个数据源。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">pd.concat([df1,df2],keys=[<span class="hljs-string">'df1'</span>, <span class="hljs-string">'df2'</span>])<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c} & & letter & letter1 & letter2& number \\\hlinedf1 & 0 & a & a & NaN & 1 \\  & 1 & b & b & NaN & 2 \\\hlinedf2 & 0 & c & NaN & c & 3 \\  & 1 & d & NaN & d & 4 \\\end{array}</script><h2 id="行星数据分组与聚合"><a href="#行星数据分组与聚合" class="headerlink" title="行星数据分组与聚合"></a>行星数据分组与聚合</h2><p> 　　该案例完整Jupyter Notebook可参考<a href="http://cookdata.cn/note/view_static_note/7b30c741facfb06d83bc37ae3a7fa8a3/" target="_blank" rel="noopener">行星数据分组与聚合</a>。</p><h3 id="数据源-1"><a href="#数据源-1" class="headerlink" title="数据源"></a>数据源</h3><p>　　行星数据集记录了2014年之前发现的行星的信息。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">planets</span> = pd.read_csv(<span class="hljs-string">"./input/planets.csv"</span>)<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c|c} & method&number&orbital\_period&mass&distance&year \\\hline0&    Radial Velocity    &1&    269.300    &7.10    &77.40    &2006 \\\hline1&    Radial Velocity    &1&    874.774    &2.21    &56.95    &2008 \\\hline2&    Radial Velocity    &1&    763.000    &2.60    &19.84    &2011 \\\hline3&    Radial Velocity    &1&    326.030    &19.40    &110.62    &2007 \\\hline4&    Radial Velocity    &1&    516.220    &10.50    &119.47    &2009\end{array}</script><h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h3><h4 id="通过特征分组"><a href="#通过特征分组" class="headerlink" title="通过特征分组"></a>通过特征分组</h4><p>　　groupby可以指定某一个特征或指定某一组特征进行分组。<br>　　例如按method特征对数据进行分组。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">grouped</span> = planets.groupby(<span class="hljs-string">'method'</span>)<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;pandas<span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.groupby</span><span class="hljs-selector-class">.generic</span><span class="hljs-selector-class">.DataFrameGroupBy</span> <span class="hljs-selector-tag">object</span> at <span class="hljs-number">0</span>x7f1d00504a58&gt;<br></code></pre></td></tr></table></figure><br>　　groupby还能通过指定一个与目标数据等长的array、list或Series进行分组。<br>　　例如，行星数据集共有1035条记录，生成一个长度为1035，前500都为0，后535都为1的array。<br>　　使用repeat，输入中第一部分指定了值，第二部分指定对应值的重复次数。我们将生成结果记为a。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">a = np.repeat([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], [<span class="hljs-number">500</span>, <span class="hljs-number">535</span>])<br></code></pre></td></tr></table></figure><br>　　以其对原数据进行分组，并计算各特征的均值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">planets</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-selector-tag">a</span>)<span class="hljs-selector-class">.mean</span>()<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c} &number&orbital\_period&mass&distance&year\\\hline0&    1.644000&    1450.908401&    2.580901&    97.615625&    2007.916000& \\\hline1&    1.917757&    2526.729858&    2.800112&    507.660000&    2010.149533&\end{array}</script><h4 id="通过函数分组"><a href="#通过函数分组" class="headerlink" title="通过函数分组"></a>通过函数分组</h4><p>　　也可以通过函数进行分组。<br>　　例如，想将数据按发现年份在2000年前和2000年后进行分组。使用set_index设定year变量为数据的新索引，然后定义一个函数test，当数据小于2000时返回’Before 2000’，大于等于2000时返回’After 2000’，最后通过自定义函数test进行分组，并求各组各变量均值。<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sas">new = planets.<span class="hljs-meta">set</span><span class="hljs-meta">_index(</span><span class="hljs-string">'year'</span>)<br><br>def test(<span class="hljs-meta">x</span>):<br>    <span class="hljs-meta">if</span> <span class="hljs-meta">x</span>&lt;2000:<br>        <span class="hljs-meta">return</span> <span class="hljs-string">'Before 2000'</span><br>    <span class="hljs-meta">else</span>:<br>        <span class="hljs-meta">return</span> <span class="hljs-string">'After 2000'</span><br>        <br>new.groupby(test)<span class="hljs-meta">.mean(</span>)<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c} &    number&    orbital\_period&    mass&    distance\\\hlineAfter 2000&    1.780658&    2058.025770&    2.615027&    272.918742&\\\hlineBefore 2000&    1.937500&    349.672379&    3.071469&    26.354483&\end{array}</script><p>　　函数的输入是数据的索引列。以上代码相当于这样两步操作：<br>　　1. 对目标数据索引的每一个元素执行相应函数；<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">group_index = <span class="hljs-keyword">new</span>.<span class="hljs-built_in">index</span>.<span class="hljs-keyword">map</span>(test)<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Index(['After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>',<br>       'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'Before <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>',<br>       ...<br>       'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>',<br>       'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>', 'After <span class="hljs-number">2000</span>'],<br>      dtype='object', name='year', length=<span class="hljs-number">1035</span>)<br></code></pre></td></tr></table></figure><br>　　2. 以这一个新变量group_index进行分组。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">new</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-selector-tag">group_index</span>)<span class="hljs-selector-class">.mean</span>()<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c} &    number&    orbital\_period&    mass&    distance\\\hlineyear & & & & \\\hlineAfter 2000&    1.780658&    2058.025770&    2.615027&    272.918742\\\hlineBefore 2000&    1.937500&    349.672379&    3.071469&    26.354483\end{array}</script><h3 id="GroupBy对象的基本操作"><a href="#GroupBy对象的基本操作" class="headerlink" title="GroupBy对象的基本操作"></a>GroupBy对象的基本操作</h3><h4 id="对分组进行迭代"><a href="#对分组进行迭代" class="headerlink" title="对分组进行迭代"></a>对分组进行迭代</h4><p>　　groupby返回的结果是一个GroupBy类型的对象，可以使用循环查看其内部结构：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pd.set_option(<span class="hljs-string">'expand_frame_repr'</span>,<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">for</span> (name,group) <span class="hljs-keyword">in</span> grouped:<br>    <span class="hljs-builtin-name">print</span>(name)<br>    <span class="hljs-builtin-name">print</span>(group.head(<span class="hljs-attribute">n</span>=2),'\n')<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso">(<span class="hljs-string">'Astrometry'</span>, <span class="hljs-number">2010</span>)<br>(<span class="hljs-string">'Astrometry'</span>, <span class="hljs-number">2013</span>)<br>(<span class="hljs-string">'Eclipse Timing Variations'</span>, <span class="hljs-number">2008</span>)<br>(<span class="hljs-string">'Eclipse Timing Variations'</span>, <span class="hljs-number">2009</span>)<br>(<span class="hljs-string">'Eclipse Timing Variations'</span>, <span class="hljs-number">2010</span>)<br>(<span class="hljs-string">'Eclipse Timing Variations'</span>, <span class="hljs-number">2011</span>)<br>(<span class="hljs-string">'Eclipse Timing Variations'</span>, <span class="hljs-number">2012</span>)<br>(<span class="hljs-string">'Imaging'</span>, <span class="hljs-number">2004</span>)<br>(<span class="hljs-string">'Imaging'</span>, <span class="hljs-number">2005</span>)<br>(<span class="hljs-string">'Imaging'</span>, <span class="hljs-number">2006</span>)<br>(<span class="hljs-string">'Imaging'</span>, <span class="hljs-number">2007</span>)<br><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><br>　　GroupBy类型的对象是由各组组名与其对应的分组数据构成。这里只依据method一个特征进行了分组，若基于多个特征进行分组，则返回的GroupBy的组名会是一个多元元组。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">for</span> (name,group) <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">planets</span><span class="hljs-selector-class">.groupby</span>([<span class="hljs-string">'method'</span>,<span class="hljs-string">'year'</span>]):<br>    <span class="hljs-selector-tag">print</span>(name)<br></code></pre></td></tr></table></figure><br>　　GroupBy内部是由一个个DataFrame组成，可以在循环中对每组数据进行操作。<br>　　例如，对每组数据使用shape。为了使输出更美观，我们使用format指定了输出的字符串格式，第一个{0:30s}匹配format中第一个字符串method，并指定字符串长度为30；第二个{1}匹配format中第二个字符串group.shape。<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">method</span>, <span class="hljs-keyword">group</span>) <span class="hljs-keyword">in</span> planets.groupby(<span class="hljs-string">'method'</span>):<br>    print("&#123;0:30s&#125; shape=&#123;1&#125;".format(<span class="hljs-keyword">method</span>, <span class="hljs-keyword">group</span>.shape))<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Astrometry                     shape=(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>)<br>Eclipse Timing Variations      shape=(<span class="hljs-number">9</span>, <span class="hljs-number">6</span>)<br>Imaging                        shape=(<span class="hljs-number">38</span>, <span class="hljs-number">6</span>)<br>Microlensing                   shape=(<span class="hljs-number">23</span>, <span class="hljs-number">6</span>)<br>Orbital Brightness Modulation  shape=(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)<br>Pulsar Timing                  shape=(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br>Pulsation Timing Variations    shape=(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>)<br>Radial Velocity                shape=(<span class="hljs-number">553</span>, <span class="hljs-number">6</span>)<br>Transit                        shape=(<span class="hljs-number">397</span>, <span class="hljs-number">6</span>)<br>Transit Timing Variations      shape=(<span class="hljs-number">4</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><br>　　也有一些可以直接对GroupBy使用的方法，例如size方法可以查看每个分组的数据量。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">grouped.<span class="hljs-built_in">size</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">method<br>Astrometry                         <span class="hljs-number">2</span><br>Eclipse Timing Variations          <span class="hljs-number">9</span><br>Imaging                           <span class="hljs-number">38</span><br>Microlensing                      <span class="hljs-number">23</span><br>Orbital Brightness Modulation      <span class="hljs-number">3</span><br>Pulsar Timing                      <span class="hljs-number">5</span><br>Pulsation Timing Variations        <span class="hljs-number">1</span><br>Radial Velocity                  <span class="hljs-number">553</span><br>Transit                          <span class="hljs-number">397</span><br>Transit Timing Variations          <span class="hljs-number">4</span><br>dtype: <span class="hljs-built_in">int</span>64<br></code></pre></td></tr></table></figure></p><h4 id="选择指定特征分析"><a href="#选择指定特征分析" class="headerlink" title="选择指定特征分析"></a>选择指定特征分析</h4><p>　　针对GroupBy类型的对象，我们可以直接选取出需要的列。例如，取出year特征。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">grouped</span><span class="hljs-selector-attr">[<span class="hljs-string">'year'</span>]</span><br></code></pre></td></tr></table></figure><br>　　这仍然是一个GroupBy类型的对象，但和之前的结果相比，这是一个SeriesGroupBy，而之前的是一个DataFrameGroupBy。<br>　　对于这种类型，可以直接使用一些聚合函数（如sum、mean、max、min…）。例如，查看不同方法发现的行星与地球距离的中位数：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">planets</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-string">'method'</span>)<span class="hljs-selector-attr">['distance']</span><span class="hljs-selector-class">.median</span>()<br></code></pre></td></tr></table></figure><br>　　也可以直接使用describe。例如查看不同方法发现行星的时间情况。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">grouped</span><span class="hljs-selector-attr">[<span class="hljs-string">'year'</span>]</span><span class="hljs-selector-class">.describe</span>()<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c} & count & mean & std & min & 25\% & 50\% & 75\% & max \\\hlinemethod\\\hlineAstrometry    &2.0&2011.500000&2.121320&2010.0&2010.75&2011.5&2012.25&2013.0\\\hline...\end{array}</script><h4 id="结合分组方法与聚合函数分析"><a href="#结合分组方法与聚合函数分析" class="headerlink" title="结合分组方法与聚合函数分析"></a>结合分组方法与聚合函数分析</h4><p>　　首先将年份按每10年进行划分。通过//将年份整除10（向下取整），再乘以10，可以将年份变换为对应年代。再使用astype将类型转换为字符串并加上’s’代表对应年代。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">decade</span> = <span class="hljs-number">10</span> * (planets[<span class="hljs-string">'year'</span>] // <span class="hljs-number">10</span>)<br><span class="hljs-attr">decade</span> = decade.astype(str) + <span class="hljs-string">'s'</span><br></code></pre></td></tr></table></figure><br>　　按发现行星的方法和发现的年代进行分组，并统计相应分组下发现的行星的总数。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">planets</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-selector-attr">[<span class="hljs-string">'method'</span>, decade]</span>)<span class="hljs-selector-attr">[<span class="hljs-string">'number'</span>]</span><span class="hljs-selector-class">.sum</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">methodyear <br>Astrometry<span class="hljs-number">2010</span>s      <span class="hljs-number">2</span><br>Eclipse Timing Variations<span class="hljs-number">2000</span>s      <span class="hljs-number">5</span><br><span class="hljs-number">2010</span>s     <span class="hljs-number">10</span><br>Imaging<span class="hljs-number">2000</span>s     <span class="hljs-number">29</span><br> <span class="hljs-number">2010</span>s     <span class="hljs-number">21</span><br>...<br></code></pre></td></tr></table></figure><br>　　使用unstack将按层次化索引拆开为新的列索引。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">planets</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-selector-attr">[<span class="hljs-string">'method'</span>, decade]</span>)<span class="hljs-selector-attr">[<span class="hljs-string">'number'</span>]</span><span class="hljs-selector-class">.sum</span>()<span class="hljs-selector-class">.unstack</span>()<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c}year&1980s&1990s&2000s&2010s \\\hlinemethod \\\hlineAstrometry&NaN&NaN&NaN&2.0 \\\hlineEclipse Timing Variations&NaN&NaN&5.0&10.0\\\hline...\end{array}</script><h3 id="GroupBy-apply"><a href="#GroupBy-apply" class="headerlink" title="GroupBy.apply"></a>GroupBy.apply</h3><p>　　apply方法能够分别对每一份分组数据进行对应的函数操作，再合并成一个数据表。因此，apply中使用的函数必须是以DataFrame作为输入的，而且每一个apply语句只能传入一个函数。<br>　　例如：使用apply计算不同方法发现的行星在各特征上的极差(最大值与最小值之差)。<br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">grouped.apply(lambda <span class="hljs-symbol">x</span>: <span class="hljs-symbol">x</span>.<span class="hljs-built_in">max</span>() - <span class="hljs-symbol">x</span>.<span class="hljs-built_in">min</span>())<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c} &number&orbital\_period&mass&distance&year\\\hlinemethod \\\hlineAstrometry&    0.0&769.640000&NaN&5.79    &3.0 \\\hlineEclipse Timing Variations&1.0&8303.750000&1.8500&369.28    &4.0 \\\hline...\end{array}</script><p>　　此例中，每一组数据返回了一个Series。apply应用的函数也可以只返回一个标量，例如计算每种方法发现的行星中和地球距离的最大值与轨道周期的最大值之比。<br><strong><em>Output:</em></strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-function"><span class="hljs-keyword">method</span></span><br><span class="hljs-function"><span class="hljs-title">Astrometry</span>                         0.020443</span><br><span class="hljs-function"><span class="hljs-title">Eclipse</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>          0.048924</span><br><span class="hljs-function"><span class="hljs-title">Imaging</span>                            0.000226</span><br><span class="hljs-function"><span class="hljs-title">Microlensing</span>                       1.513725</span><br><span class="hljs-function"><span class="hljs-title">Orbital</span> <span class="hljs-title">Brightness</span> <span class="hljs-title">Modulation</span>    763.789269</span><br><span class="hljs-function"><span class="hljs-title">Pulsar</span> <span class="hljs-title">Timing</span>                      0.032854</span><br><span class="hljs-function"><span class="hljs-title">Pulsation</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>             <span class="hljs-title">NaN</span></span><br><span class="hljs-function"><span class="hljs-title">Radial</span> <span class="hljs-title">Velocity</span>                    0.020418</span><br><span class="hljs-function"><span class="hljs-title">Transit</span>                           25.633248</span><br><span class="hljs-function"><span class="hljs-title">Transit</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>         13.243750</span><br><span class="hljs-function"><span class="hljs-title">dtype</span>:</span> float64<br></code></pre></td></tr></table></figure><br>　　apply应用的函数也可以返回一个DataFrame。例如分组中心化数据。<br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">grouped.apply(lambda <span class="hljs-symbol">x</span>: <span class="hljs-symbol">x</span>-<span class="hljs-symbol">x</span>.<span class="hljs-built_in">mean</span>())<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c|c}    &distance&    mass&    method&    number&    orbital\_period&    year\\\hline0&    25.799792&    4.469301&    NaN&    -0.721519&    -554.05468&    -1.518987\\\hline1&    5.349792&    -0.420699&    NaN&    -0.721519&    51.41932&    0.481013\\\hline...\end{array}</script><p>　　当apply中运用的函数除了输入的DataFrame外还有其他参数时，直接在apply中进行赋值即可。例如查看按method分组后各组数据的前两行。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">(x,n)</span></span><span class="hljs-symbol">:</span><br>    <span class="hljs-keyword">return</span>(x.head(n))<br>grouped.apply(func1,n=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><br>　　apply的运行实际过程有分开运算、结果合并两步，因此，在数据量较大时，apply的运行速度会比可以实现同样操作的其他方法要慢。<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">%timeit grouped.<span class="hljs-built_in">apply</span>(<span class="hljs-built_in">np</span>.<span class="hljs-built_in">mean</span>)<br></code></pre></td></tr></table></figure><br><em>16.1 ms ± 50.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</em><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">timeit</span></span> grouped.mean()<br></code></pre></td></tr></table></figure><br><em>624 µs ± 337 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)</em>  </p><p>　　总结来看，apply方法只需要传入的函数的输入为DataFrame即可，函数的输出可以是标量、Series或DataFrame。但必须以DataFrame为输入就会导致当我们想对不同特征分别进行操作时比较麻烦。例如，分别计算各种方法发现的行星的距离的均值和发现的数量之和。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span><span class="hljs-params">(df)</span></span><span class="hljs-symbol">:</span><br>    mean_distance = np.mean(df[<span class="hljs-string">'distance'</span>])<br>    sum_number = np.sum(df[<span class="hljs-string">'number'</span>])<br>    <span class="hljs-keyword">return</span>(pd.Series(&#123;<span class="hljs-string">'mean_distance'</span><span class="hljs-symbol">:mean_distance</span>,<span class="hljs-string">'sum_number'</span><span class="hljs-symbol">:sum_number</span>&#125;))<br><br>grouped.apply(func2)<br></code></pre></td></tr></table></figure></p><h3 id="GroupBy-agg"><a href="#GroupBy-agg" class="headerlink" title="GroupBy.agg"></a>GroupBy.agg</h3><p>　　同样，分别计算各种方法发现的行星的距离的均值和发现的数量之和。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">grouped.agg(&#123;'distance':'mean','number':'sum'&#125;)<br></code></pre></td></tr></table></figure><br>　　这里使用“变量名:函数名”的形式向agg传入一个字典。agg方法可以针对某个特征同时执行多个函数。<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">grouped.agg(&#123;<span class="hljs-string">'distance'</span>:[<span class="hljs-string">'min'</span>,<span class="hljs-string">'max'</span>,<span class="hljs-string">'mean'</span>,<span class="hljs-string">'median'</span>],<span class="hljs-string">'number'</span>:<span class="hljs-string">'sum'</span>&#125;)<br></code></pre></td></tr></table></figure><br>　　agg方法中同样可以使用自定义函数，例如求极差：<br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">grouped.agg(lambda <span class="hljs-symbol">x</span>: <span class="hljs-symbol">x</span>.<span class="hljs-built_in">max</span>()-<span class="hljs-symbol">x</span>.<span class="hljs-built_in">min</span>())<br></code></pre></td></tr></table></figure><br>　　需要注意，尽管这里使用agg和apply获得了相同的结果，但是，在apply中是对每一组数据整个DataFrame进行一次运算，而在agg中将对每一组数据中的每一个特征进行运算。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span><span class="hljs-params">(x)</span></span><span class="hljs-symbol">:</span><br>    <span class="hljs-keyword">return</span>(x.shape)<br></code></pre></td></tr></table></figure><br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">grouped.<span class="hljs-built_in">apply</span>(test2)<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-function"><span class="hljs-keyword">method</span></span><br><span class="hljs-function"><span class="hljs-title">Astrometry</span>                         <span class="hljs-params">(2, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Eclipse</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>          <span class="hljs-params">(9, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Imaging</span>                           <span class="hljs-params">(38, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Microlensing</span>                      <span class="hljs-params">(23, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Orbital</span> <span class="hljs-title">Brightness</span> <span class="hljs-title">Modulation</span>      <span class="hljs-params">(3, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Pulsar</span> <span class="hljs-title">Timing</span>                      <span class="hljs-params">(5, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Pulsation</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>        <span class="hljs-params">(1, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Radial</span> <span class="hljs-title">Velocity</span>                  <span class="hljs-params">(553, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Transit</span>                          <span class="hljs-params">(397, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">Transit</span> <span class="hljs-title">Timing</span> <span class="hljs-title">Variations</span>          <span class="hljs-params">(4, 6)</span></span><br><span class="hljs-function"><span class="hljs-title">dtype</span>:</span> object<br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">grouped</span><span class="hljs-selector-class">.agg</span>(<span class="hljs-selector-tag">test2</span>)<br></code></pre></td></tr></table></figure></p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c|c}    & number&    orbital\_period    & mass & distance &    year \\\hlinemethod \\\hlineAstrometry&    (2,)&    (2,)&    (2,)&    (2,)&    (2,)\\\hlineEclipse Timing Variations&    (9,)&    (9,)&    (9,)&    (9,)&    (9,)\\\hline...\end{array}</script><p>　　可以看到，apply返回的是每一组数据的维度，而agg返回的是每组数据下，每一个特征对应的数据的维度。因此，我们可以将agg的操作分为3步：<br>　　1. 对每组数据中的每一列执行函数;<br>　　2. 将每一列返回结果合并;<br>　　3. 将每一组数据返回结果合并<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">%timeit</span> grouped.apply(lambda <span class="hljs-keyword">x</span>: <span class="hljs-keyword">x</span>.<span class="hljs-keyword">max</span>()-<span class="hljs-keyword">x</span>.<span class="hljs-keyword">min</span>())<br></code></pre></td></tr></table></figure><br><em>32.2 ms ± 28.9 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</em><br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">%timeit</span> grouped.agg(lambda <span class="hljs-keyword">x</span>:<span class="hljs-keyword">x</span>.<span class="hljs-keyword">max</span>()-<span class="hljs-keyword">x</span>.<span class="hljs-keyword">min</span>())<br></code></pre></td></tr></table></figure><br><em>19.6 ms ± 7.73 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)</em>  </p><p>　　因此，尽管相比于apply，agg可以从更细的维度进行数据处理，但也意味着更多的运算消耗。同时，agg方法对使用的函数的返回也有一定要求：对每一个特征，函数只能返回一个标量。例如，使用apply进行中心化的操作无法使用agg完成。<br><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gml">grouped.agg(lambda <span class="hljs-symbol">x</span>: <span class="hljs-symbol">x</span>-<span class="hljs-symbol">x</span>.<span class="hljs-built_in">mean</span>())<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">ValueError: Shape of passed values <span class="hljs-keyword">is</span> (<span class="hljs-number">6</span>, <span class="hljs-number">10</span>), indices imply (<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></p><h3 id="GroupBy-transform"><a href="#GroupBy-transform" class="headerlink" title="GroupBy.transform"></a>GroupBy.transform</h3><p>　　transform方法中传入的函数只能返回两种结果，可以广播的标量值或者与分组数据维度相同的数据。<br>　　对分组数据求均值，然后把这个均值赋值给整个组（可广播的标量值）。</p><script type="math/tex; mode=display">\begin{array}{c|c|c|c|c|c} & number&    orbital\_period&    mass&    distance&    year \\\hline0&    1.721519&    823.35468&    2.630699&    51.600208&    2007.518987\\\hline1&    1.721519&    823.35468&    2.630699&    51.600208&    2007.518987\\\hline...\end{array}</script><p> 　　使用<code>transform</code>实现分组数据标准化($\dfrac{x-\bar{x}}{s}$)(分组数据维度相同的数据):<br><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">grouped.transform(lambda <span class="hljs-meta">x</span>: (<span class="hljs-meta">x</span> - <span class="hljs-meta">x</span><span class="hljs-meta">.mean(</span>)) / <span class="hljs-meta">x</span><span class="hljs-meta">.std(</span>))<br></code></pre></td></tr></table></figure></p><p>　　apply中自定义函数对每个分组数据单独进行处理，再将结果合并；整个DataFrame的函数输出可以是标量、Series或DataFrame；每个apply语句只能传入一个函数；<br>　　agg可以通过字典方式指定特征进行不同的函数操作，每一特征的函数输出必须为标量；<br>　　transform不可以通过字典方式指定特征进行不同的函数操作，但函数运算单位也是DataFrame的每一特征，每一特征的函数输出可以是标量或者Series，但标量会被广播。  </p><h2 id="德国能源数据时间序列分析"><a href="#德国能源数据时间序列分析" class="headerlink" title="德国能源数据时间序列分析"></a>德国能源数据时间序列分析</h2><p> 　　该案例完整Jupyter Notebook可参考<a href="http://cookdata.cn/note/view_static_note/abdeedf821256e7ffacffe03f68e4cf2/" target="_blank" rel="noopener">德国能源数据时间序列分析</a>。</p><h3 id="数据源-2"><a href="#数据源-2" class="headerlink" title="数据源"></a>数据源</h3><p>　　数据的字段及其说明如下： </p><script type="math/tex; mode=display">\begin{array}{c|c}变量名称&含义说明 \\\hlineDate&日期 \\\hlineConsumption&电力消耗 \\\hlineWind&风能发电量 \\\hlineSolar&太阳能发电量\end{array}</script><p>　　使用dtypes查看数据类型。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-class">.dtypes</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nimrod"><span class="hljs-type">Date</span>           datetime64[ns]<br><span class="hljs-type">Consumption</span>           <span class="hljs-built_in">float64</span><br><span class="hljs-type">Wind</span>                  <span class="hljs-built_in">float64</span><br><span class="hljs-type">Solar</span>                 <span class="hljs-built_in">float64</span><br><span class="hljs-type">Wind</span>+<span class="hljs-type">Solar</span>            <span class="hljs-built_in">float64</span><br>dtype: <span class="hljs-keyword">object</span><br></code></pre></td></tr></table></figure><br>　　使用set_index将Date变量设定为索引。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">opsd.set_index(<span class="hljs-string">'Date'</span>,<span class="hljs-attribute">inplace</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><br>　　也可以在数据导入时通过参数设置实现这些操作。设定index_col为0即以数据中第一列为索引，设定parse_dates为True，会把索引识别为时间数据类型。<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">opsd = pd.read<span class="hljs-constructor">_csv('.<span class="hljs-operator">/</span><span class="hljs-params">input</span><span class="hljs-operator">/</span><span class="hljs-params">opsd_germany_daily</span>.<span class="hljs-params">csv</span>', <span class="hljs-params">index_col</span>=0, <span class="hljs-params">parse_dates</span>=True)</span><br></code></pre></td></tr></table></figure><br>　　查看此时索引格式。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">opsd.<span class="hljs-keyword">index</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lsl">DatetimeIndex(['<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>',<br>               ...<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-22</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-23</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-25</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>'],<br>              dtype='datetime64[ns]', name='Date', length=<span class="hljs-number">4383</span>, freq=None)<br></code></pre></td></tr></table></figure><br>　　可以使用asfreq进行指定。如果数据中缺失了某个时间，asfreq将自动为这些时间添加新行，并默认分配空值。<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">opsd = opsd.asfre<span class="hljs-string">q('D')</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lsl">DatetimeIndex(['<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>',<br>               ...<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-22</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-23</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-25</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>'],<br>              dtype='datetime64[ns]', name='Date', length=<span class="hljs-number">4383</span>, freq='D')<br></code></pre></td></tr></table></figure></p><h3 id="基于时间索引筛选数据"><a href="#基于时间索引筛选数据" class="headerlink" title="基于时间索引筛选数据"></a>基于时间索引筛选数据</h3><p>　　对于时间数据索引，可以使用loc提取数据。例如，查找2017年8月10日的数据。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-class">.loc</span><span class="hljs-selector-attr">[<span class="hljs-string">'2017-08-10'</span>]</span><br></code></pre></td></tr></table></figure><br>　　也可以选择一段时间，例如2014年1月20日至2014年1月22日的数据。与使用loc的常规索引一样，切片将包含两个端点。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">opsd.loc['<span class="hljs-number">2014-01-20</span>':'<span class="hljs-number">2014-01-22</span>']<br></code></pre></td></tr></table></figure><br>　　可以不具体到日，而仅仅指定对应的年和月，将返回当月的所有数据。例如，查找2017年1月份的数据。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-class">.loc</span><span class="hljs-selector-attr">[<span class="hljs-string">'2017-01'</span>]</span><br></code></pre></td></tr></table></figure><br>　　获取时间范围内的数据也可以使用truncate进行筛选。before将删去给定日期之前的数据，after将删去给定日期之后的数据。例如，筛选2017年1月份的数据。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">opsd.truncate(before='<span class="hljs-number">2017</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>',after='<span class="hljs-number">2017</span><span class="hljs-number">-01</span><span class="hljs-number">-31</span>')<br></code></pre></td></tr></table></figure></p><h3 id="时间数据基本操作"><a href="#时间数据基本操作" class="headerlink" title="时间数据基本操作"></a>时间数据基本操作</h3><p>　　针对时间数据，可以使用year，month，weekday等多种方法获取对应时间的年份、月份和星期。<br>　　首先使用index提取数据的索引。<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">opsdtime</span> = opsd.index<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lsl">DatetimeIndex(['<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-02</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-03</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-04</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-06</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-07</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span>',<br>               '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-09</span>', '<span class="hljs-number">2006</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span>',<br>               ...<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-22</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-23</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-24</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-25</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-26</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>',<br>               '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>', '<span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>'],<br>              dtype='datetime64[ns]', name='Date', length=<span class="hljs-number">4383</span>, freq='D')<br></code></pre></td></tr></table></figure><br>　　使用year提取每个数据对应的年份。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">opsdtime.<span class="hljs-built_in">year</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Int64Index([<span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>, <span class="hljs-number">2006</span>,<br>            ...<br>            <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>, <span class="hljs-number">2017</span>],<br>           dtype=<span class="hljs-string">'int64'</span>, name=<span class="hljs-string">'Date'</span>, length=<span class="hljs-number">4383</span>)<br></code></pre></td></tr></table></figure><br>　　使用month提取月份。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">opsdtime.<span class="hljs-built_in">month</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Int64Index([ <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">1</span>,<br>            ...<br>            <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>],<br>           dtype=<span class="hljs-string">'int64'</span>, name=<span class="hljs-string">'Date'</span>, length=<span class="hljs-number">4383</span>)<br></code></pre></td></tr></table></figure><br>　　month返回的是对应月份的数字，若想要获得月份的名字可以使用month_name。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsdtime</span><span class="hljs-selector-class">.month_name</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Index([<span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>,<br>       <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>, <span class="hljs-string">'January'</span>,<br>       <span class="hljs-built_in">..</span>.<br>       <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>,<br>       <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>, <span class="hljs-string">'December'</span>],<br>      <span class="hljs-attribute">dtype</span>=<span class="hljs-string">'object'</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">'Date'</span>, <span class="hljs-attribute">length</span>=4383)<br></code></pre></td></tr></table></figure><br>　　可以使用weekday和weekday_name（新版本API已修改为<code>day_name()</code>）查看日期是星期几。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">opsdtime.<span class="hljs-built_in">weekday</span><br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Int64Index([<span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<br>            ...<br>            <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>           dtype=<span class="hljs-string">'int64'</span>, name=<span class="hljs-string">'Date'</span>, length=<span class="hljs-number">4383</span>)<br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsdtime</span><span class="hljs-selector-class">.weekday_name</span><br># <span class="hljs-selector-tag">opsdtime</span><span class="hljs-selector-class">.day_name</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Index([<span class="hljs-string">'Sunday'</span>, <span class="hljs-string">'Monday'</span>, <span class="hljs-string">'Tuesday'</span>, <span class="hljs-string">'Wednesday'</span>, <span class="hljs-string">'Thursday'</span>, <span class="hljs-string">'Friday'</span>,<br>       <span class="hljs-string">'Saturday'</span>, <span class="hljs-string">'Sunday'</span>, <span class="hljs-string">'Monday'</span>, <span class="hljs-string">'Tuesday'</span>,<br>       <span class="hljs-built_in">..</span>.<br>       <span class="hljs-string">'Friday'</span>, <span class="hljs-string">'Saturday'</span>, <span class="hljs-string">'Sunday'</span>, <span class="hljs-string">'Monday'</span>, <span class="hljs-string">'Tuesday'</span>, <span class="hljs-string">'Wednesday'</span>,<br>       <span class="hljs-string">'Thursday'</span>, <span class="hljs-string">'Friday'</span>, <span class="hljs-string">'Saturday'</span>, <span class="hljs-string">'Sunday'</span>],<br>      <span class="hljs-attribute">dtype</span>=<span class="hljs-string">'object'</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">'Date'</span>, <span class="hljs-attribute">length</span>=4383)<br></code></pre></td></tr></table></figure><br>　　构建月份与对应季节间的映射字典。<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">seasons = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>]<br>month_to_season = dict(zip(range(<span class="hljs-number">1</span>,<span class="hljs-number">13</span>), seasons))<br><br>opsdtime.month.map(month_to_season)<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">1</span>, <span class="hljs-number">3</span>: <span class="hljs-number">2</span>, <span class="hljs-number">4</span>: <span class="hljs-number">2</span>, <span class="hljs-number">5</span>: <span class="hljs-number">2</span>, <span class="hljs-number">6</span>: <span class="hljs-number">3</span>, <span class="hljs-number">7</span>: <span class="hljs-number">3</span>, <span class="hljs-number">8</span>: <span class="hljs-number">3</span>, <span class="hljs-number">9</span>: <span class="hljs-number">4</span>, <span class="hljs-number">10</span>: <span class="hljs-number">4</span>, <span class="hljs-number">11</span>: <span class="hljs-number">4</span>, <span class="hljs-number">12</span>: <span class="hljs-number">1</span>&#125;<br><br>Int64Index([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>            ...<br>            <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>           dtype=<span class="hljs-string">'int64'</span>, name=<span class="hljs-string">'Date'</span>, length=<span class="hljs-number">4383</span>)<br></code></pre></td></tr></table></figure></p><h3 id="周期性分析"><a href="#周期性分析" class="headerlink" title="周期性分析"></a>周期性分析</h3><h4 id="重采样分析周期性"><a href="#重采样分析周期性" class="headerlink" title="重采样分析周期性"></a>重采样分析周期性</h4><p>　　使用plot查看数据整体情况，电力消耗总量：<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">opsd[<span class="hljs-string">'Consumption'</span>].plot(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc523cae48.png" srcset="/img/loading.gif" lazyload alt="电力消耗整体情况"><br>　　具体查看2007年的数据。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">opsd.loc['<span class="hljs-number">2007</span>','Consumption'].plot(figsize=(<span class="hljs-number">12</span>,<span class="hljs-number">6</span>))<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc5007e668.png" srcset="/img/loading.gif" lazyload alt="2007年电力消耗情况"><br>　　使用groupby按变量season分组，并计算每个季节的用电量均值。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-string">'season'</span>)<span class="hljs-selector-attr">['Consumption']</span><span class="hljs-selector-class">.mean</span>()<span class="hljs-selector-class">.plot</span>()<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4ff8acc0.png" srcset="/img/loading.gif" lazyload alt="按season分组均值"><br>　　使用groupby进行重采样，将数据按是星期几进行分组，并计算每组的用电量均值。这里使用lambda函数传入weekday进行分组。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-class">.groupby</span>(<span class="hljs-selector-tag">lambda</span> <span class="hljs-selector-tag">x</span><span class="hljs-selector-pseudo">:x.weekday)</span><span class="hljs-selector-attr">[<span class="hljs-string">'Consumption'</span>]</span><span class="hljs-selector-class">.mean</span>()<span class="hljs-selector-class">.plot</span>()<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4ff1a5f8.png" srcset="/img/loading.gif" lazyload alt="按dayofweek分组均值"><br>　　使用resample对风能发电数据进行降采样。按每个月重采样，并计算每月的均值。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">wind</span> = opsd['<span class="hljs-keyword">Wind</span>'].resample('<span class="hljs-keyword">M</span>').<span class="hljs-keyword">mean</span>()<br><span class="hljs-keyword">wind</span>.<span class="hljs-keyword">plot</span>(figsize=(12,6))<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4e11ae48.png" srcset="/img/loading.gif" lazyload alt="按月重采样均值"></p><h4 id="数据差分分析周期性"><a href="#数据差分分析周期性" class="headerlink" title="数据差分分析周期性"></a>数据差分分析周期性</h4><p>　　在分析周期性的过程中，很重要的一点就是要消除数据的趋势性，常见的消除数据趋势的方法就是差分：计算连续数据点间的差异（这里特指一阶差分）。例如，t时刻的差分值：$\Delta d_t=d_t - d_{t-1}$。可以使用diff方法实现差分操作。<br>　　例如，计算太阳能发电的差分序列并绘图：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">opsd[<span class="hljs-string">'Solar'</span>].diff<span class="hljs-comment">()</span>.plot<span class="hljs-comment">(figsize=(12,6)</span>)<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4e0e3fd0.png" srcset="/img/loading.gif" lazyload alt="一阶差分序列"><br>　　也可以通过移动时间序列自行计算差分值。<br>　　移动序列可以使用shift方法。shift方法可以沿着时间轴将数据前移或后移，保持索引不变。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-attr">[<span class="hljs-string">'Solar'</span>]</span><span class="hljs-selector-class">.tail</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Date</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>    <span class="hljs-number">16.530</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>    <span class="hljs-number">14.162</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>    <span class="hljs-number">29.854</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>     <span class="hljs-number">7.467</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>    <span class="hljs-number">19.980</span><br><span class="hljs-attr">Freq:</span> <span class="hljs-string">D,</span> <span class="hljs-attr">Name:</span> <span class="hljs-string">Solar,</span> <span class="hljs-attr">dtype:</span> <span class="hljs-string">float64</span><br></code></pre></td></tr></table></figure><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-attr">[<span class="hljs-string">'Solar'</span>]</span><span class="hljs-selector-class">.shift</span>(1)<span class="hljs-selector-class">.tail</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Date</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-27</span>    <span class="hljs-number">30.923</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>    <span class="hljs-number">16.530</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>    <span class="hljs-number">14.162</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>    <span class="hljs-number">29.854</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>     <span class="hljs-number">7.467</span><br><span class="hljs-attr">Freq:</span> <span class="hljs-string">D,</span> <span class="hljs-attr">Name:</span> <span class="hljs-string">Solar,</span> <span class="hljs-attr">dtype:</span> <span class="hljs-string">float64</span><br></code></pre></td></tr></table></figure><br>　　两个序列相减即可得到原始数据的一阶差分序列。<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">dif = opsd[<span class="hljs-string">'Solar'</span>]-opsd[<span class="hljs-string">'Solar'</span>].shift<span class="hljs-comment">(1)</span><br>dif.plot<span class="hljs-comment">(figsize=(12,6)</span>)<br></code></pre></td></tr></table></figure><br>　　也可以通过设定shift方法中的参数freq移动索引而数据保持不变，例如指定时间移动一天。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">opsd</span><span class="hljs-selector-attr">['Solar']</span><span class="hljs-selector-class">.shift</span>(<span class="hljs-number">1</span>,freq=<span class="hljs-string">'d'</span>)<span class="hljs-selector-class">.tail</span>()<br></code></pre></td></tr></table></figure><br><strong><em>Output:</em></strong><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Date</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-28</span>    <span class="hljs-number">16.530</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-29</span>    <span class="hljs-number">14.162</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-30</span>    <span class="hljs-number">29.854</span><br><span class="hljs-number">2017</span><span class="hljs-number">-12</span><span class="hljs-number">-31</span>     <span class="hljs-number">7.467</span><br><span class="hljs-number">2018</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>    <span class="hljs-number">19.980</span><br><span class="hljs-attr">Freq:</span> <span class="hljs-string">D,</span> <span class="hljs-attr">Name:</span> <span class="hljs-string">Solar,</span> <span class="hljs-attr">dtype:</span> <span class="hljs-string">float64</span><br></code></pre></td></tr></table></figure></p><h3 id="滚动窗口"><a href="#滚动窗口" class="headerlink" title="滚动窗口"></a>滚动窗口</h3><p>　　与降采样类似，滚动窗口将数据拆分为时间窗口，并且对每个窗口中的数据使用诸如mean，median等函数进行聚合。但是，与降采样不同，滚动窗口以与数据相同的频率重叠和“滚动”，因此变换的时间序列与原始时间序列的频率相同。<br>　　例如，设定窗口为7天，且以数据中心为基准点，则每一个数据对应的窗口将包含前面三天与后面三天。具体来看，2017-07-06对应的窗口就是2017-07-03到2017-07-09。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">opsd['Wind']<span class="hljs-string">.rolling</span><span class="hljs-params">(7)</span><span class="hljs-string">.mean</span><span class="hljs-params">()</span><span class="hljs-string">.plot</span><span class="hljs-params">(<span class="hljs-attr">figsize</span>=(12,6)</span>)<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4fcae400.png" srcset="/img/loading.gif" lazyload alt="7天滑窗均值"></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">opsd['Wind']<span class="hljs-string">.rolling</span><span class="hljs-params">(30)</span><span class="hljs-string">.mean</span><span class="hljs-params">()</span><span class="hljs-string">.plot</span><span class="hljs-params">(<span class="hljs-attr">figsize</span>=(12,6)</span>)<br></code></pre></td></tr></table></figure><p>　　当窗口范围中存在缺失值时，窗口将会返回为缺失值，可以设定min_periods为360，只需要对应窗口中有360个以上数据就可以，这样可以容忍一小部分的缺失数据。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">opsd['Wind']<span class="hljs-string">.rolling</span><span class="hljs-params">(<span class="hljs-attr">window</span>=365,<span class="hljs-attr">min_periods</span>=360)</span><span class="hljs-string">.mean</span><span class="hljs-params">()</span><span class="hljs-string">.plot</span><span class="hljs-params">(<span class="hljs-attr">figsize</span>=(12,6)</span>)<br></code></pre></td></tr></table></figure><br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/0x7fbc4ddfe080.png" srcset="/img/loading.gif" lazyload alt="365天滑窗均值"></p><h2 id="K-means-clustering-algorithm"><a href="#K-means-clustering-algorithm" class="headerlink" title="K-means clustering algorithm"></a>K-means clustering algorithm</h2><p>　　一个简单的算法伪代码描述如下：</p><script type="math/tex; mode=display">\begin{aligned} \hline&1:\ 选择K个点作为初始质心。\\&2:\ repeat \\&3:\ \quad 将每个点指派到最近的质心，形成K个簇。\\&4:\ \quad 重新计算每个簇的质心。\\&5:\ until 质心不发生变化。\\\hline\end{aligned}</script><p>　　相似度使用欧氏距离(Euclidean Distance)度量，给定两个样本$X=(x_1,x_2,…,x_n)$与$Y=(y_1,y_2,…,y_n)$，$X$和$Y$两个向量间的欧氏距离表示为：</p><script type="math/tex; mode=display">\begin{aligned} dist_{ed}(X,Y)=\Vert X-Y \Vert ^2=\sqrt[2]{(x_1-y_1)^2+...+(x_n-y_n)^2}\end{aligned}</script><h3 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h3><p>　　距离计算函数<em>point_dist</em>。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">point_dist</span><span class="hljs-params">(x,c)</span></span>: <br>    <span class="hljs-keyword">return</span> np.linalg.norm(x-c)<br></code></pre></td></tr></table></figure></p><h4 id="iterrows-遍历方式实现"><a href="#iterrows-遍历方式实现" class="headerlink" title="iterrows 遍历方式实现"></a>iterrows 遍历方式实现</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">def k_means(<span class="hljs-meta">X</span>,k):<br>    centers = <span class="hljs-meta">X</span>.sample(k).values #从数据集随机选择 K 个样本作为初始化的类中心，k 行 d 列<br>    X_labels = np.zeros(l<span class="hljs-meta">en(</span><span class="hljs-meta">X</span>)) #样本的类别<br>    <span class="hljs-meta">error</span> = 10e10<br>    <span class="hljs-meta">while</span>(<span class="hljs-meta">error</span> &gt; 1e-6):<br>        for i,<span class="hljs-meta">x</span> <span class="hljs-meta">in</span> <span class="hljs-meta">X</span>.iterrows():#指派样本类标签<br>            X_labels[i] = np.ar<span class="hljs-meta">gmin(</span>[point_dist(<span class="hljs-meta">x</span>,centers[i,:]) for i <span class="hljs-meta">in</span><span class="hljs-meta"> range(</span>k)])<br>        centers_pre = centers<br>        centers = <span class="hljs-meta">X</span>.groupby(X_labels)<span class="hljs-meta">.mean(</span>).values #更新样本均值，即类中心<br>        <span class="hljs-meta">error</span> = np.linalg.norm(centers_pre - centers)#计算<span class="hljs-meta">error</span><br>    <span class="hljs-meta">return</span> X_labels, centers<br></code></pre></td></tr></table></figure><h4 id="apply-遍历方式实现"><a href="#apply-遍历方式实现" class="headerlink" title="apply 遍历方式实现"></a>apply 遍历方式实现</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def k_means(X,k):<br>    #初始化 K 个中心，从原始数据中选择样本<br>    centers = X.sample(k).<span class="hljs-built_in">values</span><br>    X_labels = <span class="hljs-built_in">np</span>.zeros(len(X)) #样本的类别<br>    <span class="hljs-built_in">error</span> = <span class="hljs-number">10e10</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">error</span> &gt; <span class="hljs-number">1e-6</span>):<br>        X_labels = X.<span class="hljs-built_in">apply</span>(<span class="hljs-built_in">lambda</span> r : <span class="hljs-built_in">np</span>.argmin([point_dist(r,centers[i,:]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)]),axis=<span class="hljs-number">1</span>)<br>        centers_pre = centers<br>        centers = X.groupby(X_labels).<span class="hljs-built_in">mean</span>().<span class="hljs-built_in">values</span> #更新样本均值，即类中心<br>        <span class="hljs-built_in">error</span> = <span class="hljs-built_in">np</span>.linalg.norm(centers_pre - centers)#计算<span class="hljs-built_in">error</span><br>    <span class="hljs-built_in">return</span> X_labels, centers<br></code></pre></td></tr></table></figure><h4 id="矩阵运算方式实现"><a href="#矩阵运算方式实现" class="headerlink" title="矩阵运算方式实现"></a>矩阵运算方式实现</h4><p>　　数据集表示成 $n \times d$ 矩阵 $\mathbf{X}$，其中 $n$ 为样本数量，$d$ 为样本的维度。 $k$ 个聚类中心表示成 $k \times d$ 矩阵 $\mathbf{C}$，$\mathbf{C}$ 每一行表示一个聚类中心。样本到 $k$ 个中心的距离表示成 $n \times k$ 矩阵 $\mathbf{D}$。  </p><p>　　已知聚类中心，计算样本到中心距离，并将样本划分到距离最小的类的流程如下图所示。</p><p>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/BDA%E5%A4%8D%E4%B9%A0/%E6%A0%B7%E6%9C%AC%E5%88%97%E8%A1%A8%E8%AE%A1%E7%AE%97%E6%B5%81%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="样本列表计算流程"></p><p>　　使用 Numpy 实现上述计算流程的代码为：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>D[:,i] = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">np</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">np</span>.square(X - C[i,:]),axis=<span class="hljs-number">1</span>))<br><span class="hljs-built_in">labels</span> = <span class="hljs-built_in">np</span>.argmin(D,axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>　　得到样本的类标签后，聚类中心的更新流程为：1）根据类标签对样本进行分组；2）将聚类中心更新为每一组样本的均值。Python 实现的代码为：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">C = X.groupby(<span class="hljs-built_in">labels</span>).<span class="hljs-built_in">mean</span>().<span class="hljs-built_in">values</span><br></code></pre></td></tr></table></figure><p>　　完整实现代码：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs maxima">def k_means(X,k):<br>    C = X.sample(k).<span class="hljs-built_in">values</span>  #从数据集随机选择 K 个样本作为初始化的类中心，k 行 d 列<br>    X_labels = <span class="hljs-built_in">np</span>.zeros(len(X)) #记录样本的类别<br>    <span class="hljs-built_in">error</span> = <span class="hljs-number">10e10</span> #停止迭代的阈值<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">error</span> &gt; <span class="hljs-number">1e-6</span>):<br>        D = <span class="hljs-built_in">np</span>.zeros((len(X),k)) #样本到每一个中心的距离，n 行 k 列<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            D[:,i] = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">np</span>.<span class="hljs-built_in">sum</span>(<span class="hljs-built_in">np</span>.square(X - C[i,:]),axis=<span class="hljs-number">1</span>))<br>        <span class="hljs-built_in">labels</span> = <span class="hljs-built_in">np</span>.argmin(D,axis=<span class="hljs-number">1</span>)<br>        C_pre = C<br>        <br>        temp_C = X.groupby(<span class="hljs-built_in">labels</span>).<span class="hljs-built_in">mean</span>() #更新样本均值，即类中心<br>        C = <span class="hljs-built_in">np</span>.zeros((k,X.shape[<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp_C.index:<br>            C[i,:] = temp_C.loc[i,:].<span class="hljs-built_in">values</span><br>            <br>        <span class="hljs-keyword">if</span> C.shape == C_pre.shape:<br>            <span class="hljs-built_in">error</span> = <span class="hljs-built_in">np</span>.linalg.norm(C_pre - C)#计算<span class="hljs-built_in">error</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(C.shape, C_pre.shape)<br>    <span class="hljs-built_in">return</span> <span class="hljs-built_in">labels</span>, C<br></code></pre></td></tr></table></figure></p><h2 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><script type="math/tex; mode=display">\begin{aligned}h_\theta(x)&=\theta^Tx \\ &=\sum_{i=0}^n{\theta_i x_i} \\ &=\theta_0 + \theta_1 x_1 + \theta_2 x_2 + ... + \theta_n x_n\end{aligned}</script><h3 id="sigmoid"><a href="#sigmoid" class="headerlink" title="sigmoid"></a>sigmoid</h3><script type="math/tex; mode=display">\begin{aligned}g(z)=\frac{1}{1+e^{-z}}\end{aligned}</script><h3 id="逻辑回归公式"><a href="#逻辑回归公式" class="headerlink" title="逻辑回归公式"></a>逻辑回归公式</h3><p>　　线性回归公式带入Sigmoid即得：</p><script type="math/tex; mode=display">\begin{aligned}h_\theta(x)=\frac{1}{1+e^{-{\theta^Tx}}}\end{aligned}</script><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>　　对数形式的似然函数如下：  </p><script type="math/tex; mode=display">\begin{aligned}logL(\theta)=\sum_{i=1}^n{log(p(x_i;\theta))} \end{aligned}</script><p>　　用sigmoid函数表示0-1中取1的概率，损失函数可以定义为：</p><script type="math/tex; mode=display">\begin{aligned}y&=0时，Cost(h_\theta(x),y)=-log(1-h_\theta(x)) \\y&=1时，Cost(h_\theta(x),y)=-log(h_\theta(x)) \end{aligned}</script><p>　　损失函数的要求是预测结果与真实结果越相近，函数值越小，故在前面加上负号。取对数和上面提到的最大似然函数有关，不影响原函数的单调性，且会放大概率之间的差异，更好的区分各个样本的类别。<br>　　故逻辑回归的损失函数如下：</p><script type="math/tex; mode=display">\begin{aligned}J(\theta)=-\frac{1}{m}\sum_{i=1}^m{[y^{(i)}logh_\theta(x^{(i)})+(1-y^{(i)})log(1-h_\theta(x^{(i)}))]}\end{aligned}</script><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>　　要求出最优参数$\theta$，需要最小化$J(\theta)$，更新参数：</p><script type="math/tex; mode=display">\begin{aligned}\theta_j := \theta_j-\alpha \frac{\partial J(\theta)}{\partial \theta_j}\end{aligned}</script><p>　　sigmoid函数求导：</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial g(z)}{\partial z}=g(z)(1-g(z))\end{aligned}</script><p>　　对g(\theta^Tx)求导：</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial g(\theta^Tx)}{\partial z}=g(\theta^Tx)(1-g(\theta^Tx))x_j^{(i)}\end{aligned}</script><p>　　<strong>损失函数求导：</strong></p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial J(\theta)}{\partial \theta_j}&= ...\\&=\frac{1}{m}\sum_{i}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\end{aligned}</script><p>　　得到逻辑回归的梯度下降更新公式：</p><script type="math/tex; mode=display">\begin{aligned}\theta_j := \theta_j-\alpha  \frac{1}{m}\sum_{i}^m(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\end{aligned}</script><h3 id="伪代码描述"><a href="#伪代码描述" class="headerlink" title="伪代码描述"></a>伪代码描述</h3><script type="math/tex; mode=display">\begin{aligned} \hline&1:\ 初始化回归系数。\\&2:\ repeat \\&3:\ \quad 计算梯度\frac{\partial J(\theta)}{\partial \theta}。\\&4:\ \quad \theta:=\theta+\alpha * \frac{\partial J(\theta)}{\partial \theta}。\\&5:\ until 收敛 or max_loop。\\&6:\ return \theta \\\hline\end{aligned}</script><h3 id="Python实现-1"><a href="#Python实现-1" class="headerlink" title="Python实现"></a>Python实现</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LR</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, alpha=<span class="hljs-number">0</span>.<span class="hljs-number">01</span>, max_iter=<span class="hljs-number">100</span>)</span></span><span class="hljs-symbol">:</span><br>        <span class="hljs-keyword">self</span>.alpha = alpha<br>        <span class="hljs-keyword">self</span>.max_iter = max_iter<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fit</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, X, y)</span></span><span class="hljs-symbol">:</span><br>        X = np.mat(X)  <span class="hljs-comment"># (rows,cols)</span><br>        m, n = np.shape(X)<br>        y = np.mat(y).T  <span class="hljs-comment"># (rows,cols)</span><br><br>        <span class="hljs-keyword">self</span>.weight = np.ones((n, <span class="hljs-number">1</span>))<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-keyword">self</span>.max_iter)<span class="hljs-symbol">:</span><br>            h = <span class="hljs-keyword">self</span>.sigmoid(X * <span class="hljs-keyword">self</span>.weight)<br>            error = y - h<br>            <span class="hljs-keyword">self</span>.weight = <span class="hljs-keyword">self</span>.weight + <span class="hljs-keyword">self</span>.alpha * X.T * error<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章就『Lending Club贷款数据转换与融合』、『行星数据分组与聚合』以及『德国能源数据时间序列分析』等案例对Pandas中的部分分析方法以及机器学习中部分算法进行总结。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2021招商银行FinTech精英训练营 数据赛道(Rank53)</title>
    <link href="http://meurice.xyz/2021/ckotxwier00054wlx2jmjddz5/"/>
    <id>http://meurice.xyz/2021/ckotxwier00054wlx2jmjddz5/</id>
    <published>2021-05-17T16:48:13.000Z</published>
    <updated>2021-05-18T10:57:40.681Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机数据安全复习要点总结</title>
    <link href="http://meurice.xyz/2021/ckotxwif3000i4wlx2igt4fq9/"/>
    <id>http://meurice.xyz/2021/ckotxwif3000i4wlx2igt4fq9/</id>
    <published>2021-05-17T08:51:00.000Z</published>
    <updated>2021-05-19T05:47:00.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-计算机信息安全技术概述"><a href="#第1章-计算机信息安全技术概述" class="headerlink" title="第1章 计算机信息安全技术概述"></a>第1章 计算机信息安全技术概述</h1><h2 id="信息安全模型"><a href="#信息安全模型" class="headerlink" title="信息安全模型"></a>信息安全模型</h2><h3 id="通信安全模型"><a href="#通信安全模型" class="headerlink" title="通信安全模型"></a>通信安全模型</h3><p>　　通信一方通过公开信道将消息传送给另一方，要保护信息传输的机密性、真实性等特性，就涉及通信安全。通信的发送方要对信息进行相关的安全变换，可以是加密、签名，接收方接收后，再进行相关的逆变换，如解密、验证、签名等。双方进行的安全变换通常需要使用一些秘密信息，如加密密钥、解密密钥等。根据上述安全模型，设计安全服务需要完成以下4个基本任务。<br>　　（1）设计一个算法，执行安全相关的转换，算法应具有足够的安全强度。<br>　　（2）生成该算法所使用的秘密信息，也就是密钥。<br>　　（3）设计秘密信息的分布与共享的方法，也就是密钥的分配方案。<br>　　（4）设定通信双方使用的安全协议，该协议利用密码算法和密钥实现安全服务。<br>　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E7%BB%8F%E5%85%B8%E7%9A%84%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" lazyload alt="经典的通信安全模型">  </p><h3 id="信息访问安全模型"><a href="#信息访问安全模型" class="headerlink" title="信息访问安全模型"></a>信息访问安全模型</h3><p>　　还有一些与安全相关的情形不完全适用于上述模型，William Stallings给出了如图所示的信息访问安全模型。该模型希望保护信息系统不受有害的访问。有害的访问分为两种：一种有害的访问是由黑客发起的，他们有时并没有恶意，只是满足于闯入计算机系统，展示自己的技术水平或利用计算机技术进行获利；另一种有害的访问来源于恶意软件，如病毒、木马、蠕虫等。对付有害攻击所需要的安全服务包含鉴别和访问控制两类。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E4%BF%A1%E6%81%AF%E8%AE%BF%E9%97%AE%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" lazyload alt="信息访问安全模型">  </p><h3 id="动态安全模型"><a href="#动态安全模型" class="headerlink" title="动态安全模型"></a>动态安全模型</h3><p>　　PPDR模型由4个主要部分组成：安全策略（Policy）、防护（Protection）、检测（Detection）和响应（Response）。PPDR模型是在整体的安全策略的控制和指导下，综合运用防护工具（如防火墙、身份认证、加密等）的同时，利用检测工具（如漏洞评估、入侵检测系统）了解和评估系统的安全状态，通过适当的安全响应将系统调整到一个比较安全的状态。防护、检测和响应组成了一个完整的、动态的安全循环。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/PPDR%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" lazyload alt="PPDR安全模型">  </p><h3 id="APPDRR模型"><a href="#APPDRR模型" class="headerlink" title="APPDRR模型"></a>APPDRR模型</h3><p>　　网络安全的动态特性在PPDR模型中得到了一定程度的体现，其中主要是通过入侵的检测和响应完成网络安全的动态防护。但PPDR模型不能描述网络安全的动态螺旋上升过程。为了使PPDR模型能够贴切地描述网络安全的本质规律，人们对PPDR模型进行了修正和补充，在此基础上提出了 APPDRR模型，如图1.5所示。APPDRR模型认为网络安全由风险评估（Assessment）、安全策略（Policy）、系统防护（Protection）、动态检测（Detection）、实时响应（Reaction）和灾难恢复（Restoration）6个部分组成。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/APPDRR%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.png" srcset="/img/loading.gif" lazyload alt="APPDRR模型">  </p><h1 id="第2章-密码技术"><a href="#第2章-密码技术" class="headerlink" title="第2章 密码技术"></a>第2章 密码技术</h1><h2 id="传统密码体制"><a href="#传统密码体制" class="headerlink" title="传统密码体制"></a>传统密码体制</h2><h3 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h3><h4 id="移位密码-凯撒密码"><a href="#移位密码-凯撒密码" class="headerlink" title="移位密码/凯撒密码"></a>移位密码/凯撒密码</h4><p>　　设$P = C = Z_{26} $，对$ 0 ≤ k ≤ 25$，定义：</p><script type="math/tex; mode=display">\begin{aligned}e_k(x) &= (x+k)\ mod\ 26 \\d(y) &= (y-k)\ mod\ 26\end{aligned}</script><p>　　其中$ x,y ∈ Z_{26} $。 </p><p>　　<strong>凯撒(Caesar)密码</strong>是$ k=3 $的情况，即向右移动源字母表中的三个字母。</p><p>　　<strong>eg</strong>. 若明文为：”please confirm receipt“，则密文为”SOHDVH FRQILUP UHFHLSW“。</p><p>　　代换字母表如下所示。</p><script type="math/tex; mode=display">\begin{array}{c|ccccccccccccc}\searrow & A & B & C & D & E & F & G & H & I & J & K & L & M  \\\hline \ & D & E & F & G & H & I & J & K & L & M & N & O & P \\\hline\searrow & N & O & P & Q & R & S & T & U & V & W & X & Y & Z \\\hline\ & Q & R & S & T & U & V & W & X & Y & Z & A & B & C\end{array}</script><h4 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h4><p>　　设$ P=C=Z_{26} $，且$K=\{(a,b)∈Z_{26} × Z_{26} | gcd(a,26)=1\}$，对$k=(a,b)∈K$ ，定义：  </p><script type="math/tex; mode=display">\begin{aligned}e_k(x) &= (ax+b)\ mod\ 26 \\d_k(y) &= a^{-1}(y-b)\ mod\ 26\end{aligned}</script><p>　　其中$ (x,y) ∈ Z_{26} $。  </p><p>　　<strong>eg</strong>.假定$ k=(7,3),7^{-1}\ mod\ 26=15$，加密函数为$ e_k(x)=7x+3 $，则相应的解密函数为$ d_k(y)=$$15(y-3)=15y-19 $，其中所有的运算都是在$Z_{26}$中。容易验证，$d_k(e_k(x))=$ $d_k(7x+3)=$ $15(7x+3)-19=$ $x+45-19=x$。</p><p>　　关于$a^{-1}$：$a$在$Z_m$群的乘法逆元，其值可通过费马小定理求出，以下给出仿射密码中$a$与$a^{-1}$的对应表。</p><script type="math/tex; mode=display">\begin{array} {c|cccccccccccc}a & 1 & 3 & 5 & 7 & 9 & 11 & 15 & 17 & 19 &21 & 23 & 25 \\\hlinea^{-1} & 1 & 9 & 21 & 15 & 3 & 19 & 7 & 23 & 11 & 5 & 17 &25\end{array}</script><h3 id="传统密码的分析"><a href="#传统密码的分析" class="headerlink" title="传统密码的分析"></a>传统密码的分析</h3><h4 id="统计分析法"><a href="#统计分析法" class="headerlink" title="统计分析法"></a>统计分析法</h4><p>　　通过对大量材料的汇编统计，获得26个字母的概率分布。</p><script type="math/tex; mode=display">\begin{array} {cc|cc|cc|cc}字母 & 概率 & 字母 & 概率 & 字母 & 概率 & 字母 & 概率 \\\hlineA & 0.082 & H & 0.061 & O & 0.075 & V & 0.010 \\B & 0.015 & I & 0.070 & P & 0.019 & W & 0.023 \\C & 0.028 & J & 0.002 & Q & 0.001 & X & 0.001 \\D & 0.043 & K & 0.008 & R & 0.060 & Y & 0.020 \\E  & 0.127 & L &  0.040 & S & 0.063 & Z & 0.001 \\F & 0.022 & M & 0.024 & T & 0.091 \\G & 0.020 & N & 0.067 & U & 0.028\end{array}</script><p>　　基于以上概率分布，可以把26个字母分为以下5组。<br>　　（1）E出现的概率最高，大约为0.12；<br>　　（2）T、A、O、I、N、S、H、R每个出现的概率为0.06~0.09；　　<br>　　（3）D、L每个出现的概率大约为0.04；　　<br>　　（4）C、U、M、W、F、G、Y、P、B每个出现的概率为0.015~0.023；　　<br>　　（5）V、K、J、Ⅹ、Q、Z出现的概率最低，每个出现的概率都少于0.01。<br>　　对单表代换密码和置换密码进行分析时，可以利用该语言的统计规律性进行分析，较容易得到正确的解密结果。<br>　　<strong>eg</strong>.假设从仿射密码获得的密文为：“FMXVEDKAPHFERBNDKRXRSREFMORUDSDKDVSHVUFEDKAPRKDLYEVLRHHR”。<br>　　密文字母出现的频率是R（8次），D（7次），E（5次），H（5次），K（5次），F（4次），S（4次），V（4次）。可以假定R是e的加密，且D是t的加密，因为e和t分别是两个最常见的字母。数值化后，有$e_k(4)=17$，且$e_k(19)=3$。代入加密函数$e_k(x)=ax+b$，可得到一个含两个未知量的线性方程组：  </p><script type="math/tex; mode=display">\left\{\begin{aligned} 4a+b &= 17 \\19a+b &= 3\end{aligned} \right.</script><p>　　这个系统有唯一的解$a=6,b=19$（在$Z_{26}$上）。但这是一个非法的密钥，因为$gcd(a,26)=2&gt;1$，所以上面的假设有误。<br>下一个猜想可能R是e的加密，E是t的加密，得$a=13$，又是不可能的。继续假定R是e的加密，且K是t的加密。于是产生了$a=3,b=5$，这至少是一个合法的密钥。接下来计算相应于$k=(3,5)$的解密函数，然后解密密文看是否得到了有意义的英文串。容易证明这是一个有效的密钥。<br>　　最后的明文是:<br>　　<code>algorithms are quite general definitions of arithmetic processes</code>  </p><h2 id="现代对称密码体制"><a href="#现代对称密码体制" class="headerlink" title="现代对称密码体制"></a>现代对称密码体制</h2><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>　　// TODO  </p><h2 id="非对称密码体制"><a href="#非对称密码体制" class="headerlink" title="非对称密码体制"></a>非对称密码体制</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>　　RSA中，公开密钥和私人密钥是一对大素数（100~200位十进制数或更大）的函数。在使用RSA公钥体制之前，每个参与者必须产生一对密钥。<br>　　（1）密钥产生<br>　　　　①随机选择两个不同的大素数$p$和$q$，计算乘积$n=p×q$。<br>　　　　②计算其欧拉函数值$\Phi(x)=(p-1)(q-1)$。<br>　　　　③随机选取加密密钥$k$，使$k$与$\Phi(n)$互素，即$gcd(k,\Phi(n))=1$。可以先设$k$为一个初值，并且$k&lt;\Phi(n)$，然后采用试探法求出满足条件的$k$，可以令$sk=k(或pk=k)$。<br>　　　　④利用欧几里得扩展算法计算$sk$的逆元，即解密密钥$pk$，以满足：</p><script type="math/tex; mode=display">\begin{aligned}sk · pk = 1\ mod\ \Phi(n)\end{aligned}</script><p>　　　　即：</p><script type="math/tex; mode=display">\begin{aligned}pk = sk^{-1}\ mod\ \Phi(n)\end{aligned}</script><p>　　（2）加密<br>　　　　对消息$m$进行加密时，首先将它分解为比$n$小的数据分组$m_i$，即$m=m_1m_2\cdots m_i\cdots$。然后每块明文自乘$sk$次幂，再按模$n$求余数，即可得到密文。<br>　　　　密文为：</p><script type="math/tex; mode=display">\begin{aligned}C_i=m_i^{sk}\ mod\ n\end{aligned}</script><p>　　　　密文序列为：</p><script type="math/tex; mode=display">\begin{aligned}C=C_1C_2\cdots C_i \cdots\end{aligned}</script><p>　　（3）解密<br>　　　　与加密算法基本相同，将每块密文自乘$pk$次幂，再按模$n$求余数，即可得到明文。<br>　　　　明文为：</p><script type="math/tex; mode=display">\begin{aligned}m_i=C_i^{pk}\ mod\ n\end{aligned}</script><p>　　　　明文序列为：</p><script type="math/tex; mode=display">\begin{aligned}m=m_1m_2\cdots m_i\cdots\end{aligned}</script><p>　　<strong>eg</strong>.RSA的加密和解密过程。<br>　　（1）选择两个素数$p=47,q=61$。<br>　　（2）计算$n=p·q=2867$。<br>　　（3）计算$\Phi(n)=(p-1)(q-1)=2760$。<br>　　（4）选择一个$sk=167$，它小于$\Phi(n)$且与$\Phi(n)=2760$互为素数。<br>　　（5）求出$pk$，使得$sk · pk=1\ mod\ 2760$，易得$pk=1223$，因为$1223×167=204241=74×2760+1$。<br>　　（6）结果得到的公开密钥为$KU=\{1223,2867\}$，私人密钥为$KR=\{167,2867\}$。<br>　　明文输入$m=123\ 456\ 789$。<br>　　首先将明文分成3组：  </p><script type="math/tex; mode=display">\begin{aligned}m_1=123\\m_2=456\\m_3=789\end{aligned}</script><p>　　用私钥$sk$进行加密：  </p><script type="math/tex; mode=display">\begin{aligned}C_1=m_1^{167}\ mod\ 2867 = 1770\\C_2=m_2^{167}\ mod\ 2867 = 1321\\C_3=m_3^{167}\ mod\ 2867 = 1297\end{aligned}</script><p>　　得到密文：  </p><script type="math/tex; mode=display">\begin{aligned}C=1770\ 1321\ 1297\end{aligned}</script><p>　　用公钥$pk$解密：  </p><script type="math/tex; mode=display">\begin{aligned}m_1=C_1^{1223}\ mod\ 2867 = 123\\m_2=C_2^{1223}\ mod\ 2867 = 456\\m_3=C_3^{1223}\ mod\ 2867 = 789\end{aligned}</script><h1 id="第3章-信息认证技术"><a href="#第3章-信息认证技术" class="headerlink" title="第3章 信息认证技术"></a>第3章 信息认证技术</h1><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>　　算法简述：MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由4个32位分组组成，将这4个32为分组级联后将生成一个128位的散列值。  </p><h2 id="消息认证技术"><a href="#消息认证技术" class="headerlink" title="消息认证技术"></a>消息认证技术</h2><h3 id="消息认证方法"><a href="#消息认证方法" class="headerlink" title="消息认证方法"></a>消息认证方法</h3><p>　　消息认证主要使用密码技术来实现。在实际使用中，通过消息认证函数$f$产生用于鉴别的消息认证码，将其用于某个身份认证协议，发送方和接收方通过消息认证码对其进行相应的认证。</p><h4 id="基于加密方法的消息认证"><a href="#基于加密方法的消息认证" class="headerlink" title="基于加密方法的消息认证"></a>基于加密方法的消息认证</h4><h5 id="基于对称加密方式的消息认证过程"><a href="#基于对称加密方式的消息认证过程" class="headerlink" title="基于对称加密方式的消息认证过程"></a>基于对称加密方式的消息认证过程</h5><p>　　假设$K$是通信双方共同拥有的会话密钥，发送方A只需使用$K$对消息$M$进行加密，将密文$C$发送给接收方B即可。由于密钥$K$只有A和B共同拥有，因此能够保证消息的机密性。此外，由于A是除B外唯一拥有密钥和产生正确密文$M$的一方，若B使用$K$对密文$C$进行解密还原出正确的消息$M$，就可以知道消息$M$的内容没有遭到篡改，同时也保证消息来自A。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%9F%BA%E4%BA%8E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="基于对称加密的消息认证过程">  </p><h5 id="添加校验码的消息认证过程"><a href="#添加校验码的消息认证过程" class="headerlink" title="添加校验码的消息认证过程"></a>添加校验码的消息认证过程</h5><p>　　然而，在实际使用中，简单的加密并不能达到真正消息认证的目的。消息$M$对接收方B来说是未知的，因此当B对密文进行解密后，如何判断$M$的合法性。如果$M$本身具有某种结构，如文本文章，那么B只需对解密后的消息进行结构上的分析即可判断$M$的合法性。但是，在实际通信中，消息$M$可能是随机的二进制位序列，如可执行代码、声音文件等，即使B解密后仍无法判断消息$M$是否是合法的。  </p><p>　　解决这一问题的方法是发送方在对消息M进行加密前，首先对消息通过校验函数$F(·)$产生一个校验码，将校验码附加在消息M之上，再进行加密。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E6%B7%BB%E5%8A%A0%E6%A0%A1%E9%AA%8C%E7%A0%81%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="添加校验码的消息认证过程">  </p><h5 id="基于公钥加密的消息认证过程"><a href="#基于公钥加密的消息认证过程" class="headerlink" title="基于公钥加密的消息认证过程"></a>基于公钥加密的消息认证过程</h5><p>　　在公开密钥加密体制中，发送方A可以使用自己的私钥$K_{AS}$对消息$M$进行加密，由于只有对应A的公钥$K_{AP}$才能正确解密出消息M，因此采用该方法可以对消息$M$的来源进行认证。同时，该方法和前面所讲的对称加密方法一样，在实际应用中需要在消息M加密之前附加一定的校验码来提高认证的能力。  </p><p>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%9F%BA%E4%BA%8E%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="基于公钥加密的消息认证过程">  </p><p>　　由于解密时使用的是A的公钥$K_{AP}$，因此该方法不能保证消息的机密性，要保证消息的机密性，必须使用接收方B的公钥$K_{BP}$。A可以先使用自己的私钥$K_{AP}$对消息进行加密，然后再使用接收方B的公钥$K_{BP}$进行加密，则同时既保证了机密性，又提供了消息认证的能力。  </p><h4 id="基于哈希函数的消息认证"><a href="#基于哈希函数的消息认证" class="headerlink" title="基于哈希函数的消息认证"></a>基于哈希函数的消息认证</h4><h5 id="使用哈希函数的消息认证过程"><a href="#使用哈希函数的消息认证过程" class="headerlink" title="使用哈希函数的消息认证过程"></a>使用哈希函数的消息认证过程</h5><p>　　哈希函数由于其单向性和抗碰撞性，因此常用来做消息认证。哈希函数以一个变长的消息$M$作为输入，产生一个具有固定长度的散列值$H(M)$，也称为消息摘要。散列值是原始消息的函数，原始信息任何内容的变化都将导致散列值的改变，因此可用于检测信息的完整性。  </p><p>　　简单的消息认证方法可以用通信双方的共享密钥$K$对散列值$H(M)$进行加密，将加密后的结果$C=E_K(H(M))$以附件的方式附着在消息$M$上进行传输，接收方收到消息后，只需对$C$进行解密，即可获得散列值$H(M)$，然后使用哈希函数对消息$M$计算另一个散列值$H(M)$，通过比较$H(M)$与$H\prime(M)$二者是否匹配，即可完成对消息进行的认证。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E4%BD%BF%E7%94%A8%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="基于哈希函数的消息认证">  </p><h5 id="保证机密性的哈希函数消息认证过程"><a href="#保证机密性的哈希函数消息认证过程" class="headerlink" title="保证机密性的哈希函数消息认证过程"></a>保证机密性的哈希函数消息认证过程</h5><p>　　若需要保证消息的机密性，可将散列值附加在消息上，并使用双方的会话密钥$K$对其进行加密，得到加密后的密文$C=E_K(M‖H(M)$，并对其进行传输。由于哈希函数的散列值具有对原始消息进行差错检测的能力，因此接收方可以通过这种方式来验证消息是否遭到篡改。因为只有使用通信双方所拥有的会话密钥$K$才能对密文进行解密，因此只要密钥不泄露就可验证消息来自正确的发送方，同时也保证了消息的机密性。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E4%BF%9D%E8%AF%81%E6%9C%BA%E5%AF%86%E6%80%A7%E7%9A%84%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="保证机密性的哈希函数消息认证过程">   </p><h5 id="混合加密认证"><a href="#混合加密认证" class="headerlink" title="混合加密认证"></a>混合加密认证</h5><p>　　采用公钥加密的方法同样可以用于消息认证。该方法是发送方A使用自己的私钥$K_{AS}$对散列值$H(M)$进行加密，将加密后的密文$C=E_{KAS}(H(M))$附在原始消息$M$上进行传输。接收方B只需使用A的公钥对密文进行解密，得到散列值$H(M)$后就能对消息进行认证。  </p><p>　　同样，如果保证消息的机密性，可使用接收方B的公钥$K_{BP}$对消息$M$和加密后的密文$C=E_{KAS}(H(M))$进行加密，得到新的密文$X=E_{KBP}(M‖E_{KAS}(H(M))$。由于使用了接收方B的公钥进行加密，因此只有正确的接收方B才能对密文进行正确解密，从而保证了消息的机密性的同时，也提供了认证的能力。  </p><p>　　采用公钥进行非对称加密能提供很好的机密性，而且与对称加密相比，密钥的管理相对容易。但由于非对称加密算法产生的密文不紧凑，加密速度慢，不适合加密数据量较大的消息，因此在实际使用中，常常将对称加密与公钥加密合起来一起使用。具体方法是使用一个对称密钥$K$对消息$M$和加密后的密文$C=E_{KAS}(H(M))$进行加密，再使用接收方B的公钥$K_{BP}$对密钥$K$进行加密，将两个加密结果进行传输。由于使用密钥$K$对消息进行了加密，同时使用了接收方的公钥$K_{BP}$对密钥$K$进行加密，因此只有正确的接收方B才能获得对称密钥$K$，保证了消息的机密性和认证功能。同时，由于对称加密的速度较快，因此在保证了安全性的基础上提高了运算的速度。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86%E8%AE%A4%E8%AF%81.jpg" srcset="/img/loading.gif" lazyload alt="混合加密认证过程">   </p><h4 id="基于消息认证码（MAC）的消息认证"><a href="#基于消息认证码（MAC）的消息认证" class="headerlink" title="基于消息认证码（MAC）的消息认证"></a>基于消息认证码（MAC）的消息认证</h4><h5 id="基于消息认证码的认证过程"><a href="#基于消息认证码的认证过程" class="headerlink" title="基于消息认证码的认证过程"></a>基于消息认证码的认证过程</h5><p>　　使用消息认证码进行消息认证，其基本思想与使用哈希函数类似，同样都是对消息产生个定长的输出，用于鉴别消息的完整性。然而使用哈希函数的时候往往需要对散列值进行加密，如果在不需要保证消息机密性的条件下，使用加密会影响速度。消息认证码在进行定长输出的时候，使用了一个密钥来和消息一起产生定长的输出，这个定长的输出就是消息认证码。  </p><p>　　使用过程：假设通信双方A、B拥有会话密钥$K$，用于产生MAC的函数为$C$。当发送方A要向接收方B发送消息M时，先计算出消息$M$的MAC值，即MAC=$C_K(M)$，然后将MAC值附加在消息$M$上一起发送给B。接收方B收到消息后，使用与发送方相同的会话密钥$K$计算出消息$M$的MAC值，然后与发送方A发送过来的MAC值进行比较，若二者匹配，则消息合法。由于共享密钥$K$只有A和B共享，攻击者想篡改消息$M$，但没有密钥$K$，那么计算出来的MAC值将与原先的MAC值不同，因此接收方B就能通过比较MAC值来判断消息的合法性。  </p><p>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%9F%BA%E4%BA%8E%E6%B6%88%E6%81%AF%E7%A0%81%E7%9A%84%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B.jpg" srcset="/img/loading.gif" lazyload alt="基于消息码的认证过程">  </p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><h3 id="数字签名的实现"><a href="#数字签名的实现" class="headerlink" title="数字签名的实现"></a>数字签名的实现</h3><h4 id="直接数字签名"><a href="#直接数字签名" class="headerlink" title="直接数字签名"></a>直接数字签名</h4><p>　　直接数字签名过程可以总结为以下步骤。<br>　　（1）发送方首先对被发送文件采用哈希函数进行运算，得到一个固定长度的数字串，称为报文摘要。<br>　　（2）发送方生成发送文件的报文摘要，用自己的私钥对摘要进行加密，形成发送方的数字签名$S$。<br>　　（3）这个数字签名将作为报文的附件和报文$M$一起发送给接收方。<br>　　（4）接收方接收到报文后，用同样的哈希算法计算出新的报文摘要，再用发送方的公钥对报文附件的数字签名进行解密，比较两个报文摘要，如果值相同，接收方就能确认该数是发送方。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E7%9B%B4%E6%8E%A5%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.jpg" srcset="/img/loading.gif" lazyload alt="直接数字签名">  </p><h4 id="仲裁数字签名"><a href="#仲裁数字签名" class="headerlink" title="仲裁数字签名"></a>仲裁数字签名</h4><p>　　在仲裁数字签名中，假设用户A与B要进行通信，每个从A发往B的签名报文首先都先发送给仲裁者C，C检验该报文及其签名的出处和内容，然后对报文注明日期，同时指明该报文已通过仲裁者的检验。仲裁者的引入解决了直接签名方案中所面临的问题，即发送方的否认行为。在这种方案中，仲裁者的地位十分关键和敏感，它必须是一个所有通信方都能充分信任的仲裁机构，也就是说仲裁者C必须是一个可信的系统。  </p><script type="math/tex; mode=display">\begin{aligned}A \longrightarrow C \longrightarrow B\end{aligned}</script><h5 id="方案1：采用对称加密算法的数字签名"><a href="#方案1：采用对称加密算法的数字签名" class="headerlink" title="方案1：采用对称加密算法的数字签名"></a>方案1：采用对称加密算法的数字签名</h5><p>　　设C是可信第三方，它能同时与A、B通信。它与A有共享密钥$K_A$，与B有共享密钥$K_B$。<br>　　（1）A产生报文$M$并计算其散列值$H(M)$，然后将附加了数字签名的报文发送给仲裁者C，并用$K_A$加密，数字签名由A的标识符$ID_A$ 和报文的散列值$H(M)$构成。<br>　　（2）仲裁者C对数字签名进行解密，验证其散列值是有效散列值。<br>　　（3）验证后，C向B发送一个报文，用$K_S$加密，该报文包括A的标识符$ID_A$、A发出的原始报文$M$、A的数字签名和时间戳$T$。<br>　　（4）B解密恢复出报文和签名。<br>　　时间戳$T$的作用是让B能够判断$M$是否是过时的报文。<br>　　上述方案可表述为：<br>　　（1）$A \longrightarrow C:M‖E_{KA}(ID_A‖H(M))$<br>　　（2）$C \longrightarrow B:E_{KB}(ID_A‖M‖E_{KA}(ID_A‖H(M‖T))$<br>　　在这种方案中，B不能直接验证A的签名，签名是用来解决争端的。B可以认定报文$M$来自A是因为$M$经过了C的验证，这种方案中通信双方A、B对C是高度信任的，即A可以相信C不会泄露$K_A$，因此不会产生伪造的签名。B也相信C发送的报文$M$是经过验证的，确实来自A。此外，A、B还必须相信C能公平地解决争端。<br>　　这种方案的缺陷在于报文$M$的内容是以明文的形式传送给仲裁者C，任何攻击者都能获取该消息。</p><h5 id="方案2：使用对称密码算法，密文传输"><a href="#方案2：使用对称密码算法，密文传输" class="headerlink" title="方案2：使用对称密码算法，密文传输"></a>方案2：使用对称密码算法，密文传输</h5><p>　　方案2是在方案1的基础上加强了数据的机密性。在此方案中，通信双方A、B使用共享密钥$K_S$来加密所要传送的报文$M$。A向C传送的报文中包含A的标识符$ID_A$、使用$K_S$加密原始报文$M$后的密文及数字签名，其中数字签名是由$ID_A$和加密报文的散列值构成的。仲裁者C经过检验，将收到的报文添加时间戳后，加密发送给接收方B。整个交互过程可以表述如下。<br>　　（1）$A \longrightarrow C:ID_A‖E_{KS}(M)‖E_{KA}(ID_A‖H(E_{KS}(M)))$<br>　　（2）$C \longrightarrow B:E_{KB}(ID_A‖E_{KS}(M)‖E_{KA}(ID_A‖H(E_{KS}(M))‖T)$<br>　　在这种方案中，尽管仲裁者C无法读取消息报文$M$中的内容，但他仍能防止A或B中任何一方的欺诈。但两种方案都存在的问题是：仲裁者C可能与发送方勾结来否认签名报文，或者与接收方共同伪造发送方的签名。</p><h5 id="方案3：使用公开密钥算法，密文传输"><a href="#方案3：使用公开密钥算法，密文传输" class="headerlink" title="方案3：使用公开密钥算法，密文传输"></a>方案3：使用公开密钥算法，密文传输</h5><p>　　针对上述两种方案的缺陷，采用公开密钥方案就能够迎刃而解。使用公开密钥进行数字签名时，A对报文$M$进行两次加密：先用其私钥$K_{AS}$对消息$M$进行加密，再用B的公钥$K_{BP}$加密，得到加密后的签名；A再用$K_{AS}$对其标识符$ID_A$和上述加密后的签名进行加密，然后连同$ID_A$一起发送给C。经过双重加密后，报文$M$只有B才能阅读，对C来说是安全的，但C能通过外层的解密，从而证实报文确实是来自A的（因为只有A有私钥$K_{AS}$）。C通过验证A的公/私钥对（$K_{AP}$和$K_{AS}$）的有效性完成对报文的验证。然后C再用自己的私钥$K_{CS}$对A的标识符IDA、双重加密后的M及时间戳进行加密后发送给B。整个交互过程可以表述如下：<br>　　（1）$A \longrightarrow C:ID_A‖(E_{KAS}(ID_A‖E_{KBP}(E_{KAS}(M)))$<br>　　（2）$C \longrightarrow B:E_{KCS}(ID_A‖K_{KBP}(E_{KAS}(M))‖T)$<br>　　采用公开密钥的数字签名方案具有许多优点：首先，通信前，通信各方没有任何共享信息，从而避免了联合欺诈；其次，A发给B的消息对其他人是保密的，包括C；最后，即使A的私钥$K_{AS}$已泄密或被盗，但C的私钥$K_{CS}$没有泄密，那么时间戳不正确的消息是不能被发送的。  </p><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="基于对称密钥的身份认证"><a href="#基于对称密钥的身份认证" class="headerlink" title="基于对称密钥的身份认证"></a>基于对称密钥的身份认证</h3><h4 id="基于对称密钥的双向身份认证"><a href="#基于对称密钥的双向身份认证" class="headerlink" title="基于对称密钥的双向身份认证"></a>基于对称密钥的双向身份认证</h4><h5 id="Needham-Schroeder协议"><a href="#Needham-Schroeder协议" class="headerlink" title="Needham-Schroeder协议"></a>Needham-Schroeder协议</h5><p>　　Needham-Schroeder协议利用KDC进行密钥分配，同时具备了身份认证的功能。假设通信双方A、B和KDC分别共享密钥$K_A$和$K_B$。<br>　　（1）$A \longrightarrow KDC:ID_A‖ID_B‖N_1$<br>　　（2）$KDC \longrightarrow A:E_{Ka}(K_S‖ID_B‖N_1‖E_{Kb}(K_S‖ID_A))$<br>　　（3）$A \longrightarrow B:E_{KB}(K_S‖ID_A)$<br>　　（4）$B \longrightarrow A:E_{KS}(N_2)$<br>　　（5）$A \longrightarrow B:E_{KS}(f(N_2))$<br>　　该协议的目的是要保证将会话密钥Ks安全地分配给A和B。<br>　　第1步，A将他的身份信息$ID_A$、B的身份信息$ID_B$及一个作为临时交互值的随机数$N_1$组成的消息发给KDC，表明A要与B认证并通信。<br>　　第2步，KDC产生A、B之间的会话密钥$K_S$，用KDC与B的共享密钥$K_B$对会话密钥$K_S$和A的身份信息$ID_A$进行加密，然后用它和A的共享密钥$K_A$对随机数$N_1$、B的身份信息$ID_B$、会话密钥$K_S$和已加密的信息进行加密，然后将它发送给A。<br>　　第3步，A将消息解密并获得$K_S$，比较$N_1$和第一步所发送的$N_1$是否一致，然后将KDC发来的用$K_B$加密的消息发送给B。<br>　　第4步，B对消息进行解密并获得$K_S$，然后产生另一随机数$N_2$，用$K_S$加密并发送给A。<br>　　第5步，A对消息解密，并用函数$f$产生新的结果，并用$K_S$加密，然后发给B。<br>　　第6步，B对消息解密，并验证它是否是$f$产生的结果。<br>　　在这个过程中，第4、5步可以防止某些重放攻击。例如，若攻击者窃听到第3步中的报文并进行重放，重放报文中的$K_S$是一个过期的会话密钥，若没有第4、5步的交互过程，B将试图使用这个过期密钥，从而产生混乱。<br>　　尽管如此，该协议仍然存在漏洞，容易受到重放攻击。例如，攻击者Ⅹ可能从某些途径获得一个过期的会话密钥。X就可以冒充A重放第3步的报文，欺骗B使用过期的会话密钥，除非B明确记得以前与A通信所使用的所有会话密钥，否则B无法确定是否是重放的消息。  </p><h5 id="Denning协议"><a href="#Denning协议" class="headerlink" title="Denning协议"></a>Denning协议</h5><p>　　Denning协议对Needham-Schroeder协议进行了修改，引入了时间戳机制，整个过程如下：<br>　　（1）$A \longrightarrow KDC:ID_A‖ID_B$<br>　　（2）$KDC \longrightarrow A:E_{Ka}(K_S‖ID_B‖T‖E_{Kb}(K_S‖ID_A‖T))$<br>　　（3）$A \longrightarrow B:E_{KB}(K_S‖ID_A‖T)$<br>　　（4）$B \longrightarrow A:E_{KS}(N_1)$<br>　　（5）$A \longrightarrow B:E_{KS}(f(N_1))$<br>　　时间戳$T$使A和B确信会话密钥$K_S$是最新产生的，这样A和B都知道此次交换的是一个新的会话密钥。A和B通过验证下列式子来验证密钥的及时性：  </p><script type="math/tex; mode=display">\begin{aligned}\vert c-T \vert <\Delta t_1 + \Delta t_2\end{aligned}</script><p>其中，$c$是本地时钟的时间值，$T$是报文携带的时间戳，$\Delta t_1$是KDC时钟与本地时钟的正常偏差，$\Delta t_2$是网络的正常时延值，满足该公式的时间戳被认为是合法的。由于是使用与KDC的共享密钥对时间戳进行加密，因此即使攻击者知道旧的会话密钥，也不能成功地重放消息，因为B可以根据消息的及时性检测出来。<br>　　与Needham-Schroeder协议相比，Denning协议的安全性更高，但同时也带来了新的问题，即如何安全准确地通过网络进行时钟同步。因此，该协议也存在着一定的危险，由于时钟同步机制的出错或受到破坏，通信各方的时钟不同步，协议将容易遭到重放攻击。例如，发送方的时钟快于接收方的时钟，攻击者可以窃听到发送端的报文，由于报文中的时间戳快于接收方的本地时间，攻击者可以等到接收方时钟等于报文时间戳时重放该报文，这种重放可能导致不可预知的结果，这样的攻击称为抑制-重放攻击。　　<br>　　解决抑制-重放攻击的一种方法是要求通信各方必须根据KDC的时钟周期性地校验时钟。另一种方法是基于随机数的临时交互值的认证协议，它不要求时钟同步，并且接收的临时交互值对发送方而言是不可预知的，从而不易受到抑制-重放攻击。  </p><h5 id="Neuman-Stubblebine协议"><a href="#Neuman-Stubblebine协议" class="headerlink" title="Neuman-Stubblebine协议"></a>Neuman-Stubblebine协议</h5><p>　　Neuman-Stubblebine协议提出目的是为了试图解决抑制-重放攻击，同时解决Needham-Schroeder协议中出现的问题：<br>　　（1）$A \longrightarrow B:ID_A‖N_1$<br>　　（2）$B \longrightarrow KDC:ID_B‖N_2‖E_{Kb}(ID_A‖N_1‖T)$<br>　　（3）$KDC \longrightarrow A:E_{KA}(ID_B‖N_1‖K_S‖T)‖E_{KB}(ID_A‖K_S‖T)‖N_2$<br>　　（4）$A \longrightarrow B:E_{KB}(ID_A‖K_S‖T)‖E_{KS}(N_2)$<br>　　第1步，A发起认证。A产生临时交互值$N_1$，连同自己的身份信息$ID_A$以明文的形式发送给B，$N_1$的作用是在进行密钥分发时将返回给A，A通过验证$N_1$的值来确认消息的时效性。<br>　　第2步，B向KDC申请会话密钥。B将A的身份信息$ID_A$、临时交互值$N_1$及时间戳$T$用他和KDC的共享密钥$K_B$加密，把加密结果、自己的身份信息$ID_B$和新的临时交互值$N_2$起发送给KDC。其中用$K_B$加密的数据$E_{KB}(ID_A‖N_1‖T)$的作用是请求KDC向A发布一个可信的“票据”，指定了“票据”的接收者、有效期，以及A发送的临时交互值N1。<br>　　第3步，KDC产生会话密钥$K_S$，然后产生两个消息。第一个消息是由B的身份信息$ID_B$、A的临时交互值$N_1$、会话密钥$K_S$和时间戳组成，并用他与A的共享密钥$K_A$加密；第二个消息是由A的身份信息$ID_A$、会话密钥$K_S$和时间戳组成，并用他与B的共享密钥$K_B$加密。将这两个消息连同B的临时交互值$N_2$一起发送给A。时间戳$T$给出了会话密钥的使用时限，$ID_B$用于证实B已经收到初始报文，$N_1$能够检测重放攻击。<br>　　第4步，A用KDC与B的共享密钥$K_B$加密的消息和加密后的$N_2$发送给B。B从加密消息中得到共享密钥并解密出$N_2$，通过比较$N_2$来鉴别消息是来自A还是一次重放攻击。<br>　　这个协议为A、B双方建立会话提供了一种安全有效的会话密钥交换方式。在协议中，时间戳$T$只是相对B的本地时钟，也只有B对其进行校验，因此不需要时钟的同步。同时，A可以保存用于鉴别B的消息，可以减少与KDC的多次交互。假设A、B完成了上面的协议和通信，然后终止连接，A要和B再次建立新的会话时，只要A保存了原有的消息，并在密钥的有效期限内，不必依赖KDC，就能够在3步之内重新进行身份认证。<br>　　（1）$A \longrightarrow B:E_{KB}[ID_A‖K_S‖T]‖N_1 \prime$<br>　　（2）$B \longrightarrow A:N_2 \prime ‖E_{KS}(N_1)$<br>　　（3）$A \longrightarrow B:E_{KS}(N_2)$<br>　　B在第1步收到消息后可以验证密钥有没有过期，新产生的N1、N2用来检测是否有重放攻击。  </p><h3 id="基于公钥的身份认证"><a href="#基于公钥的身份认证" class="headerlink" title="基于公钥的身份认证"></a>基于公钥的身份认证</h3><h4 id="基于公钥的双向身份认证"><a href="#基于公钥的双向身份认证" class="headerlink" title="基于公钥的双向身份认证"></a>基于公钥的双向身份认证</h4><h5 id="Denning-Sacco协议"><a href="#Denning-Sacco协议" class="headerlink" title="Denning-Sacco协议"></a>Denning-Sacco协议</h5><p>　　在公开密钥加密的身份认证中，也需要有一个类似的中心系统来分发通信各方的公开密钥证书。因为在没有认证中心或密钥分配中心的情况下，要使通信各方都能拥有对方的当前公钥是不切实际的。<br>　　Denning-Sacco协议是一种使用时间戳机制的公钥分配和认证方法。假设通信双方分别为A和B，AS为认证服务器。<br>　　（1）$A \longrightarrow AS:ID_A‖ID_B$<br>　　（2）$AS \longrightarrow A:E_{KSAS}(ID_A‖K_{PA}‖T)‖E_{KSAS}(ID_B‖K_{PB}‖T)$<br>　　（3）$A \longrightarrow B:E_{KSAS}(ID_A‖K_{PA}‖T)‖E_{KSAS}(ID_B‖K_{PB}‖T)‖E_{KPB}(E_{KSA}(K_S‖T)$<br>　　其中，$K_{PA}、K_{SA}、K_{PB}、K_{SB}$分别为A和B的公钥和私钥。$K_{PAS}$和$K_{SAS}$分别为AS的公钥和私钥。在这个协议中，认证中心系统不负责密钥的分配，而是提供公钥证书，所以称为认证服务器(AS)。会话密钥$K_S$的选择和加密完全由A来完成，因此不存在被AS泄露的危险。同时使用了时间戳机制，可以防止重放攻击对密钥安全性的威胁。<br>　　这个协议简洁明了，但不足之处仍然是需要严格的时钟同步才能保证协议的安全。  </p><h5 id="Woo-Lam协议"><a href="#Woo-Lam协议" class="headerlink" title="Woo-Lam协议"></a>Woo-Lam协议</h5><p>　　Woo-Lam协议使用随机数作为临时交互值来代替时间戳，它是一种以KDC为中心的认证协议。<br>　　（1）$A \longrightarrow KDC:ID_A‖ID_B$<br>　　（2）$KDC \longrightarrow A:E_{KSK}(ID_B‖K_{PB})$<br>　　（3）$A \longrightarrow B:E_{KPB}(N_1‖ID_A)$<br>　　（4）$B \longrightarrow KDC:ID_B‖ID_A‖E_{KPK}(N_1)$<br>　　（5）$KDC \longrightarrow B:E_{KSK}(ID_A‖K_{PA})‖E_{KPB}(E_{KSK}(N_1‖K_S‖ID_B))$<br>　　（6）$B \longrightarrow A:E_{KPA}(E_{KSK}(N_1‖K_S‖ID_B)‖N_2)$<br>　　（7）$A \longrightarrow B:E_{KS}(N_2)$<br>　　其中，$K_{PK}$和$K_{SK}$分别是KDC的公钥和私钥。在协议刚开始，A向KDC发送一个要和B建立安全连接的请求，KDC将B的公钥证书副本返回给A，A通过B的公钥告诉B想与他通信，同时将临时交互值$N_1$发给B。然后，B向KDC请求A的公钥证书和会话密钥，由于B发送消息中包含A的临时交互值，因此KDC可以用临时交互值对会话密钥加戳，其中临时交互值受KDC的公钥保护。接着，KDC将A的公钥证书的副本和消息$\{N_1，K_S，ID_B\}$一起返回给B。这条消息说明，$K_S$是KDC为B产生的且与$N_1$有关的密钥。$N_1$使A确信$K_S$是新会话密钥。用KDC的私钥对三元组$\{N_1，K_S，ID_B\}$加密，使得B可以验证该三元组确实来自KDC。由于是用B的公钥对该三元组加密，因此其他各方均不能利用该三元组与A建立假冒连接。在第6步，B用A的公钥对$E_{KSA}(N_1‖K_S‖ID_B)$和B产生的随机数$N_2$加密后发送给A，A先解密得出会话密钥$K$，然后用$K_S$对$N_2$加密发送给B，这样可以使B确信A已经获得正确的会话密钥。<br>　　相比 Denning-Sacco协议，这个协议对抵抗攻击的能力更强，但也存在着某些安全隐患。改进的方法是在第5步和第6步中加入A的身份信息$ID_A$，将会话密钥与双方的身份信息绑定在一起。将$ID_A$和$N_1$绑定在一起唯一标识了A的连接请求。具体过程如下：<br>　　（1）$A \longrightarrow KDC:ID_A‖ID_B$<br>　　（2）$KDC \longrightarrow A:E_{KSK}(ID_B‖K_{PB})$<br>　　（3）$A \longrightarrow B:E_{KPB}(N_1‖ID_A)$<br>　　（4）$B \longrightarrow KDC:ID_B‖ID_A‖E_{KPK}(N_1)$<br>　　（5）$KDC \longrightarrow B:E_{KSK}(ID_A‖K_{PA})‖E_{KPB}(E_{KSK}(N_1‖K_S‖ID_A‖ID_B))$<br>　　（6）$B \longrightarrow A:E_{KPA}(E_{KSK}(N_1‖K_S‖ID_A‖ID_B)‖N_2)$<br>　　（7）$A \longrightarrow B:E_{KS}(N_2)$  </p><h1 id="第4章-计算机病毒"><a href="#第4章-计算机病毒" class="headerlink" title="第4章 计算机病毒"></a>第4章 计算机病毒</h1><h2 id="计算机病毒的特征及分类"><a href="#计算机病毒的特征及分类" class="headerlink" title="计算机病毒的特征及分类"></a>计算机病毒的特征及分类</h2><h3 id="计算机病毒的特征"><a href="#计算机病毒的特征" class="headerlink" title="计算机病毒的特征"></a>计算机病毒的特征</h3><h4 id="传染性"><a href="#传染性" class="headerlink" title="传染性"></a>传染性</h4><p>　　传染性是病毒的基本特征，是判断一个程序是否为计算机病毒的最重要的特征。病毒能通过自我复制来传染正常文件，达到破坏计算机正常运行的目的。但它的传染是有条件的，也就是病毒程序必须被执行之后才具有传染性，才能传染其他文件。病毒一旦进入计算机系统，就会开始寻找机会感染其他文件。<br>　　计算机病毒的主要传播渠道有硬盘、光盘、可移动存储器、网页、电子邮件和FTP下载等。  </p><h4 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h4><p>　　任何计算机病毒感染了系统后，都会对系统产生不同程度的影响。病毒都是可执行程序或代码，当病毒代码运行时就会降低系统的工作效率，占用系统资源。病毒发作时的破坏程度取决于病毒设计者。轻则占用系统资源，影响计算机运行速度，降低计算机工作效率，使用户不能正常使用计算机；重则毁坏系统，破坏用户计算机中的数据并使之无法恢复，甚至破坏计算机硬件，给用户带来巨大的损失。  </p><h4 id="隐蔽性"><a href="#隐蔽性" class="headerlink" title="隐蔽性"></a>隐蔽性</h4><p>　　计算机病毒具有很强的隐蔽性，它一般都是具有很高编程技巧的、短小精悍的代码，通常附在正常的程序之中或藏在磁盘隐秘的地方。没有经过代码分析是很难将病毒程序和正常程序区分开的。有些病毒采用了极其高明的手段来隐藏自已，如使用隐藏文件、注册表内的相似字符等，而且有的病毒在感染了系统之后，计算机系统仍能正常工作，用户不会感到有任何异常，普通用户无法在正常的情况下发现病毒。  </p><h4 id="寄生性"><a href="#寄生性" class="headerlink" title="寄生性"></a>寄生性</h4><p>　　一般情况下，计算机病毒都不会独立存在，而是寄生于其他程序中，当执行这个程序时，病毒代码就会被执行。病毒寄生在其他程序中的同时，也进行感染扩散，病毒潜伏寄生的时间越长，感染的范围也就越大，对用户造成的影响也就越大。在未满足触发条件或正常程序未启动之前，用户是不易发觉病毒的存在的。  </p><h4 id="可触发性"><a href="#可触发性" class="headerlink" title="可触发性"></a>可触发性</h4><p>　　大部分病毒感染系统之后一般不会马上发作，而是隐藏在系统中，就像定时炸弹一样，只有在满足特定条件时才被触发。潜伏机制是计算机病毒内部的一种机制，在不满足触发条件时，病毒只会感染而不做破坏，只有在触发条件满足的情况下才会表现出来。例如黑色星期五病毒，不到预定时间，用户就不会觉察出异常。一旦遇到13日并且是星期五，病毒就会被激活并且对系统进行破坏。当然，还有著名的CIH病毒，它是在每月的26日发作。  </p><h2 id="计算机病毒制作与反病毒技术"><a href="#计算机病毒制作与反病毒技术" class="headerlink" title="计算机病毒制作与反病毒技术"></a>计算机病毒制作与反病毒技术</h2><h3 id="病毒的检测"><a href="#病毒的检测" class="headerlink" title="病毒的检测"></a>病毒的检测</h3><h5 id="特征代码法"><a href="#特征代码法" class="headerlink" title="特征代码法"></a>特征代码法</h5><p>　　特征代码技术是根据病毒程序的特征，如感染标记、特征程序段内容、文件长度变化、文件校验和变化等对病毒进行分类处理，而后在程序运行中凡有类似的特征点出现，则认定是病毒，是早期病毒检测技术的主要方法，也是大多数反病毒软件的静态扫描方法。一般认为，特征代码法是检测已知病毒的最简单、开销最小的方法。<br>　　特征代码法的工作原理是对每种病毒样本抽取特征代码，根据该特征代码进行病毒检测。主要依据原则为：抽取的代码比较特殊，不大可能与普通正常程序代码吻合。抽取的代码要有适当的长度，一方面维持特征代码的唯一性，也就是说一定要具有代表性，使用所选的特征代码都能够正确地检查出它所代表的病毒。如果病毒特征代码选择得不准确，就会带来误报（发现的不是病毒）或漏报（真正病毒没有发现）。另一方面不要有太大的时间和空间的开销。一般是在保持唯一性的前提下，尽量使特征代码长度短些，以减少时间和空间的开销。用每一种病毒代码中含有的特定字符或字符串对被检测的对象进行扫描，如果在被检测对象内部发现某种特定字符或字符串，则表明发现了该字符或字符串代表的病毒前面介绍传染机制时提到的感染标记就是一种识别病毒的特定字符。实现这种扫描的软件称为特征扫描器。根据特征代码法的工作原理，特征扫描器由病毒特征代码库和扫描引擎两部分组成。病毒特征代码库包含了经过特别选定的各种病毒的反映其特征的字符或字符串。扫描引擎利用病毒特征代码库对检测对象进行匹配性扫描，一日有匹配便发出报警显然，病毒特征代码库中的病毒特征代码越多。<br>　　扫描引擎能识别的病毒也就越多特征代码法的优点是检测速度快，误报警率低，能够准确地查出病毒并确定病毒的种类和名称，为消除病毒提供确切的信息。缺点是不能检测出未知病毒、变种病毒和隐蔽性病毒，需要定期更新病毒资料库，具有滞后性，同时，搜集已知病毒的特征代码费用开销大。  </p><h5 id="校验和法"><a href="#校验和法" class="headerlink" title="校验和法"></a>校验和法</h5><p>　　校验和法的工作原理是计算正常文件内容的校验和，将该校验和写入文件中或写入别的文件中保存。在文件使用过程中，定期地或每次使用文件前，检查文件当前内容算出的校验和与原来保存的校验和是否一致，如果不一致便发出染毒报警。<br>　　运用校验和法检测病毒一般采用以下3种方式。<br>　　（1）在检测病毒工具中纳入校验和法，对被查对象文件计算其正常状态的校验和，将校验和值写入被查文件中或检测工具中，然后进行比较。<br>　　（2）在应用程序中放入校验和自动检查功能，将文件正常状态的校验和写人文件本身中，每当应用程序启动时，比较当前校验和与原校验和的值，实现应用程序的自检测。<br>　　（3）将校验和检査程序常驻内存，每当应用程序开始运行时，自动比较检查应用程序内容或别的文件中预先保存的校验和。  </p><p>　　校验和法既能发现已知病毒，也能发现未知病毒，但是，它不能识别病毒种类，不能报出病毒名称。由于病毒感染并非文件内容改变的唯一性原因，文件内容的改变有可能是正常程序引起的，如软件版本更新、变更口令及修改运行参数等，因此校验和法常常有虚假报警，而且此法也会影响文件的运行速度。另外，校验和法对某些隐蔽性极好的病毒无效。这种病毒进驻内存后，会自动剥去染毒程序中的病毒代码，使校验和法受骗，对一个有毒文件算出正常校验和。因此，校验和法的优点是方法简单，能发现未知病毒，被查文件的细微变化也能发现；其缺点是必须预先记录正常状态的校验和，会有虚假报警，不能识别病毒名称不能对付某些隐蔽性极好的病毒。  </p><h5 id="行为监测法"><a href="#行为监测法" class="headerlink" title="行为监测法"></a>行为监测法</h5><p>　　行为监测法是常用的行为判定技术，其工作原理是利用病毒的特有行为特征进行检测，旦发现病毒行为则立即报警。经过对病毒多年的观察和研究，人们发现病毒的一些行为是病毒共有的，而且比较特殊。在正常程序中，这些行为比较罕见，如一般引导型病毒都会占用INT 13H；病毒常驻内存后，为防止操作系统将其覆盖，必须修改系统内存总量；对COM、EXE文件必须执行写入操作；染毒程度运行时，先运行病毒，后执行宿主程序，两者切换等许多特征行为。行为监测法就是引入一些人工智能技术，通过分析检查对象的逻辑结构，将其分为多个模块，分别引入虚拟机中执行并监测，从而查出使用特定触发条件的病毒。<br>　　行为监测法的优点在于不仅可以发现已知病毒，而且可以相当准确地预报未知的多数病毒。但也有其缺点，即可能虚假报警和不能识别病毒名称，而且实现起来有一定难度。  </p><h5 id="软件模拟法"><a href="#软件模拟法" class="headerlink" title="软件模拟法"></a>软件模拟法</h5><p>　　变种病毒每次感染都变化其病毒代码，对付这种病毒，特征代码法失效，因为变种病毒代码实施密码化，而且每次所用的密钥不同，把染毒的代码相互比较也无法找出相同的可能作为特征的稳定代码。虽然行为监测法可以检测出变种病毒，但在检测出病毒后，因为病毒的种类不知道，也无法做杀毒处理。<br>　　软件模拟法是新的病毒检测工具所使用的方法之一。该工具开始运行时，使用特征代码法检测病毒，如果发现有隐蔽性病毒或变种病毒的嫌疑时，启动软件模拟模块。软件模拟法模拟CPU的执行，在其设计的虚拟机下执行病毒的变体引擎解码程序，安全地将变种病毒解开，监视病毒的运行，使其露出本来的面目，再加以扫描。待病毒自身的密码译码以后，再运用特征代码法来识别病毒的种类。  </p><p>　　总地来说，特征代码法查杀已知病毒比较安全彻底，实施比较简单，常用于静态扫描模块中；其他几种方法适用于查杀未知病毒和变种病毒，但误报率高，实施难度大，在常驻内存的动态监测模块中发挥重要作用。  </p><h1 id="第5章-网络攻击与防范技术"><a href="#第5章-网络攻击与防范技术" class="headerlink" title="第5章 网络攻击与防范技术"></a>第5章 网络攻击与防范技术</h1><h2 id="网络攻击概述和分类"><a href="#网络攻击概述和分类" class="headerlink" title="网络攻击概述和分类"></a>网络攻击概述和分类</h2><h3 id="网络攻击的步骤概览"><a href="#网络攻击的步骤概览" class="headerlink" title="网络攻击的步骤概览"></a>网络攻击的步骤概览</h3><p>　　（1）目标探测。攻击者在攻击之前的首要任务，就是明确攻击目标是单个主机还是整个网段，并了解目标的具体网络信息等。<br>　　（2）端口扫描。通过端口扫描可以搜集到目标主机的各种有用信息，包括端口是否开放，能否匿名登录，等等。<br>　　（3）网络监听。黑客可以借助网络监听技术对其他用户进行攻击，同时也可以截获用户名、口令等有用信息。<br>　　（4）实施攻击。采用有效的方式对目标主机进行攻击，如缓冲区溢出、DoS等。<br>　　（5）撤退。留下后门，消除攻击的痕迹。  </p><h2 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h2><p>　　DoS（Denial of service，拒绝服务）攻击是一种既简单又有效的攻击方式。它是针对系统的可用性发起的攻击，通过某些手段使得目标系统或网络不能提供正常的服务。该攻击主要是利用了TCP/IP中存在的设计缺陷，或者操作系统及网络设备的网络协议栈存在的实现缺陷。<br>　　一些商业及政府网站都曾经遭受拒绝服务攻击。在2000年2月发生的一次针对某些高利润的站点（如雅虎、易趣等）的拒绝服务攻击持续了近两天，使这些公司遭受了很大的损失，事后这些攻击确定为分布式的拒绝服务攻击。<br>　　从攻击技术来看，υoS攻击表现为带宽消耗、系统资源消耗、程序实现上的缺陷、系统策略的修改等几种。带宽消耗是通过网络发送大量信息，用足够的传输信息消耗掉有限的带宽资源。系统资源消耗是向系统发送大量信息，针对操作系统中有限的资源，如进程数、磁盘、CPU、内存、文件句柄等。利用程序实现上的缺陷，对异常行为的不正确处理，通过发送些非法数据包使系统死机或重启，如 Ping of Death。修改或篡改系统策略也可以使得它不能提供正常的服务。<br>　　从攻击目标来看，有通用类型的DoS攻击和系统相关的攻击。通用类型的DoS攻击往往是与具体系统无关的，如针对协议设计缺陷的攻击。系统相关的攻击往往与具体的实现有关。最终，所有的攻击都是与系统相关的，因为有些系统可以针对协议的缺陷提供一些补救措施，从而免受此类攻击。<br>　　一些典型的DoS攻击有 Ping of Death、Teardrop、UDP Flooding、Land、SYN Flooding和Smurf等。  </p><h1 id="第6章-防火墙技术"><a href="#第6章-防火墙技术" class="headerlink" title="第6章 防火墙技术"></a>第6章 防火墙技术</h1><h2 id="防火墙的体系结构"><a href="#防火墙的体系结构" class="headerlink" title="防火墙的体系结构"></a>防火墙的体系结构</h2><h3 id="堡垒主机体系结构"><a href="#堡垒主机体系结构" class="headerlink" title="堡垒主机体系结构"></a>堡垒主机体系结构</h3><p>　　堡垒主机体系结构在某些地方也称为筛选路由器体系结构。堡垒主机是内部网在 Internet上的代表。堡垒主机是任何外来访问者都可以连接、访问的。通过该堡垒主机，防火墙内的系统可以对外操作，外部网用户也可以获取防火墙内的服务。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%A0%A1%E5%9E%92%E4%B8%BB%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg" srcset="/img/loading.gif" lazyload alt="堡垒主机体系结构示意图"><br>　　堡垒主机是一种被强化的可以防御攻击的计算机，被暴露于因特网之上，作为进入内部网络的一个检查点（checkpoint），以达到把整个网络的安全问题集中在某个主机上解决。正是由于这个原因，防火墙的建造者和防火墙的管理者应尽力给予其保护，特别是在防火墙的安装和初始化的过程中应予以仔细保护。  </p><h3 id="双宿主主机体系结构"><a href="#双宿主主机体系结构" class="headerlink" title="双宿主主机体系结构"></a>双宿主主机体系结构</h3><p>　　双宿主主机的防火墙系统由一台装有两个网卡的堡垒主机构成。两个网卡分别与外部网及内部网相连。堡垒主机上运行防火墙软件，可以转发数据、提供服务等。堡垒主机将防止在外部网络和内部系统之间建立任何直接的连接，可以确保数据包不能直接从外部网络到达内部网络。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%8F%8C%E5%AE%BF%E4%B8%BB%E4%B8%BB%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" srcset="/img/loading.gif" lazyload alt="双宿主主机体系结构示意图"><br>　　双宿主主机有两个接口，具有以下特点。<br>　　（1）两个端口之间不能进行直接的IP数据包的转发。<br>　　（2）防火墙内部的系统可以与双宿主主机进行通信，同时防火墙外部的系统也可以与双宿主主机进行通信，但二者之间不能直接进行通信。<br>　　这种体系结构的优点是结构非常简单，易于实现，并且具有高度的安全性，可以完全阻止内部网络与外部网络通信。  </p><h3 id="屏蔽主机体系结构"><a href="#屏蔽主机体系结构" class="headerlink" title="屏蔽主机体系结构"></a>屏蔽主机体系结构</h3><p>　　双宿主主机体系结构是由一台同时连接在内外部网络之间的双宿主主机提供安全保障的，而屏蔽主机体系结构则不同，在屏蔽主机体系结构提供安全保护的主机仅仅与内部网相连。另外，主机过滤还有一台单独的过滤路由器。包过滤路由器应避免用户直接与代理服务器相连。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%B1%8F%E8%94%BD%E4%B8%BB%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" srcset="/img/loading.gif" lazyload alt="屏蔽主机体系结构示意图"><br>　　这种结构的堡垒主机位于内部网络，而过滤路由器按以下规则过滤数据包：任何外部网（如 Internet）的主机都只能与内部网的堡垒主机建立连接，甚至只有提供某些类型服务的外部网主机才被允许与堡垒主机建立连接。任何外部系统对内部网络的操作都必须经过堡垒主机，同时堡垒主机本身就要求有较全面的安全维护。包过滤系统也允许堡垒主机与外部网进行一些“可以接受（即符合站点的安全规则）”的连接。  </p><h3 id="屏蔽子网体系结构"><a href="#屏蔽子网体系结构" class="headerlink" title="屏蔽子网体系结构"></a>屏蔽子网体系结构</h3><p>　　屏蔽子网体系结构也称为屏蔽子网网关体系结构，就是在屏蔽主机体系结构中的内部网和外部网之间再增加一个被隔离的子网，这个子网由堡垒主机、应用级网关等公用服务器组成，习惯上将这个子网称为“非军事区”（De Militarised Zone，DMZ）。在屏蔽主机体系结构中，堡垒主机最易受到攻击，尽管可以对它提供最大限度的保护，但因其为入侵者首先能攻击到的机器，所以它仍然是整个系统最容易出问题的环节。<br>　　用边界网络来隔离堡垒主机与内部网，能减轻入侵者在攻破堡垒主机后带给内部网的压力。人侵者即使攻破堡垒主机也不可能对内部网进行任意操作，而只可能进行部分操作。<br>　　在最简单的屏蔽子网体系结构中，有两台都与边界网络相连的过滤路由器，一台位于边界网络与内部网络之间，而另一台位于边界网络与外部网络之间。在这种结构下，入侵者要攻击到内部网必须通过两台路由器的安全控制，即使入侵者通过了堡垒主机，它还必须通过内部路由器才能抵达内部网，因此整个网络安全机制就不会因一个站点攻破而全部瘫痪。<br>　　<img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%8D%E4%B9%A0/%E5%B1%8F%E8%94%BD%E5%AD%90%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" srcset="/img/loading.gif" lazyload alt="屏蔽子网体系结构示意图">  </p><h1 id="第7章-入侵检测技术"><a href="#第7章-入侵检测技术" class="headerlink" title="第7章 入侵检测技术"></a>第7章 入侵检测技术</h1><h2 id="入侵检测系统的特点和分类"><a href="#入侵检测系统的特点和分类" class="headerlink" title="入侵检测系统的特点和分类"></a>入侵检测系统的特点和分类</h2><h3 id="入侵检测系统的分类"><a href="#入侵检测系统的分类" class="headerlink" title="入侵检测系统的分类"></a>入侵检测系统的分类</h3><h4 id="基于主机的入侵检测系统"><a href="#基于主机的入侵检测系统" class="headerlink" title="基于主机的入侵检测系统"></a>基于主机的入侵检测系统</h4><p>　　基于主机的入侵检测系统通常安装在需要重点检测的主机上，主要是对该主机的网络实时连接及系统审计日志进行智能分析和判断。<br>　　由于基于主机的入侵检测系统必须安装在需要保护的设备上，这必定降低该设备的工作效率。另外，全面部署主机入侵检测系统代价较大，任何企业都无法将所有主机用主机入侵检测系统保护，只能选择其中的一部分。此时，那些未安装主机入侵检测系统的机器将成为保护的盲点，入侵者可利用这些机器达到攻击目标。因此，随着网络使用的频繁程度越来越高，基于主机入侵检测系统将无法适应这种局面，它只能作为网络入侵检测的一个有力补充。  </p><h4 id="基于网络的入侵检测系统"><a href="#基于网络的入侵检测系统" class="headerlink" title="基于网络的入侵检测系统"></a>基于网络的入侵检测系统</h4><p>　　NIDS在混杂模式下监视网段中传输的各种数据包，并对这些数据包的内容、源地址、目的地址等进行分析和检测。如果发现入侵行为或可疑事件，人侵检测系统就会发出警报，甚至切断网络连接。它通常安装在网络上比较重要的网段，也可以说容易出问题的网段，利用网络侦听技术，通过对网络上的数据流进行捕捉、分析，以判断是否存在入侵。它以网络上传输的信息包为主要研究对象，保护网络的运行。<br>　　基于网络的IDS成本低，只需要在网络的关键点进行部署即可，其次对那些基于协议入侵的行为有很好的防范作用，并且对攻击进行实时响应，而与主机操作系统无关。但是随着网络上传送的数据包的日益庞大，对每个数据包进行捕获分析已经不太现实了，这将严重增加系统的负荷，丟包现象将逐渐增多，从而影响NIDS的性能。  </p><p>　　基于对上述两种IDS的分析，分布式入侵检测系统已经是现在和将来入侵检测系统应用发展的必然趋势。  </p><h4 id="分布式入侵检测系统"><a href="#分布式入侵检测系统" class="headerlink" title="分布式入侵检测系统"></a>分布式入侵检测系统</h4><p>　　典型的DIDS是管理端/传感器结构。NIDS作为传感器放置在网络的各个地方，并向中央管理平台汇报情况。攻击日志定时地传送到管理平台并保存在中央数据库中，新的攻击特征库能发送到各个传感器上。每个传感器能根据所在网络的实际需要配置不同的规则集，报警信息能发到管理平台的消息系统，用各种方式通知IDS管理员。<br>　　对DIDS来说，传感器可以使用NIDS或 HIDS，或者同时使用，而且传感器有的工作在混杂模式，有的工作在非混杂模式，然而无论什么情况，DIDS都有一个显著的特征，即分布在网络不同位置的传感器都向中央管理平台传送报警和日志信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第1章-计算机信息安全技术概述&quot;&gt;&lt;a href=&quot;#第1章-计算机信息安全技术概述&quot; class=&quot;headerlink&quot; title=&quot;第1章 计算机信息安全技术概述&quot;&gt;&lt;/a&gt;第1章 计算机信息安全技术概述&lt;/h1&gt;&lt;h2 id=&quot;信息安全模型&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]ZBG财经求职力挑战赛[pyecharts数据可视化]</title>
    <link href="http://meurice.xyz/2021/ckotxwiir000k4wlxcy3u294w/"/>
    <id>http://meurice.xyz/2021/ckotxwiir000k4wlxcy3u294w/</id>
    <published>2021-05-08T16:11:00.000Z</published>
    <updated>2021-05-10T09:49:25.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h2><p>　　<strong>题目1：</strong><br>　　分析小米公司手机业务目前所处的宏观经营环境以及产业环境。<br>　　<strong>题目2：</strong><br>　　为小米公司制定未来三年手机业务发展策略，帮助小米公司：<br>　　　－　维持在低端手机市场的占有率<br>　　　－　突破高端市场，实现更高的高端手机出货量</p><h2 id="pyecharts自适应显示"><a href="#pyecharts自适应显示" class="headerlink" title="pyecharts自适应显示"></a>pyecharts自适应显示</h2><p>　　 <strong>-</strong> 1. 获取浏览器窗口长宽<br>　　 <strong>-</strong> 2. 设置显示区域长款百分比<br>　　 <strong>-</strong> 3. 设置居中参数<br>　　 <strong>-</strong> 4. 设置自适应（根据显示区域调整刷新）  </p><p>　　<strong>step1.</strong> 修改.\Lib\site-packages\pyecharts\render\templates\ <strong>macro</strong><br><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">macro</span></span> render_chart_content(c) -%&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"chart-container"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width:95%; height:95%; margin:auto; top:30px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">        var chart_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml"> = echarts.init(</span><br><span class="xml">            document.getElementById('</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml">'), '</span><span class="hljs-template-variable">&#123;&#123; c.theme &#125;&#125;</span><span class="xml">', &#123;renderer: '</span><span class="hljs-template-variable">&#123;&#123; c.renderer &#125;&#125;</span><span class="xml">'&#125;);</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">for</span></span> js in c.js_functions.items %&#125;</span><br><span class="xml">            </span><span class="hljs-template-variable">&#123;&#123; js &#125;&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br><span class="xml">        var option_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml"> = </span><span class="hljs-template-variable">&#123;&#123; c.json_contents &#125;&#125;</span><span class="xml">;</span><br><span class="xml">        chart_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml">.setOption(option_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml">);</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">if</span></span> c._is_geo_chart %&#125;</span><br><span class="xml">            var bmap = chart_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml">.getModel().getComponent('bmap').getBMap();</span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">if</span></span> c.bmap_js_functions %&#125;</span><br><span class="xml">                </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">for</span></span> fn in c.bmap_js_functions.items %&#125;</span><br><span class="xml">                    </span><span class="hljs-template-variable">&#123;&#123; fn &#125;&#125;</span><br><span class="xml">                </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endfor</span></span> %&#125;</span><br><span class="xml">            </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">if</span></span> c.width.endswith('%') %&#125;</span><br><span class="xml">            window.addEventListener('resize', function()&#123;</span><br><span class="xml">                chart_</span><span class="hljs-template-variable">&#123;&#123; c.chart_id &#125;&#125;</span><span class="xml">.resize();</span><br><span class="xml">            &#125;)</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-keyword">endif</span></span> %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>   </span><br><span class="xml">    var x=window.innerWidth;</span><br><span class="xml">    function resizeFresh()&#123;</span><br><span class="xml">        if(x!=window.innerWidth)</span><br><span class="xml">            location.reload();</span><br><span class="xml">    &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;%- <span class="hljs-name"><span class="hljs-keyword">endmacro</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><br>　　<strong>step2.</strong> 修改.\Lib\site-packages\pyecharts\render\templates\ <strong>simple_chart.html</strong><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">import</span> 'macro' <span class="hljs-keyword">as</span> macro %&#125;</span><br><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; chart.page_title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes"</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; macro.render_chart_dependencies(chart) &#125;&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span></span><br><span class="xml">        html,body&#123;</span><br><span class="xml">            height:100%;</span><br><span class="xml">            width:100%</span><br><span class="xml">    &#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onresize</span>=<span class="hljs-string">"resizeFresh()"</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-variable">&#123;&#123; macro.render_chart_content(chart) &#125;&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><h2 id="可视化分析-pyecharts"><a href="#可视化分析-pyecharts" class="headerlink" title="可视化分析[pyecharts]"></a>可视化分析[pyecharts]</h2><p>　　pyecharts相关配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">!jupyter trust Visualization.ipynb<br><br><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">'ignore'</span>)<br><br><span class="hljs-keyword">from</span> pyecharts.globals <span class="hljs-keyword">import</span> CurrentConfig, NotebookType, OnlineHostType<br><span class="hljs-comment">#http://127.0.0.1:8000/assets/</span><br><br>CurrentConfig.ONLINE_HOST = <span class="hljs-string">'https://assets.pyecharts.org/assets/'</span><br>CurrentConfig.NOTEBOOK_TYPE = NotebookType.JUPYTER_LAB<br><br>CurrentConfig.ONLINE_HOST<br></code></pre></td></tr></table></figure></p><h3 id="全球手机出货量-市场份额数据可视化"><a href="#全球手机出货量-市场份额数据可视化" class="headerlink" title="全球手机出货量/市场份额数据可视化"></a>全球手机出货量/市场份额数据可视化</h3><p> 　　剔除部分有缺失的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">GSMS = pd.read_csv(<span class="hljs-string">'Global_Smartphone_Market_Share.csv'</span>).iloc[:,<span class="hljs-number">0</span>:<span class="hljs-number">5</span>]<br><br>print(<span class="hljs-string">'deleted:'</span>,set(GSMS.iloc[np.where(GSMS.isnull())[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>].tolist()))<br>GSMS = GSMS[~GSMS.Vendor.isin(GSMS.iloc[np.where(GSMS.isnull())[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>].tolist())]<br><br>display(GSMS)<br></code></pre></td></tr></table></figure><br>　　<br>　　deleted: {‘Lenovo’, ‘Realme’, ‘LG’}  </p><div class="table-container"><table><thead><tr><th>Index</th><th>品牌</th><th>年份</th><th>季度</th><th>出货量（百万）</th><th>市场份额</th></tr></thead><tbody><tr><td>0</td><td>Samsung</td><td>2018</td><td>Q1</td><td>78.2</td><td>22.0%</td></tr><tr><td>1</td><td>Samsung</td><td>2018</td><td>Q2</td><td>71.5</td><td>19.0%</td></tr><tr><td>2</td><td>Samsung</td><td>2018</td><td>Q3</td><td>72.3</td><td>19.0%</td></tr><tr><td>3</td><td>Samsung</td><td>2018</td><td>Q4</td><td>69.8</td><td>18.0%</td></tr><tr><td>4</td><td>Samsung</td><td>2019</td><td>Q1</td><td>72.0</td><td>21.0%</td></tr><tr><td>5</td><td>Samsung</td><td>2019</td><td>Q2</td><td>76.3</td><td>21.0%</td></tr><tr><td>6</td><td>Samsung</td><td>2019</td><td>Q3</td><td>78.2</td><td>21.0%</td></tr><tr><td>7</td><td>Samsung</td><td>2019</td><td>Q4</td><td>70.4</td><td>18.0%</td></tr><tr><td>8</td><td>Samsung</td><td>2020</td><td>Q1</td><td>58.6</td><td>20.0%</td></tr><tr><td>9</td><td>Samsung</td><td>2020</td><td>Q2</td><td>54.2</td><td>20.0%</td></tr><tr><td>10</td><td>Samsung</td><td>2020</td><td>Q3</td><td>80.4</td><td>22.0%</td></tr><tr><td>11</td><td>Samsung</td><td>2020</td><td>Q4</td><td>62.5</td><td>16.0%</td></tr><tr><td>12</td><td>Samsung</td><td>2021</td><td>Q1</td><td>76.6</td><td>22.0%</td></tr><tr><td>13</td><td>Apple</td><td>2018</td><td>Q1</td><td>52.2</td><td>14.0%</td></tr><tr><td>14</td><td>Apple</td><td>2018</td><td>Q2</td><td>41.3</td><td>11.0%</td></tr><tr><td>15</td><td>Apple</td><td>2018</td><td>Q3</td><td>46.9</td><td>12.0%</td></tr><tr><td>16</td><td>Apple</td><td>2018</td><td>Q4</td><td>65.9</td><td>17.0%</td></tr><tr><td>17</td><td>Apple</td><td>2019</td><td>Q1</td><td>42.0</td><td>12.0%</td></tr><tr><td>18</td><td>Apple</td><td>2019</td><td>Q2</td><td>36.5</td><td>10.0%</td></tr><tr><td>19</td><td>Apple</td><td>2019</td><td>Q3</td><td>44.8</td><td>12.0%</td></tr><tr><td>20</td><td>Apple</td><td>2019</td><td>Q4</td><td>72.3</td><td>18.0%</td></tr><tr><td>21</td><td>Apple</td><td>2020</td><td>Q1</td><td>40.0</td><td>14.0%</td></tr><tr><td>22</td><td>Apple</td><td>2020</td><td>Q2</td><td>37.5</td><td>14.0%</td></tr><tr><td>23</td><td>Apple</td><td>2020</td><td>Q3</td><td>41.7</td><td>11.0%</td></tr><tr><td>24</td><td>Apple</td><td>2020</td><td>Q4</td><td>81.9</td><td>21.0%</td></tr><tr><td>25</td><td>Apple</td><td>2021</td><td>Q1</td><td>59.5</td><td>17.0%</td></tr><tr><td>26</td><td>Huawei</td><td>2018</td><td>Q1</td><td>39.3</td><td>11.0%</td></tr><tr><td>27</td><td>Huawei</td><td>2018</td><td>Q2</td><td>54.2</td><td>15.0%</td></tr><tr><td>28</td><td>Huawei</td><td>2018</td><td>Q3</td><td>52.0</td><td>14.0%</td></tr><tr><td>29</td><td>Huawei</td><td>2018</td><td>Q4</td><td>59.7</td><td>15.0%</td></tr><tr><td>30</td><td>Huawei</td><td>2019</td><td>Q1</td><td>59.1</td><td>17.0%</td></tr><tr><td>31</td><td>Huawei</td><td>2019</td><td>Q2</td><td>56.6</td><td>16.0%</td></tr><tr><td>32</td><td>Huawei</td><td>2019</td><td>Q3</td><td>66.8</td><td>18.0%</td></tr><tr><td>33</td><td>Huawei</td><td>2019</td><td>Q4</td><td>56.2</td><td>14.0%</td></tr><tr><td>34</td><td>Huawei</td><td>2020</td><td>Q1</td><td>49.0</td><td>17.0%</td></tr><tr><td>35</td><td>Huawei</td><td>2020</td><td>Q2</td><td>54.8</td><td>20.0%</td></tr><tr><td>36</td><td>Huawei</td><td>2020</td><td>Q3</td><td>50.9</td><td>14.0%</td></tr><tr><td>37</td><td>Huawei</td><td>2020</td><td>Q4</td><td>33.0</td><td>8.0%</td></tr><tr><td>38</td><td>Huawei</td><td>2021</td><td>Q1</td><td>15.0</td><td>4.0%</td></tr><tr><td>39</td><td>Xiaomi</td><td>2018</td><td>Q1</td><td>28.1</td><td>8.0%</td></tr><tr><td>40</td><td>Xiaomi</td><td>2018</td><td>Q2</td><td>32.0</td><td>9.0%</td></tr><tr><td>41</td><td>Xiaomi</td><td>2018</td><td>Q3</td><td>33.3</td><td>9.0%</td></tr><tr><td>42</td><td>Xiaomi</td><td>2018</td><td>Q4</td><td>25.6</td><td>6.0%</td></tr><tr><td>43</td><td>Xiaomi</td><td>2019</td><td>Q1</td><td>27.8</td><td>8.0%</td></tr><tr><td>44</td><td>Xiaomi</td><td>2019</td><td>Q2</td><td>32.3</td><td>9.0%</td></tr><tr><td>45</td><td>Xiaomi</td><td>2019</td><td>Q3</td><td>31.7</td><td>8.0%</td></tr><tr><td>46</td><td>Xiaomi</td><td>2019</td><td>Q4</td><td>32.9</td><td>8.0%</td></tr><tr><td>47</td><td>Xiaomi</td><td>2020</td><td>Q1</td><td>29.7</td><td>10.0%</td></tr><tr><td>48</td><td>Xiaomi</td><td>2020</td><td>Q2</td><td>26.5</td><td>10.0%</td></tr><tr><td>49</td><td>Xiaomi</td><td>2020</td><td>Q3</td><td>46.2</td><td>13.0%</td></tr><tr><td>50</td><td>Xiaomi</td><td>2020</td><td>Q4</td><td>43.0</td><td>11.0%</td></tr><tr><td>51</td><td>Xiaomi</td><td>2021</td><td>Q1</td><td>48.5</td><td>14.0%</td></tr><tr><td>52</td><td>Oppo</td><td>2018</td><td>Q1</td><td>24.2</td><td>7.0%</td></tr><tr><td>53</td><td>Oppo</td><td>2018</td><td>Q2</td><td>29.6</td><td>8.0%</td></tr><tr><td>54</td><td>Oppo</td><td>2018</td><td>Q3</td><td>33.9</td><td>9.0%</td></tr><tr><td>55</td><td>Oppo</td><td>2018</td><td>Q4</td><td>31.3</td><td>8.0%</td></tr><tr><td>56</td><td>Oppo</td><td>2019</td><td>Q1</td><td>25.7</td><td>8.0%</td></tr><tr><td>57</td><td>Oppo</td><td>2019</td><td>Q2</td><td>30.6</td><td>9.0%</td></tr><tr><td>58</td><td>Oppo</td><td>2019</td><td>Q3</td><td>32.3</td><td>9.0%</td></tr><tr><td>59</td><td>Oppo</td><td>2019</td><td>Q4</td><td>31.4</td><td>8.0%</td></tr><tr><td>60</td><td>Oppo</td><td>2020</td><td>Q1</td><td>22.3</td><td>8.0%</td></tr><tr><td>61</td><td>Oppo</td><td>2020</td><td>Q2</td><td>24.5</td><td>9.0%</td></tr><tr><td>62</td><td>Oppo</td><td>2020</td><td>Q3</td><td>31.0</td><td>8.0%</td></tr><tr><td>63</td><td>Oppo</td><td>2020</td><td>Q4</td><td>34.0</td><td>9.0%</td></tr><tr><td>64</td><td>Oppo</td><td>2021</td><td>Q1</td><td>38.0</td><td>11.0%</td></tr><tr><td>65</td><td>Vivo</td><td>2018</td><td>Q1</td><td>18.9</td><td>5.0%</td></tr><tr><td>66</td><td>Vivo</td><td>2018</td><td>Q2</td><td>26.5</td><td>7.0%</td></tr><tr><td>67</td><td>Vivo</td><td>2018</td><td>Q3</td><td>30.5</td><td>8.0%</td></tr><tr><td>68</td><td>Vivo</td><td>2018</td><td>Q4</td><td>26.5</td><td>7.0%</td></tr><tr><td>69</td><td>Vivo</td><td>2019</td><td>Q1</td><td>23.9</td><td>7.0%</td></tr><tr><td>70</td><td>Vivo</td><td>2019</td><td>Q2</td><td>27.0</td><td>8.0%</td></tr><tr><td>71</td><td>Vivo</td><td>2019</td><td>Q3</td><td>31.3</td><td>8.0%</td></tr><tr><td>72</td><td>Vivo</td><td>2019</td><td>Q4</td><td>31.5</td><td>8.0%</td></tr><tr><td>73</td><td>Vivo</td><td>2020</td><td>Q1</td><td>21.6</td><td>7.0%</td></tr><tr><td>74</td><td>Vivo</td><td>2020</td><td>Q2</td><td>22.5</td><td>8.0%</td></tr><tr><td>75</td><td>Vivo</td><td>2020</td><td>Q3</td><td>31.0</td><td>8.0%</td></tr><tr><td>76</td><td>Vivo</td><td>2020</td><td>Q4</td><td>33.4</td><td>8.0%</td></tr><tr><td>77</td><td>Vivo</td><td>2021</td><td>Q1</td><td>35.5</td><td>10.0%</td></tr></tbody></table></div><h4 id="2018Q1-2021Q1-全球智能手机出货量-市场份额"><a href="#2018Q1-2021Q1-全球智能手机出货量-市场份额" class="headerlink" title="2018Q1 - 2021Q1 全球智能手机出货量/市场份额"></a>2018Q1 - 2021Q1 全球智能手机出货量/市场份额</h4><h5 id="出货量（按年份）柱状图"><a href="#出货量（按年份）柱状图" class="headerlink" title="出货量（按年份）柱状图"></a>出货量（按年份）柱状图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Bar<br><br>grouped_df_year = GSMS[GSMS.Year &lt; <span class="hljs-number">2021</span>].groupby([<span class="hljs-string">'Vendor'</span>,<span class="hljs-string">'Year'</span>]).agg(&#123;<span class="hljs-string">'Shipment_Volumes'</span>:<span class="hljs-string">'sum'</span>,<span class="hljs-string">'Market_Share'</span>:<span class="hljs-string">'sum'</span>&#125;).reset_index()<br>grouped_df_year.Shipment_Volumes = round(grouped_df_year.Shipment_Volumes,<span class="hljs-number">1</span>)<br><br>bar = Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,\<br>                                  width=<span class="hljs-string">'1100px'</span>,\<br>                                  height=<span class="hljs-string">'500px'</span>))\<br>            .add_xaxis(grouped_df_year.Vendor.unique().tolist())\<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">'2018-2020全球年出货量'</span>),\<br>                             legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'plain'</span>,orient=<span class="hljs-string">'horizontal'</span>))<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> grouped_df_year.Year.unique():<br>    bar = bar.add_yaxis(str(y) + <span class="hljs-string">'年全球出货量（百万）'</span>,grouped_df_year[grouped_df_year.Year == y].Shipment_Volumes.tolist())<br>    <br>bar.render_notebook()<br></code></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style><meta name="generator" content="Hexo 4.2.1"><link rel="alternate" href="/atom.xml" title="meurice's Notes" type="application/atom+xml"></head><body onresize="resizeFresh()">    <div id="aaf3926ed4944c62aeb73f2b1424ec8e" class="chart-container" style="width:95%; height:395%;margin:auto; top:0px;"></div>    <script>        var chart_aaf3926ed4944c62aeb73f2b1424ec8e = echarts.init(            document.getElementById('aaf3926ed4944c62aeb73f2b1424ec8e'), 'light', {renderer: 'canvas'});        var option_aaf3926ed4944c62aeb73f2b1424ec8e = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "bar",            "name": "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                206.3,                205.2,                119.0,                291.8,                102.4,                119.0            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                195.6,                238.7,                120.0,                296.9,                113.7,                124.7            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        },        {            "type": "bar",            "name": "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "legendHoverLink": true,            "data": [                201.1,                187.7,                111.8,                255.7,                108.5,                145.4            ],            "showBackground": false,            "barMinHeight": 0,            "barCategoryGap": "20%",            "barGap": "30%",            "large": false,            "largeThreshold": 400,            "seriesLayoutBy": "column",            "datasetIndex": 0,            "clip": true,            "zlevel": 0,            "z": 2,            "label": {                "show": true,                "position": "top",                "margin": 8            }        }    ],    "legend": [        {            "data": [                "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09"            ],            "selected": {                "2018\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "2019\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "2020\u5e74\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true            },            "type": "plain",            "show": true,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "Apple",                "Huawei",                "Oppo",                "Samsung",                "Vivo",                "Xiaomi"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_aaf3926ed4944c62aeb73f2b1424ec8e.setOption(option_aaf3926ed4944c62aeb73f2b1424ec8e);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html>  <h5 id="出货量（按季度）折线图"><a href="#出货量（按季度）折线图" class="headerlink" title="出货量（按季度）折线图"></a>出货量（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Line<br><br>line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,<br>                                  width=<span class="hljs-string">'1200px'</span>,<br>                                  height=<span class="hljs-string">'550px'</span>))\<br>            .add_xaxis((GSMS.Year.astype(str) + GSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="hljs-string">'first'</span>).tolist())\<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">'2018Q1-2021Q1\n季度全球出货量'</span>),\<br>                             legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'scroll'</span>,pos_top=<span class="hljs-number">10</span>,pos_left = <span class="hljs-number">100</span>, orient=<span class="hljs-string">'horizontal'</span>))<span class="hljs-comment">#horizontal vertical</span><br><br><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> grouped_df_year.Vendor.unique():<br>    line = line.add_yaxis(str(v) + <span class="hljs-string">'季度全球出货量（百万）'</span>,GSMS[GSMS.Vendor == v].Shipment_Volumes.tolist())<br><br>line.render_notebook()<br></code></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1c4ca79d15c54b47abf178ba0084ad5b" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1c4ca79d15c54b47abf178ba0084ad5b = echarts.init(            document.getElementById('1c4ca79d15c54b47abf178ba0084ad5b'), 'light', {renderer: 'canvas'});        var option_1c4ca79d15c54b47abf178ba0084ad5b = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    52.2                ],                [                    "2018Q2",                    41.3                ],                [                    "2018Q3",                    46.9                ],                [                    "2018Q4",                    65.9                ],                [                    "2019Q1",                    42.0                ],                [                    "2019Q2",                    36.5                ],                [                    "2019Q3",                    44.8                ],                [                    "2019Q4",                    72.3                ],                [                    "2020Q1",                    40.0                ],                [                    "2020Q2",                    37.5                ],                [                    "2020Q3",                    41.7                ],                [                    "2020Q4",                    81.9                ],                [                    "2021Q1",                    59.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    39.3                ],                [                    "2018Q2",                    54.2                ],                [                    "2018Q3",                    52.0                ],                [                    "2018Q4",                    59.7                ],                [                    "2019Q1",                    59.1                ],                [                    "2019Q2",                    56.6                ],                [                    "2019Q3",                    66.8                ],                [                    "2019Q4",                    56.2                ],                [                    "2020Q1",                    49.0                ],                [                    "2020Q2",                    54.8                ],                [                    "2020Q3",                    50.9                ],                [                    "2020Q4",                    33.0                ],                [                    "2021Q1",                    15.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    24.2                ],                [                    "2018Q2",                    29.6                ],                [                    "2018Q3",                    33.9                ],                [                    "2018Q4",                    31.3                ],                [                    "2019Q1",                    25.7                ],                [                    "2019Q2",                    30.6                ],                [                    "2019Q3",                    32.3                ],                [                    "2019Q4",                    31.4                ],                [                    "2020Q1",                    22.3                ],                [                    "2020Q2",                    24.5                ],                [                    "2020Q3",                    31.0                ],                [                    "2020Q4",                    34.0                ],                [                    "2021Q1",                    38.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    78.2                ],                [                    "2018Q2",                    71.5                ],                [                    "2018Q3",                    72.3                ],                [                    "2018Q4",                    69.8                ],                [                    "2019Q1",                    72.0                ],                [                    "2019Q2",                    76.3                ],                [                    "2019Q3",                    78.2                ],                [                    "2019Q4",                    70.4                ],                [                    "2020Q1",                    58.6                ],                [                    "2020Q2",                    54.2                ],                [                    "2020Q3",                    80.4                ],                [                    "2020Q4",                    62.5                ],                [                    "2021Q1",                    76.6                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    18.9                ],                [                    "2018Q2",                    26.5                ],                [                    "2018Q3",                    30.5                ],                [                    "2018Q4",                    26.5                ],                [                    "2019Q1",                    23.9                ],                [                    "2019Q2",                    27.0                ],                [                    "2019Q3",                    31.3                ],                [                    "2019Q4",                    31.5                ],                [                    "2020Q1",                    21.6                ],                [                    "2020Q2",                    22.5                ],                [                    "2020Q3",                    31.0                ],                [                    "2020Q4",                    33.4                ],                [                    "2021Q1",                    35.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    28.1                ],                [                    "2018Q2",                    32.0                ],                [                    "2018Q3",                    33.3                ],                [                    "2018Q4",                    25.6                ],                [                    "2019Q1",                    27.8                ],                [                    "2019Q2",                    32.3                ],                [                    "2019Q3",                    31.7                ],                [                    "2019Q4",                    32.9                ],                [                    "2020Q1",                    29.7                ],                [                    "2020Q2",                    26.5                ],                [                    "2020Q3",                    46.2                ],                [                    "2020Q4",                    43.0                ],                [                    "2021Q1",                    48.5                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u51fa\u8d27\u91cf\uff08\u767e\u4e07\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1c4ca79d15c54b47abf178ba0084ad5b.setOption(option_1c4ca79d15c54b47abf178ba0084ad5b);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）折线图"><a href="#市场份额（按季度）折线图" class="headerlink" title="市场份额（按季度）折线图"></a>市场份额（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Line<br><br>line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,<br>                                  width=<span class="hljs-string">'1200px'</span>,<br>                                  height=<span class="hljs-string">'550px'</span>))\<br>            .add_xaxis((GSMS.Year.astype(str) + GSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="hljs-string">'first'</span>).tolist())\<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">'2018Q1-2021Q1\n季度全球份额'</span>),\<br>                             legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'scroll'</span>,pos_top=<span class="hljs-number">10</span>,pos_left = <span class="hljs-number">210</span>, orient=<span class="hljs-string">'horizontal'</span>))<span class="hljs-comment">#horizontal vertical</span><br><br><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> grouped_df_year.Vendor.unique():<br>    line = line.add_yaxis(str(v) + <span class="hljs-string">'季度全球份额（%）'</span>,np.round(<span class="hljs-number">100</span> * GSMS[GSMS.Vendor == v].Market_Share, <span class="hljs-number">0</span>).tolist())<br><br>line.render_notebook()<br></code></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1a350fedf1644c1b804480e2c16bbd63" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1a350fedf1644c1b804480e2c16bbd63 = echarts.init(            document.getElementById('1a350fedf1644c1b804480e2c16bbd63'), 'light', {renderer: 'canvas'});        var option_1a350fedf1644c1b804480e2c16bbd63 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    14.0                ],                [                    "2018Q2",                    11.0                ],                [                    "2018Q3",                    12.0                ],                [                    "2018Q4",                    17.0                ],                [                    "2019Q1",                    12.0                ],                [                    "2019Q2",                    10.0                ],                [                    "2019Q3",                    12.0                ],                [                    "2019Q4",                    18.0                ],                [                    "2020Q1",                    14.0                ],                [                    "2020Q2",                    14.0                ],                [                    "2020Q3",                    11.0                ],                [                    "2020Q4",                    21.0                ],                [                    "2021Q1",                    17.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    11.0                ],                [                    "2018Q2",                    15.0                ],                [                    "2018Q3",                    14.0                ],                [                    "2018Q4",                    15.0                ],                [                    "2019Q1",                    17.0                ],                [                    "2019Q2",                    16.0                ],                [                    "2019Q3",                    18.0                ],                [                    "2019Q4",                    14.0                ],                [                    "2020Q1",                    17.0                ],                [                    "2020Q2",                    20.0                ],                [                    "2020Q3",                    14.0                ],                [                    "2020Q4",                    8.0                ],                [                    "2021Q1",                    4.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    7.0                ],                [                    "2018Q2",                    8.0                ],                [                    "2018Q3",                    9.0                ],                [                    "2018Q4",                    8.0                ],                [                    "2019Q1",                    8.0                ],                [                    "2019Q2",                    9.0                ],                [                    "2019Q3",                    9.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    8.0                ],                [                    "2020Q2",                    9.0                ],                [                    "2020Q3",                    8.0                ],                [                    "2020Q4",                    9.0                ],                [                    "2021Q1",                    11.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    22.0                ],                [                    "2018Q2",                    19.0                ],                [                    "2018Q3",                    19.0                ],                [                    "2018Q4",                    18.0                ],                [                    "2019Q1",                    21.0                ],                [                    "2019Q2",                    21.0                ],                [                    "2019Q3",                    21.0                ],                [                    "2019Q4",                    18.0                ],                [                    "2020Q1",                    20.0                ],                [                    "2020Q2",                    20.0                ],                [                    "2020Q3",                    22.0                ],                [                    "2020Q4",                    16.0                ],                [                    "2021Q1",                    22.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    5.0                ],                [                    "2018Q2",                    7.0                ],                [                    "2018Q3",                    8.0                ],                [                    "2018Q4",                    7.0                ],                [                    "2019Q1",                    7.0                ],                [                    "2019Q2",                    8.0                ],                [                    "2019Q3",                    8.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    7.0                ],                [                    "2020Q2",                    8.0                ],                [                    "2020Q3",                    8.0                ],                [                    "2020Q4",                    8.0                ],                [                    "2021Q1",                    10.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2018Q1",                    8.0                ],                [                    "2018Q2",                    9.0                ],                [                    "2018Q3",                    9.0                ],                [                    "2018Q4",                    6.0                ],                [                    "2019Q1",                    8.0                ],                [                    "2019Q2",                    9.0                ],                [                    "2019Q3",                    8.0                ],                [                    "2019Q4",                    8.0                ],                [                    "2020Q1",                    10.0                ],                [                    "2020Q2",                    10.0                ],                [                    "2020Q3",                    13.0                ],                [                    "2020Q4",                    11.0                ],                [                    "2021Q1",                    14.0                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1a350fedf1644c1b804480e2c16bbd63.setOption(option_1a350fedf1644c1b804480e2c16bbd63);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）饼状图-南丁格尔玫瑰图"><a href="#市场份额（按季度）饼状图-南丁格尔玫瑰图" class="headerlink" title="市场份额（按季度）饼状图/南丁格尔玫瑰图"></a>市场份额（按季度）饼状图/南丁格尔玫瑰图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Pie<br><br>pies = []<br>pie = Pie(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,width=<span class="hljs-string">'1500px'</span>,height=<span class="hljs-string">'1500px'</span>))<br><span class="hljs-keyword">for</span> xi, y <span class="hljs-keyword">in</span> enumerate(GSMS.Year.unique()):<br>    _ = GSMS[(GSMS.Year == y)]<br>    <span class="hljs-keyword">for</span> yi, q <span class="hljs-keyword">in</span> enumerate(_.Quarterly.unique()):<br>        df_temp = GSMS[(GSMS.Year == y) &amp; (GSMS.Quarterly == q)]<br>        <br>        data_pair = [list(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> zip(df_temp.Vendor.tolist() + [<span class="hljs-string">'Others'</span>], <br>                                          df_temp.Market_Share.tolist() + [round(<span class="hljs-number">1</span> - sum(df_temp.Market_Share.tolist()),<span class="hljs-number">1</span>)])]<br>        pie = pie.add(series_name=str(y) + str(q),<br>                     data_pair=data_pair,<br>                     rosetype=<span class="hljs-literal">None</span>,<span class="hljs-comment">#'area',</span><br>                     radius=<span class="hljs-number">75</span>,<br>                     center=[<span class="hljs-number">300</span> * (yi + <span class="hljs-number">1</span>) - <span class="hljs-number">150</span>,  <span class="hljs-number">300</span> * (xi + <span class="hljs-number">1</span>) - <span class="hljs-number">150</span>],<br>                     label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>, position=<span class="hljs-string">"center"</span>),)\<br>                .set_series_opts(tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">"item"</span>, formatter=<span class="hljs-string">"&#123;b&#125; &lt;br/&gt;&#123;a&#125;: &#123;c&#125;"</span>),<br>                                 label_opts=opts.LabelOpts(color=<span class="hljs-string">"rgba(0, 0, 1, 0.8)"</span>),)\<br>                .set_global_opts(legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'scroll'</span>,pos_left=<span class="hljs-number">0</span>, orient=<span class="hljs-string">'horizontal'</span>))<br>                <br>pie.render_notebook()<br></code></pre></td></tr></table></figure><p><strong>2018 Q1 - Q4</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="23d7d227653d4d80bcaa8c33887917e6" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_23d7d227653d4d80bcaa8c33887917e6 = echarts.init(            document.getElementById('23d7d227653d4d80bcaa8c33887917e6'), 'light', {renderer: 'canvas'});        var option_23d7d227653d4d80bcaa8c33887917e6 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2018Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.11                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.07                },                {                    "name": "Vivo",                    "value": 0.05                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.19                },                {                    "name": "Apple",                    "value": 0.11                },                {                    "name": "Huawei",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.19                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.18                },                {                    "name": "Apple",                    "value": 0.17                },                {                    "name": "Huawei",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.06                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_23d7d227653d4d80bcaa8c33887917e6.setOption(option_23d7d227653d4d80bcaa8c33887917e6);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2019 Q1 - Q4</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="4e8fa8394cc74b9a8a84bb8d38012a9b" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_4e8fa8394cc74b9a8a84bb8d38012a9b = echarts.init(            document.getElementById('4e8fa8394cc74b9a8a84bb8d38012a9b'), 'light', {renderer: 'canvas'});        var option_4e8fa8394cc74b9a8a84bb8d38012a9b = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2019Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Huawei",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.21                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Huawei",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.18                },                {                    "name": "Apple",                    "value": 0.18                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_4e8fa8394cc74b9a8a84bb8d38012a9b.setOption(option_4e8fa8394cc74b9a8a84bb8d38012a9b);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2020 Q1 - Q4</strong><br>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="fe82505eb0764a5aa8c1c73870c13b0c" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_fe82505eb0764a5aa8c1c73870c13b0c = echarts.init(            document.getElementById('fe82505eb0764a5aa8c1c73870c13b0c'), 'light', {renderer: 'canvas'});        var option_fe82505eb0764a5aa8c1c73870c13b0c = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2020Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.2                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.07                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q2",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.2                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q3",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.11                },                {                    "name": "Huawei",                    "value": 0.14                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Oppo",                    "value": 0.08                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q4",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.16                },                {                    "name": "Apple",                    "value": 0.21                },                {                    "name": "Huawei",                    "value": 0.08                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Oppo",                    "value": 0.09                },                {                    "name": "Vivo",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_fe82505eb0764a5aa8c1c73870c13b0c.setOption(option_fe82505eb0764a5aa8c1c73870c13b0c);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2021 Q1</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="e9932162f97641d68914deb431d49724" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_e9932162f97641d68914deb431d49724 = echarts.init(            document.getElementById('e9932162f97641d68914deb431d49724'), 'light', {renderer: 'canvas'});        var option_e9932162f97641d68914deb431d49724 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2021Q1",            "clockwise": true,            "data": [                {                    "name": "Samsung",                    "value": 0.22                },                {                    "name": "Apple",                    "value": 0.17                },                {                    "name": "Huawei",                    "value": 0.04                },                {                    "name": "Xiaomi",                    "value": 0.14                },                {                    "name": "Oppo",                    "value": 0.11                },                {                    "name": "Vivo",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "75%",            "center": [                "50%",                "50%"            ],            "roseType": "area",            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Samsung",                "Apple",                "Huawei",                "Xiaomi",                "Oppo",                "Vivo",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_e9932162f97641d68914deb431d49724.setOption(option_e9932162f97641d68914deb431d49724);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h3 id="国内手机市场份额数据可视化"><a href="#国内手机市场份额数据可视化" class="headerlink" title="国内手机市场份额数据可视化"></a>国内手机市场份额数据可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">CSMS = pd.read_csv(<span class="hljs-string">'China_Smartphone_Market_Share.csv'</span>).iloc[:,<span class="hljs-number">0</span>:<span class="hljs-number">4</span>]<br>CSMS.Market_Share = CSMS.Market_Share.str[:<span class="hljs-number">-1</span>].astype(int)<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>Index</th><th>品牌</th><th>年份</th><th>季度</th><th>市场份额</th></tr></thead><tbody><tr><td>0</td><td>Huawei</td><td>2017</td><td>Q1</td><td>20%</td></tr><tr><td>1</td><td>Huawei</td><td>2017</td><td>Q2</td><td>20%</td></tr><tr><td>2</td><td>Huawei</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>3</td><td>Huawei</td><td>2017</td><td>Q4</td><td>20%</td></tr><tr><td>4</td><td>Huawei</td><td>2018</td><td>Q1</td><td>22%</td></tr><tr><td>5</td><td>Huawei</td><td>2018</td><td>Q2</td><td>26%</td></tr><tr><td>6</td><td>Huawei</td><td>2018</td><td>Q3</td><td>23%</td></tr><tr><td>7</td><td>Huawei</td><td>2018</td><td>Q4</td><td>28%</td></tr><tr><td>8</td><td>Huawei</td><td>2019</td><td>Q1</td><td>34%</td></tr><tr><td>9</td><td>Huawei</td><td>2019</td><td>Q2</td><td>35%</td></tr><tr><td>10</td><td>Huawei</td><td>2019</td><td>Q3</td><td>40%</td></tr><tr><td>11</td><td>Huawei</td><td>2019</td><td>Q4</td><td>35%</td></tr><tr><td>12</td><td>Huawei</td><td>2020</td><td>Q1</td><td>41%</td></tr><tr><td>13</td><td>Huawei</td><td>2020</td><td>Q2</td><td>46%</td></tr><tr><td>14</td><td>Huawei</td><td>2020</td><td>Q3</td><td>43%</td></tr><tr><td>15</td><td>Huawei</td><td>2020</td><td>Q4</td><td>30%</td></tr><tr><td>16</td><td>Huawei</td><td>2021</td><td>Q1</td><td>16%</td></tr><tr><td>17</td><td>Vivo</td><td>2017</td><td>Q1</td><td>17%</td></tr><tr><td>18</td><td>Vivo</td><td>2017</td><td>Q2</td><td>17%</td></tr><tr><td>19</td><td>Vivo</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>20</td><td>Vivo</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>21</td><td>Vivo</td><td>2018</td><td>Q1</td><td>16%</td></tr><tr><td>22</td><td>Vivo</td><td>2018</td><td>Q2</td><td>19%</td></tr><tr><td>23</td><td>Vivo</td><td>2018</td><td>Q3</td><td>21%</td></tr><tr><td>24</td><td>Vivo</td><td>2018</td><td>Q4</td><td>20%</td></tr><tr><td>25</td><td>Vivo</td><td>2019</td><td>Q1</td><td>19%</td></tr><tr><td>26</td><td>Vivo</td><td>2019</td><td>Q2</td><td>18%</td></tr><tr><td>27</td><td>Vivo</td><td>2019</td><td>Q3</td><td>19%</td></tr><tr><td>28</td><td>Vivo</td><td>2019</td><td>Q4</td><td>17%</td></tr><tr><td>29</td><td>Vivo</td><td>2020</td><td>Q1</td><td>17%</td></tr><tr><td>30</td><td>Vivo</td><td>2020</td><td>Q2</td><td>16%</td></tr><tr><td>31</td><td>Vivo</td><td>2020</td><td>Q3</td><td>18%</td></tr><tr><td>32</td><td>Vivo</td><td>2020</td><td>Q4</td><td>18%</td></tr><tr><td>33</td><td>Vivo</td><td>2021</td><td>Q1</td><td>23%</td></tr><tr><td>34</td><td>Oppo</td><td>2017</td><td>Q1</td><td>17%</td></tr><tr><td>35</td><td>Oppo</td><td>2017</td><td>Q2</td><td>19%</td></tr><tr><td>36</td><td>Oppo</td><td>2017</td><td>Q3</td><td>19%</td></tr><tr><td>37</td><td>Oppo</td><td>2017</td><td>Q4</td><td>17%</td></tr><tr><td>38</td><td>Oppo</td><td>2018</td><td>Q1</td><td>18%</td></tr><tr><td>39</td><td>Oppo</td><td>2018</td><td>Q2</td><td>18%</td></tr><tr><td>40</td><td>Oppo</td><td>2018</td><td>Q3</td><td>21%</td></tr><tr><td>41</td><td>Oppo</td><td>2018</td><td>Q4</td><td>19%</td></tr><tr><td>42</td><td>Oppo</td><td>2019</td><td>Q1</td><td>18%</td></tr><tr><td>43</td><td>Oppo</td><td>2019</td><td>Q2</td><td>19%</td></tr><tr><td>44</td><td>Oppo</td><td>2019</td><td>Q3</td><td>18%</td></tr><tr><td>45</td><td>Oppo</td><td>2019</td><td>Q4</td><td>16%</td></tr><tr><td>46</td><td>Oppo</td><td>2020</td><td>Q1</td><td>15%</td></tr><tr><td>47</td><td>Oppo</td><td>2020</td><td>Q2</td><td>16%</td></tr><tr><td>48</td><td>Oppo</td><td>2020</td><td>Q3</td><td>16%</td></tr><tr><td>49</td><td>Oppo</td><td>2020</td><td>Q4</td><td>16%</td></tr><tr><td>50</td><td>Oppo</td><td>2021</td><td>Q1</td><td>22%</td></tr><tr><td>51</td><td>Xiaomi</td><td>2017</td><td>Q1</td><td>8%</td></tr><tr><td>52</td><td>Xiaomi</td><td>2017</td><td>Q2</td><td>13%</td></tr><tr><td>53</td><td>Xiaomi</td><td>2017</td><td>Q3</td><td>14%</td></tr><tr><td>54</td><td>Xiaomi</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>55</td><td>Xiaomi</td><td>2018</td><td>Q1</td><td>13%</td></tr><tr><td>56</td><td>Xiaomi</td><td>2018</td><td>Q2</td><td>13%</td></tr><tr><td>57</td><td>Xiaomi</td><td>2018</td><td>Q3</td><td>13%</td></tr><tr><td>58</td><td>Xiaomi</td><td>2018</td><td>Q4</td><td>9%</td></tr><tr><td>59</td><td>Xiaomi</td><td>2019</td><td>Q1</td><td>12%</td></tr><tr><td>60</td><td>Xiaomi</td><td>2019</td><td>Q2</td><td>11%</td></tr><tr><td>61</td><td>Xiaomi</td><td>2019</td><td>Q3</td><td>8%</td></tr><tr><td>62</td><td>Xiaomi</td><td>2019</td><td>Q4</td><td>9%</td></tr><tr><td>63</td><td>Xiaomi</td><td>2020</td><td>Q1</td><td>11%</td></tr><tr><td>64</td><td>Xiaomi</td><td>2020</td><td>Q2</td><td>10%</td></tr><tr><td>65</td><td>Xiaomi</td><td>2020</td><td>Q3</td><td>13%</td></tr><tr><td>66</td><td>Xiaomi</td><td>2020</td><td>Q4</td><td>13%</td></tr><tr><td>67</td><td>Xiaomi</td><td>2021</td><td>Q1</td><td>15%</td></tr><tr><td>68</td><td>Apple</td><td>2017</td><td>Q1</td><td>10%</td></tr><tr><td>69</td><td>Apple</td><td>2017</td><td>Q2</td><td>8%</td></tr><tr><td>70</td><td>Apple</td><td>2017</td><td>Q3</td><td>10%</td></tr><tr><td>71</td><td>Apple</td><td>2017</td><td>Q4</td><td>15%</td></tr><tr><td>72</td><td>Apple</td><td>2018</td><td>Q1</td><td>13%</td></tr><tr><td>73</td><td>Apple</td><td>2018</td><td>Q2</td><td>8%</td></tr><tr><td>74</td><td>Apple</td><td>2018</td><td>Q3</td><td>9%</td></tr><tr><td>75</td><td>Apple</td><td>2018</td><td>Q4</td><td>12%</td></tr><tr><td>76</td><td>Apple</td><td>2019</td><td>Q1</td><td>9%</td></tr><tr><td>77</td><td>Apple</td><td>2019</td><td>Q2</td><td>6%</td></tr><tr><td>78</td><td>Apple</td><td>2019</td><td>Q3</td><td>8%</td></tr><tr><td>79</td><td>Apple</td><td>2019</td><td>Q4</td><td>14%</td></tr><tr><td>80</td><td>Apple</td><td>2020</td><td>Q1</td><td>9%</td></tr><tr><td>81</td><td>Apple</td><td>2020</td><td>Q2</td><td>8%</td></tr><tr><td>82</td><td>Apple</td><td>2020</td><td>Q3</td><td>8%</td></tr><tr><td>83</td><td>Apple</td><td>2020</td><td>Q4</td><td>8%</td></tr><tr><td>84</td><td>Apple</td><td>2021</td><td>Q1</td><td>13%</td></tr></tbody></table></div><h4 id="2017Q1-2021Q1-国内智能手机市场份额"><a href="#2017Q1-2021Q1-国内智能手机市场份额" class="headerlink" title="2017Q1 - 2021Q1 国内智能手机市场份额"></a>2017Q1 - 2021Q1 国内智能手机市场份额</h4><h5 id="市场份额（按季度）折线图-1"><a href="#市场份额（按季度）折线图-1" class="headerlink" title="市场份额（按季度）折线图"></a>市场份额（按季度）折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Line<br><br>line = Line(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,<br>                                  width=<span class="hljs-string">'1200px'</span>,<br>                                  height=<span class="hljs-string">'550px'</span>))\<br>            .add_xaxis((CSMS.Year.astype(str) + CSMS.Quarterly.astype(str)).drop_duplicates(keep=<span class="hljs-string">'first'</span>).tolist())\<br>            .set_global_opts(title_opts=opts.TitleOpts(title=<span class="hljs-string">''</span>),\<br>                             legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'scroll'</span>,pos_top=<span class="hljs-number">10</span>, orient=<span class="hljs-string">'horizontal'</span>))<span class="hljs-comment">#horizontal vertical</span><br><br><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> grouped_df_year.Vendor.unique():<br>    line = line.add_yaxis(str(v) + <span class="hljs-string">'季度全球份额（%）'</span>,np.round(<span class="hljs-number">100</span> * CSMS[CSMS.Vendor == v].Market_Share, <span class="hljs-number">0</span>).tolist())<br><br>line.render_notebook()<br></code></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="622d0adc2696444983cb91188184e257" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_622d0adc2696444983cb91188184e257 = echarts.init(            document.getElementById('622d0adc2696444983cb91188184e257'), 'light', {renderer: 'canvas'});        var option_622d0adc2696444983cb91188184e257 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "line",            "name": "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    10                ],                [                    "2017Q2",                    8                ],                [                    "2017Q3",                    10                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    13                ],                [                    "2018Q2",                    8                ],                [                    "2018Q3",                    9                ],                [                    "2018Q4",                    12                ],                [                    "2019Q1",                    9                ],                [                    "2019Q2",                    6                ],                [                    "2019Q3",                    8                ],                [                    "2019Q4",                    14                ],                [                    "2020Q1",                    9                ],                [                    "2020Q2",                    8                ],                [                    "2020Q3",                    8                ],                [                    "2020Q4",                    8                ],                [                    "2021Q1",                    13                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    20                ],                [                    "2017Q2",                    20                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    20                ],                [                    "2018Q1",                    22                ],                [                    "2018Q2",                    26                ],                [                    "2018Q3",                    23                ],                [                    "2018Q4",                    28                ],                [                    "2019Q1",                    34                ],                [                    "2019Q2",                    35                ],                [                    "2019Q3",                    40                ],                [                    "2019Q4",                    35                ],                [                    "2020Q1",                    41                ],                [                    "2020Q2",                    46                ],                [                    "2020Q3",                    43                ],                [                    "2020Q4",                    30                ],                [                    "2021Q1",                    16                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    17                ],                [                    "2017Q2",                    19                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    17                ],                [                    "2018Q1",                    18                ],                [                    "2018Q2",                    18                ],                [                    "2018Q3",                    21                ],                [                    "2018Q4",                    19                ],                [                    "2019Q1",                    18                ],                [                    "2019Q2",                    19                ],                [                    "2019Q3",                    18                ],                [                    "2019Q4",                    16                ],                [                    "2020Q1",                    15                ],                [                    "2020Q2",                    16                ],                [                    "2020Q3",                    16                ],                [                    "2020Q4",                    16                ],                [                    "2021Q1",                    22                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    17                ],                [                    "2017Q2",                    17                ],                [                    "2017Q3",                    19                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    16                ],                [                    "2018Q2",                    19                ],                [                    "2018Q3",                    21                ],                [                    "2018Q4",                    20                ],                [                    "2019Q1",                    19                ],                [                    "2019Q2",                    18                ],                [                    "2019Q3",                    19                ],                [                    "2019Q4",                    17                ],                [                    "2020Q1",                    17                ],                [                    "2020Q2",                    16                ],                [                    "2020Q3",                    18                ],                [                    "2020Q4",                    18                ],                [                    "2021Q1",                    23                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        },        {            "type": "line",            "name": "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",            "connectNulls": false,            "symbolSize": 4,            "showSymbol": true,            "smooth": false,            "clip": true,            "step": false,            "data": [                [                    "2017Q1",                    8                ],                [                    "2017Q2",                    13                ],                [                    "2017Q3",                    14                ],                [                    "2017Q4",                    15                ],                [                    "2018Q1",                    13                ],                [                    "2018Q2",                    13                ],                [                    "2018Q3",                    13                ],                [                    "2018Q4",                    9                ],                [                    "2019Q1",                    12                ],                [                    "2019Q2",                    11                ],                [                    "2019Q3",                    8                ],                [                    "2019Q4",                    9                ],                [                    "2020Q1",                    11                ],                [                    "2020Q2",                    10                ],                [                    "2020Q3",                    13                ],                [                    "2020Q4",                    13                ],                [                    "2021Q1",                    15                ]            ],            "hoverAnimation": true,            "label": {                "show": true,                "position": "top",                "margin": 8            },            "lineStyle": {                "show": true,                "width": 1,                "opacity": 1,                "curveness": 0,                "type": "solid"            },            "areaStyle": {                "opacity": 0            },            "zlevel": 0,            "z": 0        }    ],    "legend": [        {            "data": [                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09",                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09"            ],            "selected": {                "Apple\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Huawei\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Oppo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Samsung\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Vivo\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true,                "Xiaomi\u5b63\u5ea6\u5168\u7403\u4efd\u989d\uff08%\uff09": true            },            "type": "scroll",            "show": true,            "top": 10,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "xAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            },            "data": [                "2017Q1",                "2017Q2",                "2017Q3",                "2017Q4",                "2018Q1",                "2018Q2",                "2018Q3",                "2018Q4",                "2019Q1",                "2019Q2",                "2019Q3",                "2019Q4",                "2020Q1",                "2020Q2",                "2020Q3",                "2020Q4",                "2021Q1"            ]        }    ],    "yAxis": [        {            "show": true,            "scale": false,            "nameLocation": "end",            "nameGap": 15,            "gridIndex": 0,            "inverse": false,            "offset": 0,            "splitNumber": 5,            "minInterval": 0,            "splitLine": {                "show": false,                "lineStyle": {                    "show": true,                    "width": 1,                    "opacity": 1,                    "curveness": 0,                    "type": "solid"                }            }        }    ],    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_622d0adc2696444983cb91188184e257.setOption(option_622d0adc2696444983cb91188184e257);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h5 id="市场份额（按季度）饼状图-南丁格尔玫瑰图-1"><a href="#市场份额（按季度）饼状图-南丁格尔玫瑰图-1" class="headerlink" title="市场份额（按季度）饼状图/南丁格尔玫瑰图"></a>市场份额（按季度）饼状图/南丁格尔玫瑰图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Pie<br><br>pies = []<br>pie = Pie(init_opts=opts.InitOpts(theme=ThemeType.LIGHT,width=<span class="hljs-string">'1500px'</span>,height=<span class="hljs-string">'1500px'</span>))<br><span class="hljs-keyword">for</span> xi, y <span class="hljs-keyword">in</span> enumerate(GSMS.Year.unique()):<br>    _ = CSMS[(CSMS.Year == y)]<br>    <span class="hljs-keyword">for</span> yi, q <span class="hljs-keyword">in</span> enumerate(_.Quarterly.unique()):<br>        df_temp = CSMS[(CSMS.Year == y) &amp; (CSMS.Quarterly == q)]<br>        <br>        data_pair = [list(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> zip(df_temp.Vendor.tolist() + [<span class="hljs-string">'Others'</span>], <br>                                          df_temp.Market_Share.tolist() + [round(<span class="hljs-number">1</span> - sum(df_temp.Market_Share.tolist()),<span class="hljs-number">1</span>)])]<br>        pie = pie.add(series_name=str(y) + str(q),<br>                     data_pair=data_pair,<br>                     rosetype=<span class="hljs-literal">None</span>,<span class="hljs-comment">#'area',</span><br>                     radius=<span class="hljs-number">75</span>,<br>                     center=[<span class="hljs-number">300</span> * (yi + <span class="hljs-number">1</span>) - <span class="hljs-number">150</span>,  <span class="hljs-number">300</span> * (xi + <span class="hljs-number">1</span>) - <span class="hljs-number">150</span>],<br>                     label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>, position=<span class="hljs-string">"center"</span>),)\<br>                .set_series_opts(tooltip_opts=opts.TooltipOpts(trigger=<span class="hljs-string">"item"</span>, formatter=<span class="hljs-string">"&#123;b&#125; &lt;br/&gt;&#123;a&#125;: &#123;c&#125;"</span>),<br>                                 label_opts=opts.LabelOpts(color=<span class="hljs-string">"rgba(0, 0, 1, 0.8)"</span>),)\<br>                .set_global_opts(legend_opts=opts.LegendOpts(type_=<span class="hljs-string">'scroll'</span>,pos_left=<span class="hljs-number">0</span>, orient=<span class="hljs-string">'horizontal'</span>))<br><br>pie.render_notebook()<br></code></pre></td></tr></table></figure><p><strong>2017 Q1 - Q4</strong>  </p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="88cd37287e9f41af83bdf529e6605e92" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_88cd37287e9f41af83bdf529e6605e92 = echarts.init(            document.getElementById('88cd37287e9f41af83bdf529e6605e92'), 'light', {renderer: 'canvas'});        var option_88cd37287e9f41af83bdf529e6605e92 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2017Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.3                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.19                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.14                },                {                    "name": "Apple",                    "value": 0.1                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2017Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.2                },                {                    "name": "Vivo",                    "value": 0.15                },                {                    "name": "Oppo",                    "value": 0.17                },                {                    "name": "Xiaomi",                    "value": 0.15                },                {                    "name": "Apple",                    "value": 0.15                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_88cd37287e9f41af83bdf529e6605e92.setOption(option_88cd37287e9f41af83bdf529e6605e92);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2018 Q1 - Q4</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="4d03d0cb260141bdb749db0a60e4c887" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_4d03d0cb260141bdb749db0a60e4c887 = echarts.init(            document.getElementById('4d03d0cb260141bdb749db0a60e4c887'), 'light', {renderer: 'canvas'});        var option_4d03d0cb260141bdb749db0a60e4c887 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2018Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.22                },                {                    "name": "Vivo",                    "value": 0.16                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.13                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.26                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.23                },                {                    "name": "Vivo",                    "value": 0.21                },                {                    "name": "Oppo",                    "value": 0.21                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2018Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.28                },                {                    "name": "Vivo",                    "value": 0.2                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Apple",                    "value": 0.12                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_4d03d0cb260141bdb749db0a60e4c887.setOption(option_4d03d0cb260141bdb749db0a60e4c887);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2019 Q1 - Q4</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="1b0c39282f4748ceb082461450acc201" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_1b0c39282f4748ceb082461450acc201 = echarts.init(            document.getElementById('1b0c39282f4748ceb082461450acc201'), 'light', {renderer: 'canvas'});        var option_1b0c39282f4748ceb082461450acc201 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2019Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.34                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.12                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.35                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.19                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Apple",                    "value": 0.06                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.4                },                {                    "name": "Vivo",                    "value": 0.19                },                {                    "name": "Oppo",                    "value": 0.18                },                {                    "name": "Xiaomi",                    "value": 0.08                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2019Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.35                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.09                },                {                    "name": "Apple",                    "value": 0.14                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_1b0c39282f4748ceb082461450acc201.setOption(option_1b0c39282f4748ceb082461450acc201);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2020 Q1 - Q4</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="f88c166921aa484b8c5757553af520d3" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_f88c166921aa484b8c5757553af520d3 = echarts.init(            document.getElementById('f88c166921aa484b8c5757553af520d3'), 'light', {renderer: 'canvas'});        var option_f88c166921aa484b8c5757553af520d3 = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2020Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.41                },                {                    "name": "Vivo",                    "value": 0.17                },                {                    "name": "Oppo",                    "value": 0.15                },                {                    "name": "Xiaomi",                    "value": 0.11                },                {                    "name": "Apple",                    "value": 0.09                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "25%",            "center": [                "25%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q2",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.46                },                {                    "name": "Vivo",                    "value": 0.16                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.1                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.0                }            ],            "radius": "25%",            "center": [                "75%",                "25%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q3",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.43                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.0                }            ],            "radius": "25%",            "center": [                "25%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        },        {            "type": "pie",            "name": "2020Q4",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.3                },                {                    "name": "Vivo",                    "value": 0.18                },                {                    "name": "Oppo",                    "value": 0.16                },                {                    "name": "Xiaomi",                    "value": 0.13                },                {                    "name": "Apple",                    "value": 0.08                },                {                    "name": "Others",                    "value": 0.2                }            ],            "radius": "25%",            "center": [                "75%",                "75%"            ],            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_f88c166921aa484b8c5757553af520d3.setOption(option_f88c166921aa484b8c5757553af520d3);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><p><strong>2021 Q1</strong></p><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>Awesome-pyecharts</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="a5130f29eb0a4159a0af97ec3301f27d" class="chart-container" style="width:95%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_a5130f29eb0a4159a0af97ec3301f27d = echarts.init(            document.getElementById('a5130f29eb0a4159a0af97ec3301f27d'), 'light', {renderer: 'canvas'});        var option_a5130f29eb0a4159a0af97ec3301f27d = {    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "pie",            "name": "2021Q1",            "clockwise": true,            "data": [                {                    "name": "Huawei",                    "value": 0.16                },                {                    "name": "Vivo",                    "value": 0.23                },                {                    "name": "Oppo",                    "value": 0.22                },                {                    "name": "Xiaomi",                    "value": 0.15                },                {                    "name": "Apple",                    "value": 0.13                },                {                    "name": "Others",                    "value": 0.1                }            ],            "radius": "75%",            "center": [                "50%",                "50%"            ],            "roseType": "area",            "label": {                "show": true,                "position": "top",                "color": "rgba(0, 0, 1, 0.8)",                "margin": 8            },            "tooltip": {                "show": true,                "trigger": "item",                "triggerOn": "mousemove|click",                "axisPointer": {                    "type": "line"                },                "showContent": true,                "alwaysShowContent": false,                "showDelay": 0,                "hideDelay": 100,                "formatter": "{b} <br/>{a}: {c}",                "textStyle": {                    "fontSize": 14                },                "borderWidth": 0,                "padding": 5            },            "rippleEffect": {                "show": true,                "brushType": "stroke",                "scale": 2.5,                "period": 4            }        }    ],    "legend": [        {            "data": [                "Huawei",                "Vivo",                "Oppo",                "Xiaomi",                "Apple",                "Others"            ],            "selected": {},            "type": "scroll",            "show": true,            "left": 0,            "orient": "horizontal",            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "padding": 5,            "itemGap": 10        }    ]};        chart_a5130f29eb0a4159a0af97ec3301f27d.setOption(option_a5130f29eb0a4159a0af97ec3301f27d);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script></body></html><h3 id="小米公司财报情况"><a href="#小米公司财报情况" class="headerlink" title="小米公司财报情况"></a>小米公司财报情况</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">FR = pd.read_csv(<span class="hljs-string">'Financial_Report_Xiaomi.csv'</span>)<br>FR = FR.sort_values(by=<span class="hljs-string">'年度'</span>)<br>FR<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>Index</th><th>年度</th><th>营业收入</th><th>归母净利润</th><th>毛利</th><th>主营利润率</th></tr></thead><tbody><tr><td>0</td><td>2015</td><td>668.11亿元</td><td>-75.81亿元</td><td>27.00亿元</td><td>-11.05%</td></tr><tr><td>1</td><td>2016</td><td>684.34亿元</td><td>5.53亿元</td><td>72.49亿元</td><td>1.94%</td></tr><tr><td>2</td><td>2017</td><td>1146.25亿元</td><td>-438.26亿元</td><td>151.54亿元</td><td>-36.29%</td></tr><tr><td>3</td><td>2018</td><td>1749.15亿元</td><td>135.54亿元</td><td>221.92亿元</td><td>8.31%</td></tr><tr><td>4</td><td>2019</td><td>2058.39亿元</td><td>100.44亿元</td><td>285.54亿元</td><td>6.24%</td></tr><tr><td>5</td><td>2020</td><td>2458.66亿元</td><td>203.56亿元</td><td>367.52亿元</td><td>8.24%</td></tr></tbody></table></div><h3 id="全球市场Top国家-地区可视化"><a href="#全球市场Top国家-地区可视化" class="headerlink" title="全球市场Top国家/地区可视化"></a>全球市场Top国家/地区可视化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">Global_top5 = pd.read_csv(<span class="hljs-string">'Global_Top5.csv'</span>)<br><br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Map, Geo<br><br>value = Global_top5[<span class="hljs-string">'rank'</span>].tolist()<br>attr = Global_top5[<span class="hljs-string">'country'</span>].tolist()<br>map = Map( init_opts=opts.InitOpts(width=<span class="hljs-string">"1900px"</span>, height=<span class="hljs-string">"900px"</span>, bg_color=<span class="hljs-string">"#ADD8E6"</span>,<br>                                       page_title=<span class="hljs-string">"-"</span>,theme=ThemeType.LIGHT))<br><br>map.add(<span class="hljs-string">"Rank"</span>,[list(z) <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> zip(attr, value)],is_map_symbol_show=<span class="hljs-literal">False</span>,<br>    maptype=<span class="hljs-string">"world"</span>,label_opts=opts.LabelOpts(is_show=<span class="hljs-literal">False</span>),)<br><br>map.set_global_opts(title_opts = opts.TitleOpts(title=<span class="hljs-string">'全球销量Top5国家和地区（不完全统计，至2021/05）'</span>),<br>    legend_opts=opts.LegendOpts(is_show=<span class="hljs-literal">False</span>),<br>    visualmap_opts = opts.VisualMapOpts(min_=<span class="hljs-number">1</span>,max_=<span class="hljs-number">5</span>,range_color=map.colors))<br><br>map.render(<span class="hljs-string">'map.html'</span>)<br></code></pre></td></tr></table></figure><p>&lt;!DOCTYPE html&gt;</p><html><head>    <meta charset="UTF-8">    <title>-</title>    <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=yes">            <script type="text/javascript" src="../../pyecharts-assets-master/assets/echarts.min.js"></script>        <script type="text/javascript" src="https://assets.pyecharts.org/assets/maps/world.js"></script>    <style type="text/css">        html,body{            height:100%;            width:100%    }    </style></head><body onresize="resizeFresh()">    <div id="738b6258e1184f95a31b7f9acb9cf69a" class="chart-container" style="width:100%; height:495%; margin:auto; top:0px"></div>    <script>        var chart_738b6258e1184f95a31b7f9acb9cf69a = echarts.init(            document.getElementById('738b6258e1184f95a31b7f9acb9cf69a'), 'light', {renderer: 'canvas'});        var option_738b6258e1184f95a31b7f9acb9cf69a = {    "backgroundColor": "#ADD8E6",    "animation": true,    "animationThreshold": 2000,    "animationDuration": 1000,    "animationEasing": "cubicOut",    "animationDelay": 0,    "animationDurationUpdate": 300,    "animationEasingUpdate": "cubicOut",    "animationDelayUpdate": 0,    "series": [        {            "type": "map",            "name": "Rank",            "label": {                "show": false,                "position": "top",                "margin": 8            },            "mapType": "world",            "data": [                {                    "name": "Belarus",                    "value": 1                },                {                    "name": "Greece",                    "value": 1                },                {                    "name": "India",                    "value": 1                },                {                    "name": "Myanmar",                    "value": 1                },                {                    "name": "Poland",                    "value": 1                },                {                    "name": "Spain",                    "value": 1                },                {                    "name": "Ukraine",                    "value": 1                },                {                    "name": "Croatia",                    "value": 1                },                {                    "name": "France",                    "value": 2                },                {                    "name": "Latvia",                    "value": 2                },                {                    "name": "Nepal",                    "value": 1                },                {                    "name": "Russia",                    "value": 1                },                {                    "name": "Slovakia",                    "value": 2                },                {                    "name": "Austria",                    "value": 3                },                {                    "name": "Cambodia",                    "value": 3                },                {                    "name": "Hungary",                    "value": 3                },                {                    "name": "Israel",                    "value": 3                },                {                    "name": "Laos",                    "value": 3                },                {                    "name": "Lithuania",                    "value": 3                },                {                    "name": "Nigeria",                    "value": 3                },                {                    "name": "Peru",                    "value": 3                },                {                    "name": "Portugal",                    "value": 3                },                {                    "name": "Qatar",                    "value": 3                },                {                    "name": "Sweden",                    "value": 3                },                {                    "name": "Turkey",                    "value": 3                },                {                    "name": "China",                    "value": 4                },                {                    "name": "Colombia",                    "value": 4                },                {                    "name": "Czech Republic",                    "value": 4                },                {                    "name": "Egypt",                    "value": 4                },                {                    "name": "Germany",                    "value": 4                },                {                    "name": "Indonesia",                    "value": 4                },                {                    "name": "Italy",                    "value": 4                },                {                    "name": "Kenya",                    "value": 4                },                {                    "name": "Kuwait",                    "value": 4                },                {                    "name": "Netherlands",                    "value": 4                },                {                    "name": "Romania",                    "value": 4                },                {                    "name": "Saudi Arabia",                    "value": 4                },                {                    "name": "Slovenia",                    "value": 4                },                {                    "name": "South Korea",                    "value": 4                },                {                    "name": "United Arab Emirates",                    "value": 4                },                {                    "name": "Brazil",                    "value": 5                },                {                    "name": "Chile",                    "value": 5                },                {                    "name": "Estonia",                    "value": 5                },                {                    "name": "Malaysia",                    "value": 5                },                {                    "name": "Mexico",                    "value": 5                },                {                    "name": "Singapore",                    "value": 5                },                {                    "name": "Sri Lanka",                    "value": 5                },                {                    "name": "Switzerland",                    "value": 5                }            ],            "roam": true,            "aspectScale": 0.75,            "nameProperty": "name",            "selectedMode": false,            "zoom": 1,            "mapValueCalculation": "sum",            "showLegendSymbol": false,            "emphasis": {}        }    ],    "legend": [        {            "data": [                "Rank"            ],            "selected": {                "Rank": true            },            "show": false,            "padding": 5,            "itemGap": 10,            "itemWidth": 25,            "itemHeight": 14        }    ],    "tooltip": {        "show": true,        "trigger": "item",        "triggerOn": "mousemove|click",        "axisPointer": {            "type": "line"        },        "showContent": true,        "alwaysShowContent": false,        "showDelay": 0,        "hideDelay": 100,        "textStyle": {            "fontSize": 14        },        "borderWidth": 0,        "padding": 5    },    "title": [        {            "text": "\u5168\u7403\u9500\u91cfTop5\u56fd\u5bb6\u548c\u5730\u533a\uff08\u4e0d\u5b8c\u5168\u7edf\u8ba1\uff0c\u81f32021/05\uff09",            "padding": 5,            "itemGap": 10        }    ],    "visualMap": {        "show": true,        "type": "continuous",        "min": 1,        "max": 5,        "inRange": {            "color": [                "#c23531",                "#2f4554",                "#61a0a8",                "#d48265",                "#749f83",                "#ca8622",                "#bda29a",                "#6e7074",                "#546570",                "#c4ccd3",                "#f05b72",                "#ef5b9c",                "#f47920",                "#905a3d",                "#fab27b",                "#2a5caa",                "#444693",                "#726930",                "#b2d235",                "#6d8346",                "#ac6767",                "#1d953f",                "#6950a1",                "#918597"            ]        },        "calculable": true,        "inverse": false,        "splitNumber": 5,        "orient": "vertical",        "showLabel": true,        "itemWidth": 20,        "itemHeight": 140,        "borderWidth": 0    }};        chart_738b6258e1184f95a31b7f9acb9cf69a.setOption(option_738b6258e1184f95a31b7f9acb9cf69a);    </script>    <script>       var x=window.innerWidth;    function resizeFresh(){        if(x!=window.innerWidth)            location.reload();    }    </script><script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"left","width":150,"height":300},"mobile":{"show":true},"log":false});</script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题任务&quot;&gt;&lt;a href=&quot;#赛题任务&quot; class=&quot;headerlink&quot; title=&quot;赛题任务&quot;&gt;&lt;/a&gt;赛题任务&lt;/h2&gt;&lt;p&gt;　　&lt;strong&gt;题目1：&lt;/strong&gt;&lt;br&gt;　　分析小米公司手机业务目前所处的宏观经营环境以及产业环境。&lt;br&gt;　
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[赛后总结]山东省第二届数据应用创新创业大赛-主赛场——疫情密切接触人员追踪(Rank16)</title>
    <link href="http://meurice.xyz/2021/ckotxwiex000c4wlxduc86djy/"/>
    <id>http://meurice.xyz/2021/ckotxwiex000c4wlxduc86djy/</id>
    <published>2021-04-03T15:13:06.000Z</published>
    <updated>2021-05-18T10:57:31.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>　　过去一年所参加过的各种类型的竞赛，表格、CV、NLP…，性能优化是第一次接触，对这场比赛也投入了不少时间和精力，以下对这场比赛进行复盘和总结。  </p><h2 id="赛题介绍"><a href="#赛题介绍" class="headerlink" title="赛题介绍"></a>赛题介绍</h2><h3 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h3><p>　　通过筛选个人基本信息、个人防疫信息、亮码位置、亮码时间等数据，判定直接密接人员，间接密接人员，判定疫情传播风险等级，辅助决策疫情防控力度。  </p><h3 id="评分标准"><a href="#评分标准" class="headerlink" title="评分标准"></a>评分标准</h3><p>　　准确率分数使用<strong>macro F1</strong>计算。</p><p>　　直接密接人员：与确诊患者亮码时间差的绝对值在5分钟内，距离在10米以内。<br>　　间接密接人员：与直接密接人员的亮码时间差的绝对值在5分钟内，距离在10米以内。<br>　　如果既是直接密接人员又是间接密接人员，统一归类为直接密接人员。</p><p>　　距离计算参考函数如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> radians, cos, sin, asin, sqrt<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geodistance</span><span class="hljs-params">(lng1, lat1, lng2, lat2)</span>:</span><br>lng1, lat1, lng2, lat2 = map(radians, [float(lng1), float(lat1), float(lng2), float(lat2)])<br>    dlon = lng2-lng1<br>    dlat = lat2-lat1<br>    a = sin(dlat/<span class="hljs-number">2</span>)**<span class="hljs-number">2</span> + cos(lat1) * cos(lat2) * sin(dlon/<span class="hljs-number">2</span>)**<span class="hljs-number">2</span><br>    distance = <span class="hljs-number">2</span> * asin(sqrt(a)) * <span class="hljs-number">6371.393</span> * <span class="hljs-number">1000</span><br>    distance = round(distance, <span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">return</span> distance<br></code></pre></td></tr></table></figure></p><h3 id="数据集描述"><a href="#数据集描述" class="headerlink" title="数据集描述"></a>数据集描述</h3><p>　　<strong>个人轨迹数据（df_travel.csv）</strong>：<br>　　id：String，人员唯一ID<br>　　usetime：Date，亮码时间<br>　　lng：Float，亮码位置经度（小数点5位，GCJ02坐标系）<br>　　lat：Float，亮码位置纬度（小数点5位，GCJ02坐标系）  </p><p>　　<strong>确诊患者亮码记录（confirm.csv）</strong>：<br>　　亮码时间：Date，亮码时间；<br>　　lng：Float，亮码位置经度（小数点5位，GCJ02坐标系）<br>　　lat：Float，亮码位置纬度（小数点5位，GCJ02坐标系）<br>　　备注：String，确诊患者的具体行为<br>　　<em>只有一名确诊患者</em></p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>　　整体上来看，方案比较常规，决赛还未开始，对于这题有没有一些特殊的方法，还需要等待答辩结束。  位于Rank5的江离重楼大佬在复赛结束后就分享了自己的代码和思路<br>　　为每条轨迹记录添加唯一索引，先根据确诊人员信息和条件判断出直接密接的记录，根据这些记录筛选每个id在接触时间以后的所有记录，最后再根据这些记录和条件判断间接密接人员，<strong>先初筛，后细筛</strong>。</p><h3 id="直接密接人员"><a href="#直接密接人员" class="headerlink" title="直接密接人员"></a>直接密接人员</h3><p>　　轨迹数据的规模为200万+条，确诊人员记录约为50条，规模并不大，所以直接考虑计算所有点对之间的Euclidean Distance / CityBlock Distance，筛选出亮码时间差在300秒以内以及经纬度距离在0.00025内的点对，再根据经纬度计算精确距离差，筛选出直接密接人员。<br>　　在复赛阶段对这个方案又做了一些小优化，在线下环境成绩有所提升。由于确诊人员记录数量极少，所以根据这些点的经纬度及时间可以先大幅缩小搜索范围，即先使用集合运算挑选出处在可能范围内的人员轨迹记录，再做如上操作，代码如下。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_idx_direct</span><span class="hljs-params">(candidate, target)</span>:</span><br>    set_target_time = set([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.time <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i - <span class="hljs-number">300</span>,i + <span class="hljs-number">301</span>)]) <br>    set_target_lng = set(np.around([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.lng <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> np.arange(i - <span class="hljs-number">0.00025</span>,i + <span class="hljs-number">0.00025</span>,<span class="hljs-number">0.00001</span>)], <span class="hljs-number">5</span>))<br>    set_target_lat = set(np.around([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.lat <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> np.arange(i - <span class="hljs-number">0.00025</span>,i + <span class="hljs-number">0.00025</span>,<span class="hljs-number">0.00001</span>)], <span class="hljs-number">5</span>))<br><br>    candidate_ = candidate[(<br>                    candidate.time.isin(list(set_target_time))) &amp; (<br>                    np.round(candidate.lng, <span class="hljs-number">5</span>).isin(list(set_target_lng))) &amp; (<br>                    np.round(candidate.lat, <span class="hljs-number">5</span>).isin(list(set_target_lat)))].reset_index(drop=<span class="hljs-literal">True</span>)<br><br>    time_diff = np.where(<br>                    abs(cdist(candidate_[[<span class="hljs-string">'time'</span>,<span class="hljs-string">'temp'</span>]],<br>                        target[[<span class="hljs-string">'time'</span>,<span class="hljs-string">'temp'</span>]], metric=<span class="hljs-string">'cityblock'</span>)) &lt;= <span class="hljs-number">300</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    distance = np.where(<br>                    abs(cdist(candidate_[[<span class="hljs-string">'lng'</span>, <span class="hljs-string">'lat'</span>]],<br>                        target[[<span class="hljs-string">'lng'</span>, <span class="hljs-string">'lat'</span>]])) &lt;= <span class="hljs-number">0.00025</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    result_mat = time_diff * distance<br><br>    c_idx = np.where(result_mat == <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>    t_idx = np.where(result_mat == <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br><br>    distance = geodistance(candidate_.iloc[c_idx, <span class="hljs-number">3</span>],<br>                           candidate_.iloc[c_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">1</span>])<br><br>    c_result = c_idx[np.where(distance &lt;= <span class="hljs-number">10</span>)[<span class="hljs-number">0</span>]]<br>    <span class="hljs-comment"># t_result = t_idx[np.where(distance &lt;= 10)[0]]</span><br>   <br>    <span class="hljs-keyword">return</span> candidate_.loc[list(set(c_result)), <span class="hljs-string">'idx'</span>].tolist()<br></code></pre></td></tr></table></figure><br>　　<strong>对距离计算函数进行了修改</strong>，使用numpy，改为矩阵并行计算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numexpr <span class="hljs-keyword">as</span> ne<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geodistance</span><span class="hljs-params">(lng1, lat1, lng2, lat2)</span>:</span><br>    lng1 = np.radians(np.array(lng1))<br>    lat1 = np.radians(np.array(lat1))<br>    lng2 = np.radians(np.array(lng2))<br>    lat2 = np.radians(np.array(lat2))<br>    <span class="hljs-keyword">return</span> np.round(ne.evaluate(<span class="hljs-string">"2 * arcsin(sqrt(sin((lat2 - lat1) / 2) ** 2 + cos(lat1) * cos(lat2) * sin((lng2 - lng1) / 2) ** 2)) * 6371.393 * 1000"</span>), <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure></p><h3 id="间接密接人员"><a href="#间接密接人员" class="headerlink" title="间接密接人员"></a>间接密接人员</h3><p>　　关于间接密接人员的搜索，尝试了两种方案，一种是使用KD树，另一种是将经纬度以一定的尺度网格化（0.0001），对于直接密接人员的记录，搜索其附近的九个格子。<br>　　我所使用的是KD树的方案，然而比赛结束后看到Rank5 江离.重楼大佬在群里的分享，也是使用的网格化搜索的方案，不过语言方面使用的是C++，这才意识到针对计算密集型程序Python和C++巨大的效率差距，初赛阶段看到以Python作为入口语言，就默认用Python实现了，复赛阶段也一直没向这个方向进行优化，最后只排到了Rank16，这也是做这次比赛的遗憾之处吧~</p><h4 id="K-D-Tree"><a href="#K-D-Tree" class="headerlink" title="K-D Tree"></a>K-D Tree</h4><p>　　kd（k-dimensional）树的概念自1975年提出，试图解决的是在k维空间为数据集建立索引的问题，即已知样本空间如何快速查询得到其近邻？它的思想如同分治法，即：利用已有数据对k维空间进行切分。<br>　　Scipy中提供了KDTree的接口，scipy.spatial.cKDTree，其底层使用C语言实现，效率更高。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_idx_indirect_kd</span><span class="hljs-params">(candidate, target)</span>:</span><br>    candidate.reset_index(inplace=<span class="hljs-literal">True</span>, drop=<span class="hljs-literal">True</span>)<br>    target.reset_index(inplace=<span class="hljs-literal">True</span>, drop=<span class="hljs-literal">True</span>)<br>    <br>    kd_time_diff = cKDTree(candidate[[<span class="hljs-string">'time'</span>]])<br>    time_diff_idx = kd_time_diff.query_ball_point(target[[<span class="hljs-string">'time'</span>]].values.tolist(), r = <span class="hljs-number">300</span>, p = <span class="hljs-number">1</span>)<br><br>    kd_distance = cKDTree(candidate[[<span class="hljs-string">'lng'</span>,<span class="hljs-string">'lat'</span>]])<br>    distance_idx = kd_distance.query_ball_point(target[[<span class="hljs-string">'lng'</span>,<span class="hljs-string">'lat'</span>]].values.tolist(), r = <span class="hljs-number">0.00025</span>, p = <span class="hljs-number">2</span>)<br><br>    intersection = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(distance_idx)):<br>        intersection.append(list(set(distance_idx[i]).intersection(set(time_diff_idx[i]))))<br><br>    c_idx = []<br>    t_idx = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(intersection)):<br>        c_idx.extend(intersection[i])<br>        t_idx.extend([i] * len(intersection[i]))<br><br>    distance = geodistance(candidate.iloc[c_idx, <span class="hljs-number">3</span>],<br>                           candidate.iloc[c_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">3</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">2</span>])<br><br>    c_result = [c_idx[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (np.where((distance &lt;= <span class="hljs-number">10</span>))[<span class="hljs-number">0</span>]).tolist()]<br><br>    <span class="hljs-keyword">return</span> candidate.iloc[list(set(c_result)), <span class="hljs-number">0</span>].tolist()<br></code></pre></td></tr></table></figure></p><h4 id="网格化搜索"><a href="#网格化搜索" class="headerlink" title="网格化搜索"></a>网格化搜索</h4><p>　　网格化搜索实现起来相对比较简单，其思想类似于GeoHash，即将二位的经纬度坐标点映射到一维，但GeoHash在这里并不适合，一方面是效率过低，另一方面，和直接将经纬度点映射到0,1,…,n的效果相同。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/ShanDongBD_covid/2095550-d86dc182d102451b.png" srcset="/img/loading.gif" lazyload alt="GeoHash"><br>　　具体实现待补充…</p><h2 id="关于效率"><a href="#关于效率" class="headerlink" title="关于效率"></a>关于效率</h2><p>　　复赛结束时，线上成绩约为30s，并不算优秀，但站在纯Python语言的角度来看应该不算慢。<br>　　除计算外，I/O方面的优化也是本题的上分点之一。<br>　　关于效率的计算，比较奇怪的是，线上评测成绩的抖动幅度似乎不小，我个人第一次和第二次提交的代码几乎相同，但线上成绩提升了近30%，除此之外，主办方所的线上环境只开放了CPU的一个核心，但经过实验，多进程对该题是work的，能带来大概25%的提升。但如果时间效率足够高的话，多进程显然就不太合适了，进程创建和切换所带来的开销已经不能忽略不计了。<br>　　待补充…</p><h2 id="关于准确率"><a href="#关于准确率" class="headerlink" title="关于准确率"></a>关于准确率</h2><p>　　初赛使用该方案的macro F1为1.0，但是对于复赛阶段的数据为0.999179，针对复赛的数据如何达到1.0还需要等决赛答辩后学习思路。<br>　　待补充…</p><h2 id="个人实现完整代码"><a href="#个人实现完整代码" class="headerlink" title="个人实现完整代码"></a>个人实现完整代码</h2><p>　　<strong>由纯Python实现</strong>，和C/C++等语言的实现相比，时间效率并不算高，仅供参考。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cdist<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> cKDTree<br><span class="hljs-keyword">import</span> numexpr <span class="hljs-keyword">as</span> ne<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">geodistance</span><span class="hljs-params">(lng1, lat1, lng2, lat2)</span>:</span><br>    lng1 = np.radians(np.array(lng1))<br>    lat1 = np.radians(np.array(lat1))<br>    lng2 = np.radians(np.array(lng2))<br>    lat2 = np.radians(np.array(lat2))<br>    <span class="hljs-keyword">return</span> np.round(ne.evaluate(<span class="hljs-string">"2 * arcsin(sqrt(sin((lat2 - lat1) / 2) ** 2 + cos(lat1) * cos(lat2) * sin((lng2 - lng1) / 2) ** 2)) * 6371.393 * 1000"</span>), <span class="hljs-number">5</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_idx_direct</span><span class="hljs-params">(candidate, target)</span>:</span><br>    set_target_time = set([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.time <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i - <span class="hljs-number">300</span>,i + <span class="hljs-number">301</span>)]) <br>    set_target_lng = set(np.around([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.lng <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> np.arange(i - <span class="hljs-number">0.00025</span>,i + <span class="hljs-number">0.00025</span>,<span class="hljs-number">0.00001</span>)], <span class="hljs-number">5</span>))<br>    set_target_lat = set(np.around([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> target.lat <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> np.arange(i - <span class="hljs-number">0.00025</span>,i + <span class="hljs-number">0.00025</span>,<span class="hljs-number">0.00001</span>)], <span class="hljs-number">5</span>))<br><br>    candidate_ = candidate[(<br>                    candidate.time.isin(list(set_target_time))) &amp; (<br>                    np.round(candidate.lng, <span class="hljs-number">5</span>).isin(list(set_target_lng))) &amp; (<br>                    np.round(candidate.lat, <span class="hljs-number">5</span>).isin(list(set_target_lat)))].reset_index(drop=<span class="hljs-literal">True</span>)<br><br>    time_diff = np.where(<br>                    abs(cdist(candidate_[[<span class="hljs-string">'time'</span>,<span class="hljs-string">'temp'</span>]],<br>                        target[[<span class="hljs-string">'time'</span>,<span class="hljs-string">'temp'</span>]], metric=<span class="hljs-string">'cityblock'</span>)) &lt;= <span class="hljs-number">300</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    distance = np.where(<br>                    abs(cdist(candidate_[[<span class="hljs-string">'lng'</span>, <span class="hljs-string">'lat'</span>]],<br>                        target[[<span class="hljs-string">'lng'</span>, <span class="hljs-string">'lat'</span>]])) &lt;= <span class="hljs-number">0.00025</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>    result_mat = time_diff * distance<br><br>    c_idx = np.where(result_mat == <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br>    t_idx = np.where(result_mat == <span class="hljs-number">1</span>)[<span class="hljs-number">1</span>]<br><br>    distance = geodistance(candidate_.iloc[c_idx, <span class="hljs-number">3</span>],<br>                           candidate_.iloc[c_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">1</span>])<br><br>    c_result = c_idx[np.where(distance &lt;= <span class="hljs-number">10</span>)[<span class="hljs-number">0</span>]]<br>    t_result = t_idx[np.where(distance &lt;= <span class="hljs-number">10</span>)[<span class="hljs-number">0</span>]]<br><br>    <span class="hljs-keyword">return</span> candidate_.iloc[list(set(c_result)), <span class="hljs-number">4</span>].tolist(), pd.concat([candidate_.iloc[c_result,[<span class="hljs-number">0</span>,<span class="hljs-number">6</span>]].reset_index(drop=<span class="hljs-literal">True</span>), (target.iloc[t_result,<span class="hljs-number">6</span>]).reset_index(drop=<span class="hljs-literal">True</span>)],axis=<span class="hljs-number">1</span>,ignore_index=<span class="hljs-literal">True</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_idx_indirect_kd</span><span class="hljs-params">(candidate, target)</span>:</span><br>    candidate.reset_index(inplace=<span class="hljs-literal">True</span>, drop=<span class="hljs-literal">True</span>)<br>    target.reset_index(inplace=<span class="hljs-literal">True</span>, drop=<span class="hljs-literal">True</span>)<br>    <br>    kd_time_diff = cKDTree(candidate[[<span class="hljs-string">'time'</span>]])<br>    time_diff_idx = kd_time_diff.query_ball_point(target[[<span class="hljs-string">'time'</span>]].values.tolist(), r = <span class="hljs-number">300</span>, p = <span class="hljs-number">1</span>)<br><br>    kd_distance = cKDTree(candidate[[<span class="hljs-string">'lng'</span>,<span class="hljs-string">'lat'</span>]])<br>    distance_idx = kd_distance.query_ball_point(target[[<span class="hljs-string">'lng'</span>,<span class="hljs-string">'lat'</span>]].values.tolist(), r = <span class="hljs-number">0.00025</span>, p = <span class="hljs-number">1</span>)<br><br>    intersection = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(distance_idx)):<br>        intersection.append(list(set(distance_idx[i]).intersection(set(time_diff_idx[i]))))<br><br>    c_idx = []<br>    t_idx = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(intersection)):<br>        c_idx.extend(intersection[i])<br>        t_idx.extend([i] * len(intersection[i]))<br><br>    distance = geodistance(candidate.iloc[c_idx, <span class="hljs-number">3</span>],<br>                           candidate.iloc[c_idx, <span class="hljs-number">2</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">3</span>],<br>                           target.iloc[t_idx, <span class="hljs-number">2</span>])<br><br>    c_result = [c_idx[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (np.where((distance &lt;= <span class="hljs-number">10</span>))[<span class="hljs-number">0</span>]).tolist()]<br>    <br>    <span class="hljs-keyword">return</span> candidate.iloc[list(set(c_result)), <span class="hljs-number">0</span>].tolist()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(dirname, savePath)</span>:</span><br>    confirmPath = os.path.join(dirname, <span class="hljs-string">"confirm.csv"</span>)<br>    travelPath = os.path.join(dirname, <span class="hljs-string">"df_travel.csv"</span>)<br>    <br>    confirmed = pd.read_csv(confirmPath)<br>    df_travel = pd.read_csv(travelPath)<br><br>    confirmed[<span class="hljs-string">'亮码时间'</span>] = pd.to_datetime(confirmed[<span class="hljs-string">'亮码时间'</span>],format=<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>)<br>    df_travel[<span class="hljs-string">'usetime'</span>] = pd.to_datetime(df_travel[<span class="hljs-string">'usetime'</span>],format=<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>)<br>    <br>    df_travel_length = len(df_travel)<br><br>    confirmed[<span class="hljs-string">'idx'</span>] = range(len(confirmed))<br>    df_travel[<span class="hljs-string">'idx'</span>] = range(df_travel_length)<br><br>    confirmed[<span class="hljs-string">'temp'</span>] = <span class="hljs-number">0</span><br>    df_travel[<span class="hljs-string">'temp'</span>] = <span class="hljs-number">0</span><br><br>    confirmed[<span class="hljs-string">'time'</span>] = (pd.to_timedelta(confirmed[<span class="hljs-string">'亮码时间'</span>] - datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>)).dt.total_seconds()).astype(int)<br>    df_travel[<span class="hljs-string">'time'</span>] = (pd.to_timedelta(df_travel[<span class="hljs-string">'usetime'</span>] - datetime(<span class="hljs-number">2020</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>)).dt.total_seconds()).astype(int)<br>    <br>    direct_idx, df_direct_min_time_ = gen_idx_direct(df_travel, confirmed)<br>    df_direct_min_time_.columns = [<span class="hljs-string">'id'</span>,<span class="hljs-string">'ctime_direct'</span>, <span class="hljs-string">'ctime_confirm'</span>]<br>    <br>    df_direct = df_travel[df_travel[<span class="hljs-string">'idx'</span>].isin(direct_idx)]<br><br>    df_travel = pd.merge(df_travel, df_direct_min_time_.groupby(<span class="hljs-string">'id'</span>).agg(&#123;<span class="hljs-string">'ctime_direct'</span>:min&#125;), on=<span class="hljs-string">'id'</span>, how=<span class="hljs-string">'left'</span>)<br>    df_travel.ctime_direct.fillna(<span class="hljs-number">-1</span>,inplace=<span class="hljs-literal">True</span>)<br><br>    df_travel[<span class="hljs-string">'direct'</span>] = <span class="hljs-number">0</span><br>    df_travel.loc[(df_travel[<span class="hljs-string">'time'</span>] &gt;= df_travel[<span class="hljs-string">'ctime_direct'</span>]) &amp; (df_travel[<span class="hljs-string">'ctime_direct'</span>] &gt;= <span class="hljs-number">0</span>),<span class="hljs-string">'direct'</span>] = <span class="hljs-number">1</span><br><br>    df_direct = df_travel[df_travel[<span class="hljs-string">'direct'</span>] == <span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment">#df_indirect_min_time = gen_idx_indirect_kd(df_travel[df_travel['direct'] == 0], df_direct)</span><br>    <span class="hljs-comment">#indirect_id = df_indirect_min_time.id_i.tolist()</span><br><br>    p_i = multiprocessing.Pool(<span class="hljs-number">3</span>)<br>    indirect_id_0 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="hljs-number">0</span>, df_travel_length, <span class="hljs-number">3</span>)], df_direct))<br>    indirect_id_1 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="hljs-number">1</span>, df_travel_length, <span class="hljs-number">3</span>)], df_direct))<br>    indirect_id_2 = p_i.apply_async(gen_idx_indirect_kd, args=(df_travel.iloc[np.arange(<span class="hljs-number">2</span>, df_travel_length, <span class="hljs-number">3</span>)], df_direct))<br>    p_i.close()<br>    p_i.join()<br><br>    submission = pd.DataFrame(&#123;<span class="hljs-string">'id'</span>:list(set(df_travel[<span class="hljs-string">'id'</span>].tolist())),<span class="hljs-string">'label'</span>:<span class="hljs-number">0</span>&#125;)<br>    submission.loc[submission[<span class="hljs-string">'id'</span>].isin(list(set([i <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> [indirect_id_0.get(),indirect_id_1.get(),indirect_id_2.get()] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l]))),<span class="hljs-string">'label'</span>] = <span class="hljs-number">2</span><br>    submission.loc[submission[<span class="hljs-string">'id'</span>].isin(df_direct[<span class="hljs-string">'id'</span>].tolist()),<span class="hljs-string">'label'</span>] = <span class="hljs-number">1</span><br>    submission.to_csv(savePath,index=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    dirname = sys.argv[<span class="hljs-number">1</span>]  <span class="hljs-comment"># 所需预测的文件夹</span><br>    savePath = sys.argv[<span class="hljs-number">2</span>]  <span class="hljs-comment"># 预测结果保存文件</span><br>    main(dirname, savePath)<br></code></pre></td></tr></table></figure></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;　　过去一年所参加过的各种类型的竞赛，表格、CV、NLP…，性能优化是第一次接触，对这场比赛也投入了不少时间和精力，以下对这
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习笔记]Meta Learning(元学习)</title>
    <link href="http://meurice.xyz/2021/ckotxwiew000b4wlxdy9d3cw2/"/>
    <id>http://meurice.xyz/2021/ckotxwiew000b4wlxdy9d3cw2/</id>
    <published>2021-01-07T12:51:38.000Z</published>
    <updated>2021-01-08T15:52:06.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>　　Meta Learning = Learn to learn<br>　　Meta：How to learn a new model</p><h2 id="Meta-Learning"><a href="#Meta-Learning" class="headerlink" title="Meta Learning"></a>Meta Learning</h2><p>　　Meta Learning即“学会学习”，学习了一些task后，机器学会如何去学习新的task，例如机器学习了task1——语音辨识，task2——图像辨识，…，然后给一个新的task（例如文本分类），面对这个新的task，机器能够快速的学习。<br><img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/0.png" srcset="/img/loading.gif" lazyload alt><br>　　其步骤和Machine Learning类似，其中不同的是Maching Learning需要找到一个Function <strong>f</strong>，而Meta Learning需要找到的是一个Learning algorithm <strong>F</strong>：<br>　　step1. define a set of learning algorithm<br>　　step2. goodness of learning algorithm<br>　　step3. pick the best learnDing algorithm<br><img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/1.png" srcset="/img/loading.gif" lazyload alt></p><h3 id="step1-Define-a-set-of-learning-algorithm"><a href="#step1-Define-a-set-of-learning-algorithm" class="headerlink" title="step1. Define a set of learning algorithm"></a>step1. Define a set of learning algorithm</h3><p>　　首先准备训练资料，其为一堆训练数据D和一堆f的集合，对于每一个task来说，整个流程构成的不再是像Machine Learning中的参数θ，而是构成了一个f，即每当使用新的参数进行初始化时，我们定义了一个新的f。<br><img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/2.png" srcset="/img/loading.gif" lazyload alt></p><h3 id="step2-Define-the-goodness-of-a-Function-F"><a href="#step2-Define-the-goodness-of-a-Function-F" class="headerlink" title="step2. Define the goodness of a Function F"></a>step2. Define the goodness of a Function F</h3><p>　　对于每一个task，都能得到f，并且有损失l。<br><img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/3.png" srcset="/img/loading.gif" lazyload alt><br>　　N：N tasks<br>　　l^n：Testing loss for task n after training<br><img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/4.png" srcset="/img/loading.gif" lazyload alt></p><h2 id="Omniglot——Few-shot-Classification"><a href="#Omniglot——Few-shot-Classification" class="headerlink" title="Omniglot——Few-shot Classification"></a>Omniglot——Few-shot Classification</h2><p>　　Omniglot 数据集总共包含 5050 个字母。我们通常将这些分成一组包含 3030 个字母的背景（background）集和一组包含 2020 个字母的评估（evaluation）集。  </p><h3 id="N-ways-K-shot"><a href="#N-ways-K-shot" class="headerlink" title="N-ways K-shot"></a>N-ways K-shot</h3><p>　　N-ways K-shot： In each training and test tasks, there are N classes, each has K examples.<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/5.png" srcset="/img/loading.gif" lazyload alt="example"></p><h2 id="MAML"><a href="#MAML" class="headerlink" title="MAML"></a>MAML</h2><p>　　MAML的基本思想是：对于每一个task中学到的f，其仅决定参数的赋值方式，而不决定模型架构等内容，网络结构是提前固定的。  </p><h3 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h3><p>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/6.png" srcset="/img/loading.gif" lazyload alt>  </p><p>　　最小化L(Φ)：<strong>Gradient Descent</strong><br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/7.png" srcset="/img/loading.gif" lazyload alt></p><h3 id="MAML对比Model-Pre-training"><a href="#MAML对比Model-Pre-training" class="headerlink" title="MAML对比Model Pre-training"></a>MAML对比Model Pre-training</h3><p>　　MAML不在意Φ在train task上的表现如何，而是在意用Φ训练出的参数θ hat ^ n表现如何。<br>　　而Model Pre-training希望找到在task1和task2上损失都最小的Φ。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/10.png" srcset="/img/loading.gif" lazyload alt><br>　　如下图，可能Φ在task1和task2上表现都不太好，但假设拿这个Φ做初始参数，对于task1和task2来说，都能比较容易的找到最佳参数。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/8.png" srcset="/img/loading.gif" lazyload alt><br>　　而对于Model Pre-training来说，希望找到的是如下图所示的这个Φ，但不保证拿这个Φ去训练后能得到好的θ hat ^ n。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/9.png" srcset="/img/loading.gif" lazyload alt><br>　　MAML中参数仅被update一次后就被当作最终的参数。其一原因是需要获得的结果参数量过大，多次更新带来的时间成本大大增加。另一原因是MAML的训练目标是训练后得到非常好的Init，希望更新一次后就能得到非常好的效果，一般训练时只更新一次参数，但测试的时候更新多次。<br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/11.png" srcset="/img/loading.gif" lazyload alt><br>  <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/meta_learning/12.png" srcset="/img/loading.gif" lazyload alt></p><h2 id="Reptile"><a href="#Reptile" class="headerlink" title="Reptile"></a>Reptile</h2><h2 id="Gradient-Descent-as-LSTM"><a href="#Gradient-Descent-as-LSTM" class="headerlink" title="Gradient Descent as LSTM"></a>Gradient Descent as LSTM</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;　　Meta Learning = Learn to lea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>中移集成（雄安产业研究院）首届OneCity编程大赛(Rank20+)</title>
    <link href="http://meurice.xyz/2020/ckotxwiev000a4wlx97slfib5/"/>
    <id>http://meurice.xyz/2020/ckotxwiev000a4wlx97slfib5/</id>
    <published>2020-12-03T04:33:49.000Z</published>
    <updated>2021-05-18T11:13:02.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题任务"><a href="#赛题任务" class="headerlink" title="赛题任务"></a>赛题任务</h2><p>　　选手需要建立模型，针对政务表格文件实现自动化分类。允许使用一些常见的开源预训练模型，如bert。<br>　　数据智能分类按照行业领域，将政务数据分为以下20个基础大类，分别是：生态环境、资源能源、信息产业、医疗卫生、文化休闲、财税金融、经济管理、教育科技、交通运输、工业、农业畜牧业、政法监察、城乡建设、商业贸易、旅游服务、气象水文测绘地震地理、外交外事、文秘行政、民政社区、劳动人事。</p><h2 id="初赛方案"><a href="#初赛方案" class="headerlink" title="初赛方案"></a>初赛方案</h2><p>　　参赛时赛事日程已过半，提交次数较少，仅考虑了一些简单的方案。<br>　　初赛阶段，文件标题基本完整，首先仅使用标题进行训练，预训练模型使用了RoBERTa-wwm-ext，使用五折CV。<br>　　读取文件content后，针对content单独训练bert，最后将title和content的raw_output按0.7、0.3加权平均，线上accuracy 0.985，rank 13。</p><h2 id="决赛方案"><a href="#决赛方案" class="headerlink" title="决赛方案"></a>决赛方案</h2><p>　　舍弃初赛方案——Bert训练标题+TextCNN训练Content，直接使用TextCNN训练标题+Content拼接后的内容，并且最终acc指标受文本长度影响较大。<br>　　训练前做了一定量的数据预处理工作，包括关键字提取、地理位置提取等，其中省市提取使用了<a href="https://github.com/DQinYuan/chinese_province_city_area_mapper" target="_blank" rel="noopener">cpca</a>。<br>　　由于花了大量的时间用于文件读取上，导致预处理不够深入，而预处理也是本题的一个关键上分点，此外还可以对网络增加例如文件长度等特征输入。最终决赛线上rank20+。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>　　仅供参考。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><br><span class="hljs-comment"># In[1]:</span><br><br><br><span class="hljs-keyword">import</span> warnings<br>warnings.simplefilter(<span class="hljs-string">'ignore'</span>)<br>get_ipython().run_line_magic(<span class="hljs-string">'matplotlib'</span>, <span class="hljs-string">'inline'</span>)<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment">#!pip install seaborn</span><br><span class="hljs-comment">#!pip install --user pandarallel</span><br><span class="hljs-comment">#!pip install --user toolkit4nlp</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> pandarallel <span class="hljs-keyword">import</span> pandarallel<br>pandarallel.initialize(progress_bar=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-comment"># In[2]:</span><br><br><br><span class="hljs-keyword">import</span> glob<br><span class="hljs-keyword">from</span> xlrd <span class="hljs-keyword">import</span> XLRDError<br><span class="hljs-keyword">import</span> os, sys<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> toolkit4nlp.utils <span class="hljs-keyword">import</span> DataGenerator, pad_sequences<br><span class="hljs-keyword">from</span> toolkit4nlp.models <span class="hljs-keyword">import</span> build_transformer_model, Model<br><span class="hljs-keyword">from</span> toolkit4nlp.layers <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> toolkit4nlp.tokenizers <span class="hljs-keyword">import</span> Tokenizer<br><span class="hljs-keyword">from</span> toolkit4nlp.optimizers <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br>train_paths = glob.glob(<span class="hljs-string">'中移编程大赛-初赛数据-开放/train/*'</span>)<br><span class="hljs-comment">#test_paths = glob.glob('/home/featurize/data/中移编程大赛-复赛数据-开放/test2/*')</span><br>example_sub = pd.read_csv(<span class="hljs-string">'中移编程大赛-复赛数据-开放/submit_example_test2.csv'</span>)<br>test_paths = example_sub[<span class="hljs-string">'filename'</span>].tolist()<br>df_label = pd.read_csv(<span class="hljs-string">'中移编程大赛-初赛数据-开放/answer_train.csv'</span>)<br>file2label = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i, item <span class="hljs-keyword">in</span> df_label.iterrows():<br>    file2label[os.path.split(item[<span class="hljs-string">'filename'</span>])[<span class="hljs-number">-1</span>]] = item[<span class="hljs-string">'label'</span>]<br><br>all_labels = set(file2label.values())<br>id2label = &#123;i: label <span class="hljs-keyword">for</span> i, label <span class="hljs-keyword">in</span> enumerate(all_labels)&#125;<br>label2id = &#123;label: i <span class="hljs-keyword">for</span> i, label <span class="hljs-keyword">in</span> enumerate(all_labels)&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span><span class="hljs-params">(path)</span>:</span><br>    df = <span class="hljs-literal">None</span><br><br>    columns = []<br>    content = []<br>    <span class="hljs-comment"># get label</span><br>    fname = os.path.split(path)[<span class="hljs-number">-1</span>]<br>    label = file2label.get(fname, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">try</span>:<br>        df = pd.read_excel(path)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">try</span>:<br>            df = pd.read_csv(path, error_bad_lines=<span class="hljs-literal">False</span>, encoding=<span class="hljs-string">'utf8'</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">if</span> df <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> len(df) &gt; <span class="hljs-number">0</span>:<br>        df = df.astype(str)<br>        columns = list(df.columns)<br>        <span class="hljs-comment">#content = df.to_numpy()[0].tolist()</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(df.to_numpy())):<br>            content = content + df.to_numpy()[i].tolist()<span class="hljs-comment"># + df.to_numpy()[1].tolist() + df.to_numpy()[2].tolist()</span><br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">10</span>):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment">#print(content)</span><br>    <span class="hljs-keyword">return</span> [label, fname, columns, content, fname]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_train_data</span><span class="hljs-params">(paths)</span>:</span><br>    data = []<br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> tqdm(paths):<br>        data.append(read_file(path))<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_test_data</span><span class="hljs-params">(paths)</span>:</span><br>    data = []<br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> tqdm(paths):<br>        data.append(read_file(<span class="hljs-string">'中移编程大赛-复赛数据-开放/'</span> + path))<br>    <span class="hljs-keyword">return</span> data<br>train_data = load_train_data(train_paths)<br>test_data = load_test_data(test_paths)<br><br><br><span class="hljs-comment"># In[3]:</span><br><br><br>only_title = [t <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> train_data <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> t[<span class="hljs-number">2</span>]]<br>has_content = [t <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> train_data <span class="hljs-keyword">if</span> t[<span class="hljs-number">2</span>]]<br>np.random.shuffle(has_content)<br>half = int(len(has_content) * <span class="hljs-number">0.5</span>)<br><br>np.random.shuffle(has_content)<br>half = int(len(has_content) * <span class="hljs-number">0.5</span>)<br><br>remove_title = [[t[<span class="hljs-number">0</span>], <span class="hljs-literal">None</span>] + t[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> has_content[:half]]<br>new_has_content = remove_title + has_content[half:]<br>train_data = only_title + new_has_content<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_title</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-keyword">try</span>:<br>        temp = x.replace(<span class="hljs-string">'train/'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'test1/'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'.xls'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'.csv'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'.xlsx'</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-string">'_'</span>, <span class="hljs-string">' '</span>).replace(<span class="hljs-string">'test2/'</span>, <span class="hljs-string">''</span>)   <br>        <span class="hljs-keyword">return</span> temp<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">""</span><br><br><br><br><br><span class="hljs-keyword">import</span> copy<br><span class="hljs-comment">#temp = copy.deepcopy(train_data)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(train_data):<br>    i[<span class="hljs-number">1</span>] = clean_title(i[<span class="hljs-number">1</span>])<br>    i[<span class="hljs-number">2</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">2</span>])<br>    i[<span class="hljs-number">3</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">3</span>])<br>    i[<span class="hljs-number">2</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">2</span>]))<br>    i[<span class="hljs-number">3</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">3</span>]))<br><br><br><span class="hljs-comment"># In[6]:</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(test_data):<br>    i[<span class="hljs-number">1</span>] = clean_title(i[<span class="hljs-number">1</span>])<br>    i[<span class="hljs-number">2</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">2</span>])<br>    i[<span class="hljs-number">3</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">3</span>])<br>    i[<span class="hljs-number">1</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">1</span>]))<br>    i[<span class="hljs-number">2</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">2</span>]))<br>    i[<span class="hljs-number">3</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">3</span>]))<br><br><br><span class="hljs-comment"># In[ ]:</span><br><br><br><br><br><br><span class="hljs-comment"># In[7]:</span><br><br><br>train = pd.DataFrame(train_data)<br>train.columns = [<span class="hljs-string">'label'</span>,<span class="hljs-string">'title'</span>,<span class="hljs-string">'columns'</span>,<span class="hljs-string">'content'</span>,<span class="hljs-string">'filename'</span>]<br><br><br><span class="hljs-comment"># In[8]:</span><br><br><br>train[<span class="hljs-string">'all'</span>] = (train[<span class="hljs-string">'title'</span>] + train[<span class="hljs-string">'columns'</span>] + train[<span class="hljs-string">'content'</span>])<br><span class="hljs-comment">#train = train[(train['all'] != '' )] </span><br><br><br><br>test=pd.DataFrame(test_data)<br>test.columns = [<span class="hljs-string">'label'</span>,<span class="hljs-string">'title'</span>,<span class="hljs-string">'columns'</span>,<span class="hljs-string">'content'</span>,<span class="hljs-string">'filename'</span>]<br><br><br><span class="hljs-comment"># In[11]:</span><br><br><br>test[<span class="hljs-string">'all'</span>] = (test[<span class="hljs-string">'title'</span>] + test[<span class="hljs-string">'columns'</span>] + test[<span class="hljs-string">'content'</span>])<br><br><br><br><span class="hljs-keyword">import</span> cpca<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_loc</span><span class="hljs-params">(info)</span>:</span><br>    <span class="hljs-comment">#info ='铁岭市清河区市广东省名牌产品工业类称号信息'</span><br>    info_ = [info]<br>    df = cpca.transform(info_)<br>    <span class="hljs-keyword">if</span>(df[<span class="hljs-string">'省'</span>][<span class="hljs-number">0</span>] != <span class="hljs-literal">None</span>):<br>        info = info.replace(df[<span class="hljs-string">'省'</span>][<span class="hljs-number">0</span>],<span class="hljs-string">''</span>)<br>    <span class="hljs-keyword">if</span>(df[<span class="hljs-string">'市'</span>][<span class="hljs-number">0</span>] != <span class="hljs-literal">None</span>):<br>        info = info.replace(df[<span class="hljs-string">'市'</span>][<span class="hljs-number">0</span>],<span class="hljs-string">''</span>)<br>    <span class="hljs-keyword">if</span>(df[<span class="hljs-string">'区'</span>][<span class="hljs-number">0</span>] != <span class="hljs-literal">None</span>):<br>        info = info.replace(df[<span class="hljs-string">'区'</span>][<span class="hljs-number">0</span>],<span class="hljs-string">''</span>)<br>    <span class="hljs-keyword">return</span> info<br>tqdm.pandas(desc=<span class="hljs-string">'pandas bar'</span>)<br>train[<span class="hljs-string">'all'</span>] = train.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_loc(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br>test[<span class="hljs-string">'all'</span>] = test.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_loc(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br><br>train[<span class="hljs-string">'all'</span>] = train.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_loc(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br>test[<span class="hljs-string">'all'</span>] = test.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_loc(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br><br><br><span class="hljs-comment"># In[14]:</span><br><br><br>error_read = test[test[<span class="hljs-string">'all'</span>] == <span class="hljs-string">''</span>]<br>error_read_filename = error_read.filename.tolist()<br>error_read<br><br><br><span class="hljs-comment"># In[15]:</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file_error</span><span class="hljs-params">(path)</span>:</span><br>    df = <span class="hljs-literal">None</span><br>    columns = []<br>    content = []<br>    <span class="hljs-comment"># get label</span><br>    fname = os.path.split(path)[<span class="hljs-number">-1</span>]<br>    label = file2label.get(fname, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">try</span>:<br>        df = pd.read_excel(path,sheet_name=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment">#df = pd.read_excel(path)</span><br>            df = pd.read_csv(path, error_bad_lines=<span class="hljs-literal">True</span>, encoding=<span class="hljs-string">'utf8'</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">if</span> df <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> len(df) &gt; <span class="hljs-number">0</span>:<br>        df = df.astype(str)<br>        columns = list(df.columns)<br>        <span class="hljs-comment">#content = df.to_numpy()[0].tolist()</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(df.to_numpy())):<br>            content = content + df.to_numpy()[i].tolist()<span class="hljs-comment"># + df.to_numpy()[1].tolist() + df.to_numpy()[2].tolist()</span><br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">10</span>):<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> [label, fname, columns, content, fname]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_test_data_error</span><span class="hljs-params">(paths)</span>:</span><br>    data = []<br>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> tqdm(paths):<br>        data.append(read_file_error(<span class="hljs-string">'中移编程大赛-复赛数据-开放/test2/'</span> + path))<br>    <span class="hljs-keyword">return</span> data<br>test_error_data = load_test_data_error(error_read_filename)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(test_error_data):<br>    i[<span class="hljs-number">1</span>] = clean_title(i[<span class="hljs-number">1</span>])<br>    i[<span class="hljs-number">2</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">2</span>])<br>    i[<span class="hljs-number">3</span>] = <span class="hljs-string">' '</span>.join(i[<span class="hljs-number">3</span>])<br>    i[<span class="hljs-number">1</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">1</span>]))<br>    i[<span class="hljs-number">2</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">2</span>]))<br>    i[<span class="hljs-number">3</span>]= <span class="hljs-string">''</span>.join(re.findall(<span class="hljs-string">r"[\u4e00-\u9fa5\s]"</span>,i[<span class="hljs-number">3</span>]))<br><br><br>test_error = pd.DataFrame(test_error_data)<br><br><br>test_error.columns = [<span class="hljs-string">'label'</span>,<span class="hljs-string">'title'</span>,<span class="hljs-string">'columns'</span>,<span class="hljs-string">'content'</span>,<span class="hljs-string">'filename'</span>]<br>test_error[<span class="hljs-string">'all'</span>] = (test_error[<span class="hljs-string">'title'</span>] + test_error[<span class="hljs-string">'columns'</span>] + test_error[<span class="hljs-string">'content'</span>])<br><br><br><br>test_no_error = test[~test[<span class="hljs-string">'filename'</span>].isin(test_error[<span class="hljs-string">'filename'</span>].tolist())]<br><span class="hljs-comment">#test = pd.merge(test,test_error,how='left',on='filename')</span><br><span class="hljs-comment">#test</span><br><br><br><br><br>test = pd.concat([test_error,test_no_error])<br><br><br><br><span class="hljs-comment">#test['all_y'][test['all_x'] == '']</span><br><span class="hljs-comment">#test['all_y'].str.cat(test['all_x'])# + test['all_y']</span><br><span class="hljs-comment">#test[test['all_x'] == '']</span><br><span class="hljs-comment">#test['all_y'] + test['all_x']</span><br><br><br><br><br>test.columns = [<span class="hljs-string">'label'</span>,<span class="hljs-string">'filename'</span>,<span class="hljs-string">'title'</span>,<span class="hljs-string">'columns'</span>,<span class="hljs-string">'content'</span>,<span class="hljs-string">'all'</span>]<br><br><br><br><span class="hljs-comment"># In[27]:</span><br><br><br>train[<span class="hljs-string">'all'</span>] = train.apply(<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">'all'</span>].replace(<span class="hljs-string">'年'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'月'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'日'</span>, <span class="hljs-string">''</span>),axis=<span class="hljs-number">1</span>)<br>test[<span class="hljs-string">'all'</span>] = test.apply(<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-string">'all'</span>].replace(<span class="hljs-string">'年'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'月'</span>, <span class="hljs-string">''</span>).replace(<span class="hljs-string">'日'</span>, <span class="hljs-string">''</span>),axis=<span class="hljs-number">1</span>)<br><br><br><br><span class="hljs-comment"># In[30]:</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_other</span><span class="hljs-params">(x)</span>:</span><br>    x = x.replace(<span class="hljs-string">'男'</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-string">'女'</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-string">'市'</span>,<span class="hljs-string">''</span>).replace(<span class="hljs-string">'区'</span>,<span class="hljs-string">''</span>)<br>    <span class="hljs-keyword">return</span> x<br>train[<span class="hljs-string">'all'</span>] = train.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_other(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br>test[<span class="hljs-string">'all'</span>] = test.progress_apply(<span class="hljs-keyword">lambda</span> x:remove_other(x[<span class="hljs-string">'all'</span>]),axis=<span class="hljs-number">1</span>)<br><br><br><br><span class="hljs-comment"># In[33]:</span><br><br><br><span class="hljs-keyword">del</span> train_data<br><span class="hljs-keyword">del</span> test_data<br><span class="hljs-keyword">import</span> gc<br>gc.collect()<br><br><br><span class="hljs-comment"># In[34]:</span><br><br><br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> LabelEncoder<br><br><br>lb = LabelEncoder()<br>train[<span class="hljs-string">'label'</span>] = lb.fit_transform(train[<span class="hljs-string">'label'</span>])<br>test.drop(<span class="hljs-string">'label'</span>, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)<br>df = pd.concat([train, test], axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#df['file'] = df['filename'].apply(lambda x: x.split('.')[0][6:].replace('_', ''))</span><br><br><br><span class="hljs-comment"># In[35]:</span><br><br><br><span class="hljs-keyword">import</span> jieba<br><span class="hljs-keyword">from</span> keras.preprocessing.text <span class="hljs-keyword">import</span> Tokenizer<br><span class="hljs-keyword">from</span> keras.preprocessing.sequence <span class="hljs-keyword">import</span> pad_sequences<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">import</span> pkuseg<br>seg = pkuseg.pkuseg() <br><br><br>cw = <span class="hljs-keyword">lambda</span> x: list(seg.cut(x))<br>df[<span class="hljs-string">'words'</span>] = df[<span class="hljs-string">'all'</span>].apply(cw)<br>tokenizer=Tokenizer() <br>tokenizer.fit_on_texts(df[<span class="hljs-string">'words'</span>])<br>vocab=tokenizer.word_index<br><br><br><span class="hljs-comment"># In[36]:</span><br><br><br>X = df[~df[<span class="hljs-string">'label'</span>].isnull()]<br>y_train = X[<span class="hljs-string">'label'</span>]<br>X_train = X[<span class="hljs-string">'words'</span>]<br>X_test = df[df[<span class="hljs-string">'label'</span>].isnull()][<span class="hljs-string">'words'</span>]<br><br><br><span class="hljs-comment"># In[38]:</span><br><br><br><span class="hljs-keyword">from</span> keras.preprocessing.sequence <span class="hljs-keyword">import</span> pad_sequences<br><span class="hljs-keyword">from</span> keras.preprocessing.text <span class="hljs-keyword">import</span> Tokenizer<br><span class="hljs-keyword">from</span> keras.layers.merge <span class="hljs-keyword">import</span> concatenate<br><span class="hljs-keyword">from</span> keras.models <span class="hljs-keyword">import</span> Sequential, Model<br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Dense, Embedding, Activation, merge, Input, Lambda, Reshape, BatchNormalization<br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> Convolution1D, Flatten, Dropout, MaxPool1D, GlobalAveragePooling1D, Conv1D, MaxPooling1D<br><span class="hljs-keyword">from</span> keras.layers <span class="hljs-keyword">import</span> LSTM, GRU, TimeDistributed, Bidirectional<br><span class="hljs-keyword">from</span> keras.utils.np_utils <span class="hljs-keyword">import</span> to_categorical<br><span class="hljs-keyword">from</span> keras <span class="hljs-keyword">import</span> initializers<br><span class="hljs-keyword">from</span> keras <span class="hljs-keyword">import</span> backend <span class="hljs-keyword">as</span> K<br><span class="hljs-keyword">from</span> keras.engine.topology <span class="hljs-keyword">import</span> Layer<br><span class="hljs-keyword">from</span> sklearn.naive_bayes <span class="hljs-keyword">import</span> MultinomialNB<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDClassifier<br><span class="hljs-keyword">from</span> sklearn.feature_extraction.text <span class="hljs-keyword">import</span> TfidfVectorizer<br><span class="hljs-keyword">import</span> keras<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedKFold<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><br><span class="hljs-comment"># 设置随机数种子</span><br>seed = <span class="hljs-number">42</span><br>np.random.seed(seed)<br>tf.set_random_seed(seed)<br>MAX_LENGTH = <span class="hljs-number">128</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">NN</span><span class="hljs-params">()</span>:</span><br>    model = Sequential()<br>    model.add(Embedding(len(vocab) + <span class="hljs-number">1</span>, <span class="hljs-number">300</span>, input_length=MAX_LENGTH)) <span class="hljs-comment">#使用Embeeding层将每个词编码转换为词向量</span><br>    model.add(Conv1D(<span class="hljs-number">256</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-string">'same'</span>))<br>    model.add(MaxPooling1D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">'same'</span>))<br>    model.add(Conv1D(<span class="hljs-number">128</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-string">'same'</span>))<br>    model.add(MaxPooling1D(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">'same'</span>))<br>    model.add(Conv1D(<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, padding=<span class="hljs-string">'same'</span>))<br>    model.add(Flatten())<br>    model.add(Dropout(<span class="hljs-number">0.1</span>))<br>    model.add(BatchNormalization())  <br>    model.add(Dense(<span class="hljs-number">256</span>, activation=<span class="hljs-string">'relu'</span>))<br>    model.add(Dropout(<span class="hljs-number">0.1</span>))<br>    model.add(Dense(<span class="hljs-number">20</span>, activation=<span class="hljs-string">'softmax'</span>))   <br>    <span class="hljs-keyword">return</span> model<br><br><br><br><span class="hljs-comment"># In[39]:</span><br><br><br>oof = np.zeros(len(X_train))<br>predictions = np.zeros((len(X_test), <span class="hljs-number">20</span>))<br>KF = StratifiedKFold(n_splits=<span class="hljs-number">5</span>, shuffle=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">42</span>)<br><span class="hljs-keyword">for</span> fold_, (trn_idx, val_idx) <span class="hljs-keyword">in</span> enumerate(KF.split(X_train.values, y_train.values)):<br>    print(<span class="hljs-string">"fold n°&#123;&#125;"</span>.format(fold_))<br>    print(<span class="hljs-string">'trn_idx:'</span>,trn_idx)<br>    print(<span class="hljs-string">'val_idx:'</span>,val_idx)<br>    X_tr = X_train.iloc[trn_idx]<br>    X_val = X_train.iloc[val_idx]<br>    X_train_word_ids = tokenizer.texts_to_sequences(X_tr)<br>    X_valid_word_ids = tokenizer.texts_to_sequences(X_val)<br>    X_test_word_ids = tokenizer.texts_to_sequences(X_test)<br>    X_train_padded_seqs=pad_sequences(X_train_word_ids,maxlen=MAX_LENGTH)<br>    X_valid_padded_seqs=pad_sequences(X_valid_word_ids,maxlen=MAX_LENGTH)<br>    X_test_padded_seqs=pad_sequences(X_test_word_ids, maxlen=MAX_LENGTH)<br>    y_tr = y_train.iloc[trn_idx]<br>    y_tr = keras.utils.to_categorical(y_tr, num_classes=<span class="hljs-number">20</span>)<br>    y_val = y_train.iloc[val_idx]<br>    y_val = keras.utils.to_categorical(y_val, num_classes=<span class="hljs-number">20</span>)<br>    model = NN()<br>    model.compile(loss=<span class="hljs-string">'categorical_crossentropy'</span>,optimizer=<span class="hljs-string">'adam'</span>,metrics=[<span class="hljs-string">'accuracy'</span>])      <br>    model.fit(X_train_padded_seqs, y_tr, epochs=<span class="hljs-number">10</span>, batch_size=<span class="hljs-number">1024</span>, validation_data=(X_valid_padded_seqs, y_val))<br>    oof[val_idx] = model.predict_classes(X_valid_padded_seqs)<br>    temp = model.predict_proba(X_test_padded_seqs)<br>    predictions[:] += temp<br><br><br><span class="hljs-comment"># In[40]:</span><br><br><br>test_label = lb.inverse_transform([np.argmax(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> predictions / np.array(<span class="hljs-number">5</span>)])<br>test[<span class="hljs-string">'label'</span>] = test_label<br><span class="hljs-comment">#test.to_csv('submission_test2_all.csv', index=False)</span><br><br><br><span class="hljs-comment"># In[41]:</span><br><br><br>test[<span class="hljs-string">'filename'</span>] = <span class="hljs-string">'test2/'</span> + test[<span class="hljs-string">'filename'</span>] <br><br><br><span class="hljs-comment"># In[42]:</span><br><br><br>test[[<span class="hljs-string">'filename'</span>,<span class="hljs-string">'label'</span>]]<br><br><br><span class="hljs-comment"># In[43]:</span><br><br><br>test[[<span class="hljs-string">'filename'</span>,<span class="hljs-string">'label'</span>]].to_csv(<span class="hljs-string">'submission_test2_all.csv'</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题任务&quot;&gt;&lt;a href=&quot;#赛题任务&quot; class=&quot;headerlink&quot; title=&quot;赛题任务&quot;&gt;&lt;/a&gt;赛题任务&lt;/h2&gt;&lt;p&gt;　　选手需要建立模型，针对政务表格文件实现自动化分类。允许使用一些常见的开源预训练模型，如bert。&lt;br&gt;　　数据智能分类
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第三届全国高校绿色计算大赛半决赛——OpenEuler（第一阶段）</title>
    <link href="http://meurice.xyz/2020/ckotxwif3000j4wlx9phecurs/"/>
    <id>http://meurice.xyz/2020/ckotxwif3000j4wlx9phecurs/</id>
    <published>2020-10-24T08:33:55.000Z</published>
    <updated>2020-10-29T06:16:05.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OpenEuler-、-Shell-编程"><a href="#OpenEuler-、-Shell-编程" class="headerlink" title="OpenEuler 、 Shell 编程"></a>OpenEuler 、 Shell 编程</h2><h3 id="1-正则替换"><a href="#1-正则替换" class="headerlink" title="1.正则替换"></a>1.正则替换</h3><p>系统提供了一个待处理的test.txt文件，其内容为：<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ZhangSan<span class="hljs-number">25</span>man<br>LiS<span class="hljs-keyword">i7</span>man<br>WangWu<span class="hljs-number">16</span>woman<br>Alex<span class="hljs-number">77</span>man<br></code></pre></td></tr></table></figure><br>请在右侧的编码区域，通过shell脚本将文件内容中的三列用 ,(英文逗号) 分割开来。其中，第一列为人名，由字母组成；第二列为年龄，由数字组成；第三列为性别，只会是 man 或者 woman。  </p><p>处理完成后预期结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>ZhangSan,25,man<br>LiSi,7,man<br>WangWu,16,woman<br>Alex,77,man<br></code></pre></td></tr></table></figure><br>Solve：<br>正则表达式匹配字母+任意位数字+字母，分别以\1，\2，\3引用匹配到的内容，添加逗号即可。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">cat test.txt | sed "s/\([a-z]\)\([0-9]*[0-9]\)\([a-z]\)/\1,\2,\3/g"<br></code></pre></td></tr></table></figure></p><h3 id="2-求集合差集"><a href="#2-求集合差集" class="headerlink" title="2.求集合差集"></a>2.求集合差集</h3><p>系统提供了两个待处理文件a.txt和b.txt，其中文件 a.txt 中的部分内容如下：<br><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Hello<br>My <span class="hljs-type">Name</span> <span class="hljs-keyword">is</span> Alice<br>What <span class="hljs-keyword">is</span> your <span class="hljs-type">name</span><br>I am Bob<br>I came <span class="hljs-keyword">from</span> China<br><span class="hljs-keyword">Where</span> are you <span class="hljs-keyword">from</span><br>Oh my God<br></code></pre></td></tr></table></figure><br>文件 b.txt 中的部分内容如下：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Alice</span> is a good <span class="hljs-keyword">boy</span><br><span class="hljs-keyword">Bob </span>is a nice man <span class="hljs-keyword">and </span>he is one of my <span class="hljs-keyword">best </span>friend<br><span class="hljs-symbol">God</span> <span class="hljs-keyword">bless </span>you<br></code></pre></td></tr></table></figure><br>将文件 a.txt 中每一行的最后一个单词作为集合 1 ；将文件 b.txt 中每一行的第一个单词作为集合 2 ；请使用 shell 语言编写程序，输出包含在集合 1 但不包含在集合 2 的所有元素。<br>Solve：通过正则将a.txt中最后一个空格前的全部字符替换为空，b.txt中第一个空格后的全部字符替换为空，sort后通过uniq命令解决。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>sed -i <span class="hljs-string">'s/.* //g'</span> a.txt<br>sed -i <span class="hljs-string">'s/ .*//g'</span> b.txt<br>grep -F -v -f b.txt a.txt | sort | uniq<br></code></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OpenEuler-、-Shell-编程&quot;&gt;&lt;a href=&quot;#OpenEuler-、-Shell-编程&quot; class=&quot;headerlink&quot; title=&quot;OpenEuler 、 Shell 编程&quot;&gt;&lt;/a&gt;OpenEuler 、 Shell 编程&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]智算之道——人工智能应用挑战赛(Rank13)</title>
    <link href="http://meurice.xyz/2020/ckotxwif0000f4wlxfzowcvn0/"/>
    <id>http://meurice.xyz/2020/ckotxwif0000f4wlxfzowcvn0/</id>
    <published>2020-10-10T02:01:16.000Z</published>
    <updated>2021-05-18T10:58:07.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="空值填充"><a href="#空值填充" class="headerlink" title="空值填充"></a>空值填充</h2><p>　　以众数填充为例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> list(all_data.columns[all_data.isnull().sum() &gt; <span class="hljs-number">0</span>]):<br>  mode_val = all_data[column].mode()[<span class="hljs-number">0</span>]<br>  all_data[column].fillna(mode_val, inplace=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><br>　　注意可能有多个众数，一般取第一个（mode()[0]），否则填充后的DataFrame仍存在空值。</p><h2 id="focal-loss-——tensorflow实现"><a href="#focal-loss-——tensorflow实现" class="headerlink" title="focal loss ——tensorflow实现"></a>focal loss ——tensorflow实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">focal_loss</span><span class="hljs-params">(logits, labels, gamma=<span class="hljs-number">2</span>)</span>:</span><br>    softmax = tf.reshape(tf.nn.softmax(logits), [<span class="hljs-number">-1</span>])<br>    labels = tf.range(<span class="hljs-number">0</span>, tf.shape(logits)[<span class="hljs-number">0</span>]) * tf.shape(logits)[<span class="hljs-number">1</span>] + labels<br>    prob = tf.gather(softmax, labels)<br>    weight = tf.pow(tf.subtract(<span class="hljs-number">1.</span>, prob), gamma)<br>    loss = -tf.reduce_mean(tf.multiply(weight, tf.log(prob)))<br>    <span class="hljs-keyword">return</span> loss<br></code></pre></td></tr></table></figure><h2 id="初赛解决方案"><a href="#初赛解决方案" class="headerlink" title="初赛解决方案"></a>初赛解决方案</h2><p>　　原始特征 + 交叉特征 + 整体(train+test)空值填充，lgb 5折 + catboost，Averaging加权0.4 / 0.6，线上auc 0.8581，个人rank4。<br>　　尝试过FiBiNET + Facol Loss，结果不够稳定，随机种子对结果有一定影响，初赛算力有限，无法做过多特征，线上auc约0.856</p><h2 id="Function-call-stack-train-function"><a href="#Function-call-stack-train-function" class="headerlink" title="Function call stack: train_function"></a>Function call stack: train_function</h2><p>　　在tensorflow2.x下调用tf.combat1没有关闭eager_execution()，加入如下代码解决：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">tf.compat.v1.disable_eager_execution()<br></code></pre></td></tr></table></figure></p><h2 id="fit-generator"><a href="#fit-generator" class="headerlink" title="fit_generator"></a>fit_generator</h2><p>　　从tensorflow 2.1.0开始已不推荐使用fit_generator，fit替代之。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># generator</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generator</span><span class="hljs-params">(batch_size)</span>:</span><br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        x_train = np.zeros((batch_size, <span class="hljs-number">128</span>, <span class="hljs-number">128</span>, <span class="hljs-number">3</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(batch_size):<br>            img_path= <span class="hljs-string">'./'</span><br>            img = cv2.imread(img_path)<br>            img = cv2.resize(img,(<span class="hljs-number">128</span>,<span class="hljs-number">128</span>))<br>            x_train[i] = img<br>        labels = y_train[(j<span class="hljs-number">-1</span>)*batch_size:j*batch_size]<br>        j=j+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">yield</span> x_train, labels<br><br><span class="hljs-comment"># fit_generator</span><br>fit_generator(self, <br>generator, <br>            steps_per_epoch,<br>            epochs=<span class="hljs-number">1</span>, <br>            verbose=<span class="hljs-number">1</span>, <br>            callbacks=<span class="hljs-literal">None</span>, <br>            validation_data=<span class="hljs-literal">None</span>, <br>            validation_steps=<span class="hljs-literal">None</span>, <br>            class_weight=<span class="hljs-literal">None</span>, <br>            max_q_size=<span class="hljs-number">10</span>, <br>            workers=<span class="hljs-number">1</span>, <br>            pickle_safe=<span class="hljs-literal">False</span>, <br>            initial_epoch=<span class="hljs-number">0</span><br>            )<br></code></pre></td></tr></table></figure></p><h2 id="决赛解决方案"><a href="#决赛解决方案" class="headerlink" title="决赛解决方案"></a>决赛解决方案</h2><p>　　基线模型为EfficientNET-b5，使用20%的数据预热后，冻结除Dense外的所有层并使用全量数据调整网络，可以参考NeurIPS 2019所收录的一篇文章——<a href="http://papers.nips.cc/paper/9035-fixing-the-train-test-resolution-discrepancy" target="_blank" rel="noopener">Fixing the train-test resolution discrepancy</a>。<br> 　　调用模型对测试集分类结果进行推断时，对测试集做了测试时增强（test time augmentation, TTA），此部分内容可参考<a href="https://github.com/ultralytics/yolov5/issues/303" target="_blank" rel="noopener">Test-Time Augmentation (TTA) Tutorial</a>，包括随机裁切、左右翻转等（考虑天气图像的特殊性，未做上下翻转）。<br>   <img src="https://hexo-img-meurice.oss-cn-beijing.aliyuncs.com/%E6%99%BA%E7%AE%97%E4%B9%8B%E9%81%932020/scheme.png" srcset="/img/loading.gif" lazyload alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;空值填充&quot;&gt;&lt;a href=&quot;#空值填充&quot; class=&quot;headerlink&quot; title=&quot;空值填充&quot;&gt;&lt;/a&gt;空值填充&lt;/h2&gt;&lt;p&gt;　　以众数填充为例。&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>2020 计蒜之道 预赛 第一场</title>
    <link href="http://meurice.xyz/2020/ckotxwiet00074wlx50ndhziu/"/>
    <id>http://meurice.xyz/2020/ckotxwiet00074wlx50ndhziu/</id>
    <published>2020-09-20T12:11:32.000Z</published>
    <updated>2021-05-18T11:03:06.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-五子棋"><a href="#A-五子棋" class="headerlink" title="A.五子棋"></a>A.五子棋</h2><p>　　题意：给出当前状态棋盘，判断下一步黑棋是否可以获胜，并输出下在哪里可获胜。<br>　　思路：遍历棋盘每一处，判断每个位置能否获胜，<strong>需要判断先手方</strong>。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//solution</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(x) cerr <span class="hljs-meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pi;<br><span class="hljs-keyword">typedef</span> V&lt;<span class="hljs-keyword">int</span>&gt; vi;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">char</span> a[<span class="hljs-number">25</span>][<span class="hljs-number">25</span>], who;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">yes</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">25</span>; j++) &#123;<br><span class="hljs-keyword">bool</span> ok = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br><span class="hljs-keyword">if</span>(a[i+k][j]!=who) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(ok) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">20</span>; j++) &#123;<br><span class="hljs-keyword">bool</span> ok = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br><span class="hljs-keyword">if</span>(a[i][j+k]!=who) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(ok) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">20</span>; j++) &#123;<br><span class="hljs-keyword">bool</span> ok = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br><span class="hljs-keyword">if</span>(a[i+k][j+k]!=who) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(ok) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">20</span>; j++) &#123;<br><span class="hljs-keyword">bool</span> ok = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">5</span>; k++)<br><span class="hljs-keyword">if</span>(a[i-k][j+k]!=who) ok = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(ok) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IO_OP;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">25</span>; j++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i][j];<br><span class="hljs-keyword">if</span>(a[i][j] != <span class="hljs-string">'.'</span>) cnt++;<br>&#125;<br>who = <span class="hljs-string">'x'</span>;<br><span class="hljs-keyword">if</span>(cnt&amp;<span class="hljs-number">1</span>) who = <span class="hljs-string">'o'</span>;<br><span class="hljs-keyword">bool</span> y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">25</span>; j++) &#123;<br><span class="hljs-keyword">if</span>(a[i][j] == <span class="hljs-string">'.'</span>) &#123;<br>a[i][j] = who;<br><span class="hljs-keyword">if</span>(yes()) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; j &lt;&lt; <span class="hljs-built_in">endl</span>;<br>y = <span class="hljs-number">1</span>;<br>&#125;<br>a[i][j] = <span class="hljs-string">'.'</span>; <br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!y) <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"tie"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="B-染色（简单）"><a href="#B-染色（简单）" class="headerlink" title="B.染色（简单）"></a>B.染色（简单）</h2><p>　　题意：序列中的第 i 个位置染成黑色会产生 b_i 的美感，染成白色会产生 w_i 的美感。有些区间比较特殊，如果区间内的所有数都染成黑色会额外得到 c_i 的美感；另一些区间则恰好相反，如果区间内的所有数都染成白色会额外得到 c_i 的美感。求美感总和最大值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(x) cerr <span class="hljs-meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int ll</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pi;<br><span class="hljs-keyword">typedef</span> V&lt;<span class="hljs-keyword">int</span>&gt; vi;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>, N = <span class="hljs-number">3e5</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> b[N], w[N], bsum[N], wsum[N], mx[N], sum[N], yes[N];<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IO_OP;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; b[i];<br>bsum[i] = bsum[i - <span class="hljs-number">1</span>] + b[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; w[i];<br>wsum[i] = wsum[i - <span class="hljs-number">1</span>] + w[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>mx[i] = <span class="hljs-built_in">max</span>(b[i], w[i]);<br>sum[i] = mx[i] + sum[i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br><span class="hljs-keyword">int</span> t, l, r, c;<br><span class="hljs-built_in">cin</span> &gt;&gt; t &gt;&gt; l &gt;&gt; r &gt;&gt; c;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = l; j &lt;= r; j++) yes[j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> cur = sum[r] - sum[l<span class="hljs-number">-1</span>];<br><span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) &#123;<br>cur = <span class="hljs-built_in">max</span>(cur, bsum[r] - bsum[l<span class="hljs-number">-1</span>] + c);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>cur = <span class="hljs-built_in">max</span>(cur, wsum[r] - wsum[l<span class="hljs-number">-1</span>] + c);<br>&#125;<br>ans += cur;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-keyword">if</span>(!yes[i]) ans += mx[i];<br><span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="C-染色（中等）"><a href="#C-染色（中等）" class="headerlink" title="C.染色（中等）"></a>C.染色（中等）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(x) cerr <span class="hljs-meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int ll</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pi;<br><span class="hljs-keyword">typedef</span> V&lt;<span class="hljs-keyword">int</span>&gt; vi;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>, N = <span class="hljs-number">3e5</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> b[N], w[N], bsum[N], wsum[N], mx[N], sum[N], dp[N];<br>V&lt;pi&gt; bb[N], ww[N];<br><br><br><span class="hljs-keyword">int</span> bmore[N], wmore[N];<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IO_OP;<br><br><span class="hljs-keyword">int</span> n, m;<br><span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; b[i];<br>bsum[i] = bsum[i - <span class="hljs-number">1</span>] + b[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; w[i];<br>wsum[i] = wsum[i - <span class="hljs-number">1</span>] + w[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>mx[i] = <span class="hljs-built_in">max</span>(b[i], w[i]);<br>sum[i] = mx[i] + sum[i - <span class="hljs-number">1</span>];<br>&#125;<br>vi v;<br>v.PB(<span class="hljs-number">1</span>), v.PB(n+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br><span class="hljs-keyword">int</span> t, l, r, c;<br><span class="hljs-built_in">cin</span> &gt;&gt; t &gt;&gt; l &gt;&gt; r &gt;&gt; c;<br><span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) &#123;<br>bb[r].EB(l, c);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ww[r].EB(l, c);<br>&#125;<br>v.PB(l);<br>v.PB(r+<span class="hljs-number">1</span>);<br>&#125;<br>sort(ALL(v));<br>v.resize(unique(ALL(v))-v.<span class="hljs-built_in">begin</span>());<br><span class="hljs-keyword">int</span> nn = v.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">auto</span> getmx = [&amp;](<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r) &#123;<br><span class="hljs-keyword">int</span> lb = v[l], rb = v[r + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> sum[rb] - sum[lb<span class="hljs-number">-1</span>];<br>&#125;;<br><span class="hljs-keyword">auto</span> getb = [&amp;](<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r) &#123;<br><span class="hljs-keyword">int</span> lb = v[l], rb = v[r + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> bsum[rb] - bsum[lb<span class="hljs-number">-1</span>];<br>&#125;;<br><span class="hljs-keyword">auto</span> getw = [&amp;](<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r) &#123;<br><span class="hljs-keyword">int</span> lb = v[l], rb = v[r + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> wsum[rb] - wsum[lb<span class="hljs-number">-1</span>];<br>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nn; i++) &#123;<br><span class="hljs-keyword">int</span> r = v[i + <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:bb[r]) &#123;<br><span class="hljs-comment">// bbit.add(p.F, p.S);</span><br>bmore[p.F] += p.S;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p:ww[r]) &#123;<br><span class="hljs-comment">// wbit.add(p.F, p.S);</span><br>wmore[p.F] += p.S;<br>&#125;<br>dp[i] = (i<span class="hljs-number">-1</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : dp[i<span class="hljs-number">-1</span>]) + getmx(i, i);<br><span class="hljs-keyword">int</span> more = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>more += bmore[v[j]];<br>dp[i] = <span class="hljs-built_in">max</span>(dp[i], (j<span class="hljs-number">-1</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : dp[j<span class="hljs-number">-1</span>]) + getb(j, i) + more);<br>&#125;<br>more = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>more += wmore[v[j]];<br>dp[i] = <span class="hljs-built_in">max</span>(dp[i], (j<span class="hljs-number">-1</span> &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : dp[j<span class="hljs-number">-1</span>]) + getw(j, i) + more);<br>&#125;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; dp[nn<span class="hljs-number">-1</span>] &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-染色（困难）"><a href="#D-染色（困难）" class="headerlink" title="D.染色（困难）"></a>D.染色（困难）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"Ofast"</span>)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> IO_OP std::ios::sync_with_stdio(0); std::cin.tie(0);</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> F first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> S second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V vector</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PB push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MP make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> EB emplace_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ALL(v) (v).begin(), (v).end()</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> debug(x) cerr <span class="hljs-meta-string">&lt;&lt; "Line(" &lt;&lt; __LINE__ &lt;&lt; ") -&gt; " &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> gc getchar_unlocked</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; pi;<br><span class="hljs-keyword">typedef</span> V&lt;<span class="hljs-keyword">int</span>&gt; vi;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> INF = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>, N = <span class="hljs-number">3e5</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-keyword">int</span> b[N], w[N], mx[N];<br>ll dp[N];<br>V&lt;pi&gt; bb[N], ww[N];<br><span class="hljs-keyword">int</span> n, m;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">seg</span> &#123;</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   <span class="hljs-doctag">NOTE:</span> remember to call build function</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">T</span> &#123;</span><br>ll val, lazy;<br><span class="hljs-keyword">bool</span> islz;<br>T(ll _val = <span class="hljs-number">0</span>) &#123;<br>val = _val;<br>lazy = <span class="hljs-number">0</span>;<br>islz = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;;<br><br>T t[N * <span class="hljs-number">4</span>];<br><span class="hljs-keyword">int</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">add</span><span class="hljs-params">(T x, T y)</span> </span>&#123;<br><span class="hljs-keyword">return</span> T(<span class="hljs-built_in">max</span>(x.val, y.val));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pull</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>t[v] = add(t[v * <span class="hljs-number">2</span>], t[v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">apply</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v, ll val)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(t[v].islz) &#123;<br>t[v].val += val;<br>t[v].lazy += val;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>t[v].val += val;<br>t[v].lazy = val;<br>&#125;<br>t[v].islz = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(t[v].islz) &#123;<br>apply(v * <span class="hljs-number">2</span>, t[v].lazy);<br>apply(v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, t[v].lazy);<br>t[v].islz = <span class="hljs-literal">false</span>;<br>t[v].lazy = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tr = n + <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(tr - tl == <span class="hljs-number">1</span>) &#123;<br>t[v] = T(a[tl]); <span class="hljs-comment">// set one</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> tm = (tl + tr) / <span class="hljs-number">2</span>;<br>build(v * <span class="hljs-number">2</span>, tl, tm);<br>build(v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, tm, tr);<br>pull(v);<br>&#125;<br><br><span class="hljs-function">T <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tr = n + <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) <span class="hljs-keyword">return</span> t[v];<br>push(v);<br><span class="hljs-keyword">int</span> tm = (tl + tr) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(r &lt;= tm) <span class="hljs-keyword">return</span> qry(l, r, v * <span class="hljs-number">2</span>, tl, tm);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l &gt;= tm) <span class="hljs-keyword">return</span> qry(l, r, v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, tm, tr);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> add(qry(l, r, v * <span class="hljs-number">2</span>, tl, tm), qry(l, r, v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, tm, tr));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ll val, <span class="hljs-keyword">int</span> v = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tl = <span class="hljs-number">1</span>, <span class="hljs-keyword">int</span> tr = n + <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(l &lt;= tl &amp;&amp; tr &lt;= r) &#123;<br>apply(v, val);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>push(v);<br><span class="hljs-keyword">int</span> tm = (tl + tr) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(l &lt; tm) upd(l, r, val, v * <span class="hljs-number">2</span>, tl, tm);<br><span class="hljs-keyword">if</span>(r &gt; tm) upd(l, r, val, v * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, tm, tr);<br>pull(v);<br>&#125;<br><br>&#125; segb, segw;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">readInt</span> <span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">bool</span> minus = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">char</span> ch;<br>ch = gc();<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (ch &gt;= <span class="hljs-string">'0'</span> &amp;&amp; ch &lt;= <span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>ch = gc();<br>&#125;<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">'-'</span>) minus = <span class="hljs-literal">true</span>; <span class="hljs-keyword">else</span> result = ch-<span class="hljs-string">'0'</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>ch = gc();<br><span class="hljs-keyword">if</span> (ch &lt; <span class="hljs-string">'0'</span> || ch &gt; <span class="hljs-string">'9'</span>) <span class="hljs-keyword">break</span>;<br>result = result*<span class="hljs-number">10</span> + (ch - <span class="hljs-string">'0'</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (minus)<br><span class="hljs-keyword">return</span> -result;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>IO_OP;<br><br><span class="hljs-comment">// cin &gt;&gt; n &gt;&gt; m;</span><br>n = readInt(), m = readInt();<br>segw.build();<br>segb.build();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>b[i] = readInt();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>w[i] = readInt();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>mx[i] = <span class="hljs-built_in">max</span>(b[i], w[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br><span class="hljs-keyword">int</span> t, l, r, c;<br><span class="hljs-comment">// cin &gt;&gt; t &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br>t = readInt(), l = readInt(), r = readInt(), c = readInt();<br><span class="hljs-keyword">if</span>(t == <span class="hljs-number">1</span>) &#123;<br>bb[r].EB(l, c);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ww[r].EB(l, c);<br>&#125;<br>&#125;<br>dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>segb.upd(i, i+<span class="hljs-number">1</span>, dp[i<span class="hljs-number">-1</span>]);<br>segw.upd(i, i+<span class="hljs-number">1</span>, dp[i<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">for</span>(pi p:bb[i]) &#123;<br>segb.upd(<span class="hljs-number">1</span>, p.F + <span class="hljs-number">1</span>, p.S);<br>&#125;<br><span class="hljs-keyword">for</span>(pi p:ww[i]) &#123;<br>segw.upd(<span class="hljs-number">1</span>, p.F + <span class="hljs-number">1</span>, p.S);<br>&#125;<br>segb.upd(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, b[i]);<br>segw.upd(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>, w[i]);<br>dp[i] = dp[i<span class="hljs-number">-1</span>] + <span class="hljs-built_in">max</span>(b[i], w[i]);<br>dp[i] = <span class="hljs-built_in">max</span>(dp[i], segb.qry(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>).val);<br>dp[i] = <span class="hljs-built_in">max</span>(dp[i], segw.qry(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>).val);<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;A-五子棋&quot;&gt;&lt;a href=&quot;#A-五子棋&quot; class=&quot;headerlink&quot; title=&quot;A.五子棋&quot;&gt;&lt;/a&gt;A.五子棋&lt;/h2&gt;&lt;p&gt;　　题意：给出当前状态棋盘，判断下一步黑棋是否可以获胜，并输出下在哪里可获胜。&lt;br&gt;　　思路：遍历棋盘每一处，判断
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]2020 DIGIX全球校园AI算法精英大赛——赛道B</title>
    <link href="http://meurice.xyz/2020/ckotxwiey000d4wlxfjak58dx/"/>
    <id>http://meurice.xyz/2020/ckotxwiey000d4wlxfjak58dx/</id>
    <published>2020-07-28T10:06:11.000Z</published>
    <updated>2020-08-11T15:52:20.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-7-28"><a href="#2020-7-28" class="headerlink" title="2020.7.28"></a>2020.7.28</h2><h3 id="Resnet50预训练权重文件"><a href="#Resnet50预训练权重文件" class="headerlink" title="Resnet50预训练权重文件"></a>Resnet50预训练权重文件</h3><p>　　.h5文件已上传至百度网盘，链接放在此处。<br>   　　<a href="https://pan.baidu.com/s/1jTn1lI101BZfOoFys9tlOA" target="_blank" rel="noopener">resnet50_weights_tf_dim_ordering_tf_kernels.h5</a>，提取码: pdcg<br>      　　放在C://users//(yourusername)//.keras//models文件下。<br>         　　另外，可以通过<a href="https://d.serctl.com/" target="_blank" rel="noopener">该网站</a>下载Github上的release内容。</p><h3 id="plt-imshow与cv2-imshow显示色差"><a href="#plt-imshow与cv2-imshow显示色差" class="headerlink" title="plt.imshow与cv2.imshow显示色差"></a>plt.imshow与cv2.imshow显示色差</h3><p>　　使用plt.imshow和cv2.imshow对同一幅图显示时，可能会出现色差，这是由于opencv的接口为BGR，而matplotlib.pyplot接口使用的是RGB。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python">img = cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_BGR2RGB)<br><br>plt.imshow(img)<br>plt.show()<br></code></pre></td></tr></table></figure><br>　　或通过以下方法也可实现：<br>  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">b,g,r = cv2.split(cv2.imread(img_path))<br>img = cv2.merge([r,g,b])<br></code></pre></td></tr></table></figure></p><h2 id="2020-8-7"><a href="#2020-8-7" class="headerlink" title="2020.8.7"></a>2020.8.7</h2><h3 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h3><p>　　余弦相似性通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。该结果仅与向量方向相关。余弦相似度通常用于正空间，因此给出的值为-1到1之间。<br>　　<img src="https://wx2.sbimg.cn/2020/08/08/oJscK.png" srcset="/img/loading.gif" lazyload alt><br>　　给定两个属性向量，A和B，其余弦相似性θ由点积和向量长度给出：<br>　　<img src="https://wx2.sbimg.cn/2020/08/08/oJLVT.png" srcset="/img/loading.gif" lazyload alt><br>　　对于两个向量的<strong>余弦距离</strong>（余弦距离 = 1 - 余弦相似度）的基本计算，Python代码如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cosin_distance</span><span class="hljs-params">(vec_1, vec_2)</span>:</span><br>  dot_product = <span class="hljs-number">0.0</span><br>  normA = <span class="hljs-number">0.0</span><br>  normB = <span class="hljs-number">0.0</span><br>  <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> zip(vec_1, vec_2):<br>      dot_product += a * b<br>      normA += a ** <span class="hljs-number">2</span><br>      normB += b ** <span class="hljs-number">2</span><br>  <span class="hljs-keyword">if</span> normA == <span class="hljs-number">0.0</span> <span class="hljs-keyword">or</span> normB == <span class="hljs-number">0.0</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>  <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> dot_product / ((normA * normB) ** <span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure></p><h2 id="2020-8-8"><a href="#2020-8-8" class="headerlink" title="2020.8.8"></a>2020.8.8</h2><h3 id="大规模数据下使用faiss计算余弦相似度-待完善"><a href="#大规模数据下使用faiss计算余弦相似度-待完善" class="headerlink" title="大规模数据下使用faiss计算余弦相似度(待完善)"></a>大规模数据下使用faiss计算余弦相似度(待完善)</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">d = <span class="hljs-number">2048</span>                           <span class="hljs-comment"># dimension</span><br><br>nb = gallery_features.shape[<span class="hljs-number">0</span>]        <span class="hljs-comment"># database size</span><br>nq = query_features.shape[<span class="hljs-number">0</span>]      <span class="hljs-comment"># nb of queries</span><br><br>xb = gallery_features.astype(<span class="hljs-string">'float32'</span>)<br>xq = query_features.astype(<span class="hljs-string">'float32'</span>)<br><br><br>nlist = <span class="hljs-number">1000</span>                      <span class="hljs-comment">#聚类中心的个数</span><br>k = <span class="hljs-number">10</span>      <span class="hljs-comment"># topk搜索</span><br>quantizer = faiss.IndexFlatL2(d)  <span class="hljs-comment"># the other index</span><br>index = faiss.IndexIVFFlat(quantizer, d, nlist, faiss.METRIC_L2)<br>     <span class="hljs-comment"># here we specify METRIC_L2, by default it performs inner-product search</span><br><span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> index.is_trained<br>index.train(xb)<br><span class="hljs-keyword">assert</span> index.is_trained<br> <br>index.add(xb)                  <span class="hljs-comment"># add may be a bit slower as well</span><br>D, I = index.search(xq, k)     <span class="hljs-comment"># actual search</span><br>index.nprobe = <span class="hljs-number">10</span>              <span class="hljs-comment"># default nprobe is 1, try a few more</span><br>D, I = index.search(xq, k)<br></code></pre></td></tr></table></figure><p>　　此处参考<a href="https://github.com/facebookresearch/faiss/wiki/Getting-started" target="_blank" rel="noopener">官方样例</a>。</p><h2 id="2020-8-11"><a href="#2020-8-11" class="headerlink" title="2020.8.11"></a>2020.8.11</h2><h3 id="Keras添加网络结构报错"><a href="#Keras添加网络结构报错" class="headerlink" title="Keras添加网络结构报错"></a>Keras添加网络结构报错</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">model = Sequential()<br>model.add(load_model(<span class="hljs-string">'/mnt/resnet.model'</span>).get_output_at(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>　　<em>TypeError: The added layer must be an instance of class Layer.</em><br>　　可能是混合使用了keras.Sequential()和tf.keras.Sequential()；Keras的layer中有input和output属性，错误地使用该部分的成员函数时也可能导致该问题。<br>　　修改如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">model = Sequential()<br>model.add(load_model(<span class="hljs-string">'/mnt/resnet.model'</span>).get_layer(index=<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure>　　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020-7-28&quot;&gt;&lt;a href=&quot;#2020-7-28&quot; class=&quot;headerlink&quot; title=&quot;2020.7.28&quot;&gt;&lt;/a&gt;2020.7.28&lt;/h2&gt;&lt;h3 id=&quot;Resnet50预训练权重文件&quot;&gt;&lt;a href=&quot;#Resnet50预训
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>特征工程</title>
    <link href="http://meurice.xyz/2020/ckotxwif2000h4wlx8oklaptr/"/>
    <id>http://meurice.xyz/2020/ckotxwif2000h4wlx8oklaptr/</id>
    <published>2020-07-18T03:42:42.000Z</published>
    <updated>2020-09-06T12:23:12.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言　　"></a>前言　　</h2><p>　　数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。</p><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>　　特征工程是对原始数据进行一系列工程处理，将其提炼为特征，作为输入供算法和模型使用，简单来说，就是通过X，创造新的X’，目的是去除原始数据中的杂质和冗余，设计更高效的特征以刻画求解的问题与预测模型之间的关系，其本质是一个表示和展现数据的过程。基本的操作包括，衍生（升维），筛选（降维）等。<br>　　例如某分类器接收身高、体重两个参数来判断这个人是否肥胖，仅通过体重无法判断某个人的胖瘦，对于该例，一个非常经典的特征工程是，BMI指数，BMI=体重/(身高^2)，通过BMI指数，可以清晰地对一个人的胖瘦进行刻画。  </p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>　　常见的数据可分为结构化数据（例如关系型数据库的表）和非结构化数据（文本、图像、音频、视频等）。</p><h3 id="单特征"><a href="#单特征" class="headerlink" title="单特征"></a>单特征</h3><h4 id="标准化与归一化"><a href="#标准化与归一化" class="headerlink" title="标准化与归一化"></a>标准化与归一化</h4><p>　　该部分可以参考<a href="http://meurice.xyz/2020/ckcqevh3t0004xclxakyx24ma/">数据预处理——归一化与标准化</a>。</p><h4 id="缺失值"><a href="#缺失值" class="headerlink" title="缺失值"></a>缺失值</h4><h5 id="均值-中位数-众数-固定值填充"><a href="#均值-中位数-众数-固定值填充" class="headerlink" title="均值/中位数/众数/固定值填充"></a>均值/中位数/众数/固定值填充</h5><p>　　如果样本属性的距离是可度量的，则使用该属性有效值的平均值来补全；如果样本属性的距离不可度量，则可以采用众数或者中位数来补全。<br>　　或可根据某一特征对样本进行分类/聚合后（例如船运GPS数据，根据运单号进行聚合后，对样本数据缺失值进行填充），根据同类其他样本该属性的均值补全缺失值，同上述方法类似。<br>　　对于缺失值也可以采用固定的数值来进行填充。</p><h5 id="建模预测"><a href="#建模预测" class="headerlink" title="建模预测"></a>建模预测</h5><p>　　将缺失值字段作为预测对象，建立模型对其进行预测，根据该模型补全原训练集的缺失值。这个方法根本的缺陷是如果其他属性和缺失属性无关，则预测的结果毫无意义；但若模型对预测字段拟合效果相当好，则说明这个缺失属性没必要纳入数据集；一般的情况是介于两者之间。</p><h5 id="高维映射"><a href="#高维映射" class="headerlink" title="高维映射"></a>高维映射</h5><p>　　将属性映射到高维空间，采用独热码编码（one-hot）技术。将包含 K 个离散取值范围的属性值扩展为 K+1 个属性值，若该属性值缺失，则扩展后的第 K+1 个属性值置为 1。<br>　　这种做法既保留了所有的信息，也未添加任何额外信息，但会增加数据的维度，增大了计算量，一般在样本量非常大时效果才比较好。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>　　如多重插补、压缩感知和矩阵补全等，此处不具体展开，可以参考<a href="https://mp.weixin.qq.com/s/BnTXjzHSb5-4s0O0WuZYlg" target="_blank" rel="noopener">这篇文章</a>。</p><h4 id="特征二值化"><a href="#特征二值化" class="headerlink" title="特征二值化"></a>特征二值化</h4><p>　　 设立阈值，将特征二值化。<br>　　<img src="https://wx1.sbimg.cn/2020/07/18/ClGSk.png" srcset="/img/loading.gif" lazyload alt="erzhihua"><br>　　可以类比将模拟信号转换成数字信号过程中的量化。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">X_ = preprocessing.Binarizer(threshold=<span class="hljs-number">0</span>).transform(X)<br></code></pre></td></tr></table></figure></p><h4 id="哑编码-独热编码"><a href="#哑编码-独热编码" class="headerlink" title="哑编码/独热编码"></a>哑编码/独热编码</h4><p>　　哑编码/独热编码针对定性的特征进行处理。</p><h5 id="哑编码-dummy-encoding"><a href="#哑编码-dummy-encoding" class="headerlink" title="哑编码(dummy encoding)"></a>哑编码(dummy encoding)</h5><p>　　假设有N种定性值，则将这一个特征扩展为N种特征，当原始特征值为第i种定性值时，第i个扩展特征赋值为1，其他扩展特征赋值为0。哑编码的方式相比直接指定的方式，不用增加调参的工作，对于线性模型来说，使用哑编码后的特征可达到非线性的效果。<br>　　例如描述一个人的身材，我们可以用偏瘦、正常、偏胖，这些描述词经过哑编码就会得到：<br>　　　　偏廋 —&gt; [1, 0, 0]<br>　　　　正常 —&gt; [0, 1, 0]<br>　　　　偏胖 —&gt; [0, 0, 1]<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">X_ = pd.Categorical(df[<span class="hljs-string">'c'</span>]).codes<br></code></pre></td></tr></table></figure></p><h5 id="独热编码-one-hot-encoding"><a href="#独热编码-one-hot-encoding" class="headerlink" title="独热编码(one-hot encoding)"></a>独热编码(one-hot encoding)</h5><p>　　同上例，实际用2个状态位就足够反应上述3个类别的信息：<br>　　　　偏廋 —&gt; [1, 0]<br>　　　　正常 —&gt; [0, 1]<br>　　　　偏胖 —&gt; [0, 0]<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">encoder=OneHotEncoder(sparse=<span class="hljs-literal">False</span>) <br><span class="hljs-comment"># sparse是一个布尔值，指定结果是否稀疏。</span><br><span class="hljs-comment"># 若sparse=True，则每个样本的独热码为一个稀疏矩阵。</span><br></code></pre></td></tr></table></figure><br>  <br><br>　　关于哑编码/独热编码的区别和联系以及连续值的离散化提升模型的非线性能力的原因，可以参考<a href="https://www.cnblogs.com/lianyingteng/p/7792693.html" target="_blank" rel="noopener">这篇文章</a>。</p><h3 id="多特征"><a href="#多特征" class="headerlink" title="多特征"></a>多特征</h3><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><p>　　数据预处理完成后，需要选择有意义的特征输入机器学习的算法和模型进行训练，一般从以下两个方面考虑：<br>　　· 特征是否发散（某特征不发散，说明对于区分样本作用并不大）<br>　　· 特征与目标的相关性  </p><p>　　特征选择主要包括：<br>　　· Filter Method （过滤式）<br>　　· Wrapper Method （包装式）<br>　　· Embedded Method （嵌入式）</p><h5 id="特征选择原理"><a href="#特征选择原理" class="headerlink" title="特征选择原理"></a>特征选择原理</h5><p>　　·去除无关特征可以降低学习任务的难度，也同样让模型变得简单，降低计算复杂度　　</p><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><p>　　过滤式方法先对数据集进行特征选择，然后再训练模型，<strong>特征选择过程与后续模型训练无关</strong>。<br>　　通过统计学的方法对每个feature给出一个score，通过score对特征进行排序，然后选取score最高的子集.。这种方法仅仅对每个feature进行<strong>独立考虑</strong>，没有考虑到feture之间的依赖性或相关性。  </p><h6 id="方差选择法"><a href="#方差选择法" class="headerlink" title="方差选择法"></a>方差选择法</h6><p>　　计算各个特征的方差，根据阈值，<strong>选择方差大于阈值的特征</strong>。即若样本中该特征差异并不大，则认为该特征对于区分样本贡献不大，故可以将其去掉。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> SelectKBest<br><br>VarianceThreshold(threshold=<span class="hljs-number">0</span>).fit_transform(data)<br></code></pre></td></tr></table></figure></p><h6 id="相关系数法"><a href="#相关系数法" class="headerlink" title="相关系数法"></a>相关系数法</h6><p>　　计算各个特征对目标值的相关系数以及相关系数的P值。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> pearsonr<br><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> VarianceThreshold<br><br>SelectKBest(<span class="hljs-keyword">lambda</span> X, Y: array(map(<span class="hljs-keyword">lambda</span> x:pearsonr(x, Y), X.T)).T, <br>            k=<span class="hljs-number">4</span>).fit_transform(data, target)<br><span class="hljs-comment"># 第一个参数为计算评估特征是否好的函数，该函数输入特征矩阵和目标向量，输出二元组（评分，P值）的数组，数组第i项为第i个特征的评分和P值。（在此定义为计算相关系数）</span><br><span class="hljs-comment"># 参数k为选择的特征个数，选择k个最好的特征，返回选择特征后的数据</span><br></code></pre></td></tr></table></figure></p><h6 id="卡方检验"><a href="#卡方检验" class="headerlink" title="卡方检验"></a>卡方检验</h6><p>　　经典的卡方检验是<strong>检验定性自变量对定性因变量的相关性</strong>，是统计样本的实际观测值与理论推断值之间的偏离程度，实际观测值与理论推断值之间的偏离程度就决定卡方值的大小，如果卡方值越大，二者偏差程度越大；反之，二者偏差越小；若两个值完全相等时，卡方值就为0，表明理论值完全符合。<br>　　假设自变量有N种取值，因变量有M种取值，考虑自变量等于 i 且因变量等于 j 的样本频数的观察值与期望的差距。<br>　　<img src="https://wx1.sbimg.cn/2020/07/19/Cyng1.png" srcset="/img/loading.gif" lazyload alt="x2"><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> SelectKBest<br><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> chi2 <br><span class="hljs-comment"># 选择k个最佳特征</span><br>SelectKBest(chi2, k=<span class="hljs-number">2</span>).fit_transform(iris.data, iris.target)<br></code></pre></td></tr></table></figure></p><h6 id="互信息法"><a href="#互信息法" class="headerlink" title="互信息法"></a>互信息法</h6><p>　　互信息(Mutual Information)是信息论里一种有用的信息度量，它可以看成是一个随机变量中包含的关于另一个随机变量的信息量，或者说是一个随机变量由于已知另一个随机变量而减少的不肯定性。<br>　　经典的互信息<strong>评价定性自变量对定性因变量的相关性</strong>。<br>　　设两个随机变量(X, Y)的联合分布为p(x, y)，边缘分布分别为p(x), p(y)，互信息I(X, Y)是联合分布p(x, y)与边缘分布p(x)p(y)的相对熵，即：<br><img src="https://wx1.sbimg.cn/2020/07/19/CV0Ek.png" srcset="/img/loading.gif" lazyload alt="mutual info"><br> 　　关系图：<br><img src="https://wx2.sbimg.cn/2020/07/19/CVofa.png" srcset="/img/loading.gif" lazyload alt="mutual"><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> SelectKBest<br><span class="hljs-keyword">from</span> minepy <span class="hljs-keyword">import</span> MINE<br><br><span class="hljs-comment"># 定义mic方法将MINE设为函数式的，返回一个二元组，二元组的第2 项设置成固定的P值0.5</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mic</span><span class="hljs-params">(x, y)</span>:</span><br>m = MINE()<br>  m.compute_score(x, y)<br>  <span class="hljs-keyword">return</span> (m.mic(), <span class="hljs-number">0.5</span>)<br><br>SelectKBest(<span class="hljs-keyword">lambda</span> X, Y: array(map(<span class="hljs-keyword">lambda</span> x:mic(x, Y), X.T)).T,<br>k=<span class="hljs-number">2</span>).fit_transform(iris.data, iris.target)<br></code></pre></td></tr></table></figure></p><h5 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h5><p>　　包裹式特征选择直接把最终将要使用的模型的性能作为特征子集的评价标准，即包裹式特征选择的目的就是为给定的模型选择最有利于其性能的特征子集。从最终模型的性能来看，包裹式特征选择比过滤式特征选择更好，但需要多次训练模型，计算开销较大。<br><img src="https://wx2.sbimg.cn/2020/07/19/CVCpn.png" srcset="/img/loading.gif" lazyload alt="filter mutual"></p><h6 id="递归特征消除法"><a href="#递归特征消除法" class="headerlink" title="递归特征消除法"></a>递归特征消除法</h6><p>　　递归特征消除法使用一个基模型来进行多轮训练，每轮训练后，消除若干权值系数的特征，再基于新的特征集进行下一轮训练。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> RFE<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><br><span class="hljs-comment"># 此处选择LR为基模型(estimator)</span><br>RFE(estimator=LogisticRegression(), n_features_to_select=<span class="hljs-number">4</span>).fit_transform(data, target)<br></code></pre></td></tr></table></figure></p><h5 id="Embedded"><a href="#Embedded" class="headerlink" title="Embedded"></a>Embedded</h5><p>　　在前两种特征选择方法中，特征选择过程和模型训练过程是有明显分别的两个过程。嵌入式特征选择是<strong>将特征选择过程与学习器训练过程融为一体</strong>，两者在同一个优化过程中完成，即在学习器训练过程中自动地进行了特征选择。例如岭回归(Ridge)、LASSO回归。常利用正则化，如L1，L2范数，主要应用于如线性回归、逻辑回归以及支持向量机(SVM)等算法；使用决策树思想，包括决策树、随机森林、Gradient Boosting 等。<br>　　若使用L2范数正则化，则此时优化目标的公式即为岭回归(ridge regression)，若是L1范数正则化，则是LASSO回归(Least Absolute Shrinkage and Selection Operator)。L1范数和L2范数正则化都有助于降低过拟合风险，但前者还会带来一个额外的好处，它比后者更易于获得稀疏解，即它求得的w会有更少的非零分类。换言之，采用L1范数比L2范数更易于得到稀疏解。（参考<a href="https://zhuanlan.zhihu.com/p/120924870" target="_blank" rel="noopener">机器学习（六）：特征选择方法—Filter,Wrapper,Embedded</a>）</p><h6 id="基于惩罚项的特征选择法"><a href="#基于惩罚项的特征选择法" class="headerlink" title="基于惩罚项的特征选择法"></a>基于惩罚项的特征选择法</h6><p>　　使用带惩罚项的基模型，除了筛选出特征外，同时也进行了降维。<br>　　带L1惩罚项的LR：<br>  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> SelectFromModel<br><span class="hljs-title">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br> <br><span class="hljs-type">SelectFromModel</span>(<span class="hljs-type">LogisticRegression</span>(penalty=<span class="hljs-string">"l1"</span>, <span class="hljs-type">C</span>=<span class="hljs-number">0.1</span>)).fit_transform(<span class="hljs-class"><span class="hljs-keyword">data</span>, target)</span><br></code></pre></td></tr></table></figure></p><h6 id="基于树模型的特征选择法"><a href="#基于树模型的特征选择法" class="headerlink" title="基于树模型的特征选择法"></a>基于树模型的特征选择法</h6><p>　　GBDT作为基模型<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn.feature_selection <span class="hljs-keyword">import</span> SelectFromModel<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> GradientBoostingClassifier<br><br>SelectFromModel(GradientBoostingClassifier()).fit_transform(data, target)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言　　&quot;&gt;&lt;/a&gt;前言　　&lt;/h2&gt;&lt;p&gt;　　数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。&lt;/p&gt;
&lt;h2 id=&quot;特征工程&quot;&gt;&lt;a href=&quot;#特征
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据预处理——归一化与标准化</title>
    <link href="http://meurice.xyz/2020/ckotxwif1000g4wlxbzgoc55b/"/>
    <id>http://meurice.xyz/2020/ckotxwif1000g4wlxbzgoc55b/</id>
    <published>2020-07-17T09:33:10.000Z</published>
    <updated>2020-07-18T03:28:29.237Z</updated>
    
    <content type="html"><![CDATA[<p>归一化和标准化都属于四种Feature scaling（特征缩放）方法：<br>　　1.Rescaling(min-max normalization)<br>  <img src="https://wx1.sbimg.cn/2020/07/17/C8jCa.png" srcset="/img/loading.gif" lazyload alt="Rescaling"><br>　　2.Mean normalization<br>  <img src="https://wx2.sbimg.cn/2020/07/17/C8h9n.png" srcset="/img/loading.gif" lazyload alt="Mean normalization"><br>　　3.Standardization(Z-score normalization)<br>  <img src="https://wx1.sbimg.cn/2020/07/17/C8swh.png" srcset="/img/loading.gif" lazyload alt="Standardization"><br>　　4.Scaling to unit length<br>  <img src="https://wx2.sbimg.cn/2020/07/17/C8JrM.png" srcset="/img/loading.gif" lazyload alt="Scaling to unit length"></p><h2 id="归一化-Normalization"><a href="#归一化-Normalization" class="headerlink" title="归一化(Normalization)"></a>归一化(Normalization)</h2><h3 id="归一化目标"><a href="#归一化目标" class="headerlink" title="归一化目标"></a>归一化目标</h3><p>　　归一化将一列数据变化到某个固定区间（范围）中，这一区间通常是[0,1]，广义的讲，可以是各种区间，例如图像中可能会映射到[0,255]。<br>　　归一化使得各个特征维度对目标函数的影响权重是一致的，将有量纲的表达式，经过变换，化为无量纲的表达式，成为纯量，同时使得扁平分布的数据伸缩变换成类圆形。<br>　　概率模型不需要归一化，因为它们不关心变量的值，而是关心变量的分布和变量之间的条件概率，如决策树、rf。而像Adaboost、、xgboost、SVM、LR、KNN、KMeans之类的最优化问题就需要归一化。</p><h3 id="归一化带来的好处"><a href="#归一化带来的好处" class="headerlink" title="归一化带来的好处"></a>归一化带来的好处</h3><p>　　Feature Sacling(Normalization)对基于Gradient descent算法友好，可让算法最终收敛并且提高训练速度和精度。<br>  <img src="https://wx2.sbimg.cn/2020/07/17/C8wYT.jpg" srcset="/img/loading.gif" lazyload alt="scaling"></p><p>　　对于使用梯度下降算法来更新权重的训练过程，每一次更新的delta，除了与学习率有关，还与样本值本身也有关系。<br>  <img src="https://wx2.sbimg.cn/2020/07/17/C8vxJ.png" srcset="/img/loading.gif" lazyload alt="gd"><br>　　Xj(i)就是当前更新批次对应的样本值，因此值越大的样本单次更新权重更快，这就有可能带来收敛速度不一样甚至不收敛等问题。</p><h3 id="归一化算法："><a href="#归一化算法：" class="headerlink" title="归一化算法："></a>归一化算法：</h3><p>　　1.线性转换：x’ = (x - min(x)) / (max(x) - min(x))<br>　　2.对数函数转换：x’ = lg(x) / lg(max)，其中max表示样本数据的最大值，所有样本数据均要大于等于1。<br>　　3.arctan反正切函数转换：x’ = arctan(x) * (2 / pi)，应注意的是，若希望映射的区间为[0,1]，则数据都应该大于等于0，小于0的数据将被映射到[-1,0]区间上。<br>　　4.L2范数归一化：对向量X的每个维度数据x1, x2, …, xn都除以||x||2得到一个新向量，即<br>  <img src="https://wx1.sbimg.cn/2020/07/17/C8imm.png" srcset="/img/loading.gif" lazyload alt="l2"><br>　　经过L2范数归一化后，一组向量的欧式距离和它们的余弦相似度可以等价，严格数学证明可以参考<a href="https://www.cnblogs.com/Kalafinaian/p/11180519.html" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="标准化-Standardization"><a href="#标准化-Standardization" class="headerlink" title="标准化(Standardization)"></a>标准化(Standardization)</h2><h3 id="标准化目标"><a href="#标准化目标" class="headerlink" title="标准化目标"></a>标准化目标</h3><p>　　将数据变换为均值为0，标准差为1的分布（<strong>不一定是正态分布</strong>）。<br>　　<img src="https://wx2.sbimg.cn/2020/07/17/C8FgD.png" srcset="/img/loading.gif" lazyload alt="st"></p><h2 id="联系与差异"><a href="#联系与差异" class="headerlink" title="联系与差异"></a>联系与差异</h2><h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><p>　　· Normalization和Standardization都是使数值都落入到统一的数值范围，消除了数据量纲的影响。  </p><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>　　此处参考文章<a href="https://blog.csdn.net/weixin_36604953/article/details/102652160" target="_blank" rel="noopener">标准化和归一化，请勿混为一谈，透彻理解数据变换</a>。<br>　　· Normalization把数据限定在需要的范围，一般为[0,1]区间；Standardization将数据变换为μ=0，σ=1的分布，但没有严格规定区间。<br>　　· Normalization对数据的缩放比例仅仅和极值有关；但对于Standardization而言，若将除极大值和极小值外的数据更换，则均值和标准差也可能会因此改变，缩放比例也随之改变。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归一化和标准化都属于四种Feature scaling（特征缩放）方法：&lt;br&gt;　　1.Rescaling(min-max normalization)&lt;br&gt;  &lt;img src=&quot;https://wx1.sbimg.cn/2020/07/17/C8jCa.png&quot; sr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Linux设置定时任务</title>
    <link href="http://meurice.xyz/2020/ckotxwiet00084wlxeq794vmr/"/>
    <id>http://meurice.xyz/2020/ckotxwiet00084wlxeq794vmr/</id>
    <published>2020-07-16T11:40:44.000Z</published>
    <updated>2020-07-17T14:22:00.702Z</updated>
    
    <content type="html"><![CDATA[<p>环境：CentOS 8</p><h3 id="执行内容"><a href="#执行内容" class="headerlink" title="执行内容"></a>执行内容</h3><p>　　新建文件_crond.sh，作为定时执行的内容。<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">cd</span> /www/blog/hexo<br>git pull git@github.com:egname/egrepo.git<br><br><span class="hljs-comment">#echo pull successfully &gt; /home/gitpull.log</span><br></code></pre></td></tr></table></figure></p><h3 id="crontab服务"><a href="#crontab服务" class="headerlink" title="crontab服务"></a>crontab服务</h3><p>　　启动crontab服务，CentOS版本不同，具体命令可能有所差异。<br>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> crond<br></code></pre></td></tr></table></figure><br>　　启动服务</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">systemctl <span class="hljs-keyword">stop</span> crond            <span class="hljs-comment"># 关闭服务</span><br>systemctl restart crond         <span class="hljs-comment"># 重启服务     </span><br>systemctl reload crond          <span class="hljs-comment"># 重新载入配置</span><br>systemctl <span class="hljs-keyword">status</span> crond          <span class="hljs-comment"># 状态</span><br></code></pre></td></tr></table></figure><h3 id="设置计时器"><a href="#设置计时器" class="headerlink" title="设置计时器"></a>设置计时器</h3><p>　　crontab 选项 参数<br>　　选项:<br>　　　　-e：编辑该用户的计时器设置；<br>　　　　-l：列出该用户的计时器设置；<br>　　　　-r：删除该用户的计时器设置；<br>　　　　-u：指定要设定计时器的用户名称。<br>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">crontab -e</span><br></code></pre></td></tr></table></figure></p><p> 　　进入insert插入模式，以每五分钟执行一次为例。ESC后输入wq保存并退出。<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*/5 *</span> <span class="hljs-emphasis">* *</span> * /root/_crond.sh<br></code></pre></td></tr></table></figure><br>  <br></p><p>  关于Crontab更多具体用法，您可以参考<a href="https://www.cnblogs.com/muscles/p/9532451.html" target="_blank" rel="noopener">这篇文章</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：CentOS 8&lt;/p&gt;
&lt;h3 id=&quot;执行内容&quot;&gt;&lt;a href=&quot;#执行内容&quot; class=&quot;headerlink&quot; title=&quot;执行内容&quot;&gt;&lt;/a&gt;执行内容&lt;/h3&gt;&lt;p&gt;　　新建文件_crond.sh，作为定时执行的内容。&lt;br&gt;  &lt;figure cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[学习日志]2020 DIGIX全球校园AI算法精英大赛——赛道A</title>
    <link href="http://meurice.xyz/2020/ckotxwif0000e4wlx27tx9cno/"/>
    <id>http://meurice.xyz/2020/ckotxwif0000e4wlx27tx9cno/</id>
    <published>2020-07-16T04:23:28.000Z</published>
    <updated>2020-08-15T04:26:18.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2020-7-16"><a href="#2020-7-16" class="headerlink" title="2020.7.16"></a>2020.7.16</h2><p>　　7.20放赛题数据，先拿kaggle五年前的Click-Through Rate Prediction试水。</p><h3 id="分块读取全部数据"><a href="#分块读取全部数据" class="headerlink" title="分块读取全部数据"></a>分块读取全部数据</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">loop = <span class="hljs-literal">True</span><br>chunkSize = <span class="hljs-number">1000000</span><br>chunks = []<br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> loop:<br>    <span class="hljs-keyword">try</span>:<br>        print(index)<br>        chunk = train_data.get_chunk(chunkSize)<br>        chunks.append(chunk)<br>        index += <span class="hljs-number">1</span><br>  <span class="hljs-keyword">except</span> StopIteration:<br>        loop = <span class="hljs-literal">False</span><br>        print(<span class="hljs-string">"Iteration is stopped."</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(chunks):<br>    train_data = pd.concat(chunks, ignore_index=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="随机读取一定比例的数据"><a href="#随机读取一定比例的数据" class="headerlink" title="随机读取一定比例的数据"></a>随机读取一定比例的数据</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> pd.read_csv(train_data, chunksize=chunksize):<br>    chunks += <span class="hljs-number">1</span><br>    train = pd.concat([train, chunk.sample(frac=<span class="hljs-number">.05</span>, replace=<span class="hljs-literal">False</span>, random_state=<span class="hljs-number">42</span>)], axis=<span class="hljs-number">0</span>) <br>    print(<span class="hljs-string">'Processing Chunk '</span> + str(chunks))<br></code></pre></td></tr></table></figure><h3 id="条件筛选修改"><a href="#条件筛选修改" class="headerlink" title="条件筛选修改"></a>条件筛选修改</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">df[<span class="hljs-string">'column_d'</span>].loc[df[<span class="hljs-string">'column_c'</span>] == <span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-comment"># df['column_d'][df['column_c'] == 0] = 0</span><br></code></pre></td></tr></table></figure><h3 id="lightgbm-梯度提升决策树"><a href="#lightgbm-梯度提升决策树" class="headerlink" title="lightgbm 梯度提升决策树"></a>lightgbm 梯度提升决策树</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kfold_lightgbm</span><span class="hljs-params">(train, test, features, target, seed=<span class="hljs-number">42</span>, is_shuffle=True)</span>:</span><br>   train_pred = np.zeros((train.shape[<span class="hljs-number">0</span>],))<br>   test_pred = np.zeros((test.shape[<span class="hljs-number">0</span>],))<br>   n_splits = <span class="hljs-number">5</span>  <br>   <br>   fold = KFold(n_splits=n_splits, shuffle=is_shuffle, random_state=seed)<br>   kf_way = fold.split(train[features])<br><br>   params = &#123;<br>       <span class="hljs-string">'learning_rate'</span>: <span class="hljs-number">0.003</span>,<br>       <span class="hljs-string">'boosting_type'</span>: <span class="hljs-string">'gbdt'</span>,<br>       <span class="hljs-string">'objective'</span>: <span class="hljs-string">'regression'</span>,<br>       <span class="hljs-string">'num_leaves'</span>: <span class="hljs-number">36</span>,<br>       <span class="hljs-string">'metric'</span>: <span class="hljs-string">'mse'</span>,<br>       <span class="hljs-string">'feature_fraction'</span>: <span class="hljs-number">0.6</span>,<br>       <span class="hljs-string">'bagging_fraction'</span>: <span class="hljs-number">0.7</span>,<br>       <span class="hljs-string">'bagging_freq'</span>: <span class="hljs-number">6</span>,<br>       <span class="hljs-string">'seed'</span>: <span class="hljs-number">42</span>,<br>       <span class="hljs-string">'bagging_seed'</span>: <span class="hljs-number">1</span>,<br>       <span class="hljs-string">'feature_fraction_seed'</span>: <span class="hljs-number">7</span>,<br>       <span class="hljs-string">'min_data_in_leaf'</span>: <span class="hljs-number">7</span>,<br>       <span class="hljs-string">'nthread'</span>: <span class="hljs-number">8</span>,<br>       <span class="hljs-string">'verbose'</span>: <span class="hljs-number">1</span>,<br>   &#125;<br>   fold_importance_df = pd.DataFrame()<br>   <span class="hljs-keyword">for</span> n_fold, (train_idx, valid_idx) <span class="hljs-keyword">in</span> enumerate(kf_way, start=<span class="hljs-number">1</span>):<br>       train_x, train_y = train[features].iloc[train_idx], train[target].iloc[train_idx]<br>       valid_x, valid_y = train[features].iloc[valid_idx], train[target].iloc[valid_idx]<br><br>       n_train = lgb.Dataset(train_x, label=train_y)<br>       n_valid = lgb.Dataset(valid_x, label=valid_y)<br><br>       clf = lgb.train(<br>           params= params,<br>           train_set= n_train,<br>           num_boost_round= <span class="hljs-number">10000</span>,<br>           valid_sets= [n_valid],<br>           early_stopping_rounds= <span class="hljs-number">150</span>,<br>           verbose_eval= <span class="hljs-number">100</span><br>       )<br>       train_pred[valid_idx] = clf.predict(valid_x, num_iteration=clf.best_iteration)<br>       test_pred += clf.predict(test[features], num_iteration=clf.best_iteration) / fold.n_splits<br><br>       fold_importance_df[<span class="hljs-string">"Feature"</span>] = features<br>       fold_importance_df[<span class="hljs-string">"importance"</span>] = clf.feature_importance(importance_type=<span class="hljs-string">'gain'</span>)<br>       fold_importance_df[<span class="hljs-string">"fold"</span>] = n_splits<br><br>   test[TARGET] = test_pred<br>   <span class="hljs-keyword">return</span> test[[<span class="hljs-string">'id'</span>, TARGET]], fold_importance_df<br></code></pre></td></tr></table></figure><h3 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> cat_features:<br>    ce_oe = ce.OrdinalEncoder(cols=cat_features, handle_unknown=<span class="hljs-string">'impute'</span>)<br>    ce_oe.fit(train)<br>    train = ce_oe.transform(train)<br>    test = ce_oe.transform(test)<br></code></pre></td></tr></table></figure><h2 id="2020-7-20"><a href="#2020-7-20" class="headerlink" title="2020.7.20"></a>2020.7.20</h2><p>　　下午官网放了赛题数据，随机抽了5%的数据放进GBDT跑了一下，目测效果并不是很好，CTR标签分布很不均匀，训练集标签为1的样本大概只占到了3%。</p><h3 id="结果出现负值"><a href="#结果出现负值" class="headerlink" title="结果出现负值"></a>结果出现负值</h3><p>　　GBDT是加法模型，下一轮都是上一轮预测值和实际值的残差作为label继续拟合，将结果相加，最后可能会出现负值，特别是例如CTR场景下大部分标签都为0的场景下更容易出现这种情况。</p><h2 id="2020-7-21"><a href="#2020-7-21" class="headerlink" title="2020.7.21"></a>2020.7.21</h2><p>　　丢了几个缺失比较大的特征，对数据做了简单随机采样之后跑lgb5折交了一发，线上分数能到0.7，比预想中的要好，还有一定的提升空间，下一步打算从模型角度切入。</p><h2 id="2020-7-22"><a href="#2020-7-22" class="headerlink" title="2020.7.22"></a>2020.7.22</h2><h3 id="error-Only-one-class-present-in-y-true"><a href="#error-Only-one-class-present-in-y-true" class="headerlink" title="error:Only one class present in y_true"></a>error:Only one class present in y_true</h3><p>　　DeepFM训练过程报错：Only one class present in y_true. ROC AUC score is not defined in that case.<br>　　定义的AUROC函数如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auroc</span><span class="hljs-params">(y_true, y_pred)</span>:</span><br><span class="hljs-keyword">return</span> tf.compat.v1.py_func(roc_auc_score, (y_true, y_pred), tf.double)<br></code></pre></td></tr></table></figure><br>　　AUC（ROC 曲线下的面积）需要足够数量的任一类才能有意义，而CTR样本中本身就存在着非常严重的正负样本不平衡的问题。<br>　　目前解决方案如下：<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># AUC for a binary classifier</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auc</span><span class="hljs-params">(y_true, y_pred)</span>:</span><br>    ptas = tf.stack([binary_PTA(y_true, y_pred, k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)], axis=<span class="hljs-number">0</span>)<br>    pfas = tf.stack([binary_PFA(y_true, y_pred, k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)], axis=<span class="hljs-number">0</span>)<br>    pfas = tf.concat([tf.ones((<span class="hljs-number">1</span>,)), pfas], axis=<span class="hljs-number">0</span>)<br>    binSizes = -(pfas[<span class="hljs-number">1</span>:] - pfas[:<span class="hljs-number">-1</span>])<br>    s = ptas * binSizes<br>    <span class="hljs-keyword">return</span> K.sum(s, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># PFA, prob false alert for binary classifier</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_PFA</span><span class="hljs-params">(y_true, y_pred, threshold=K.variable<span class="hljs-params">(value=<span class="hljs-number">0.5</span>)</span>)</span>:</span><br>    y_pred = K.cast(y_pred &gt;= threshold, <span class="hljs-string">'float32'</span>)<br>    <span class="hljs-comment"># N = total number of negative labels</span><br>    N = K.sum(<span class="hljs-number">1</span> - y_true)<br>    <span class="hljs-comment"># FP = total number of false alerts, alerts from the negative class labels</span><br>    FP = K.sum(y_pred - y_pred * y_true)<br>    <span class="hljs-keyword">return</span> FP / N<br><br><span class="hljs-comment"># -----------------------------------------------------------------------------</span><br><span class="hljs-comment"># P_TA prob true alerts for binary classifier</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_PTA</span><span class="hljs-params">(y_true, y_pred, threshold=K.variable<span class="hljs-params">(value=<span class="hljs-number">0.5</span>)</span>)</span>:</span><br>    y_pred = K.cast(y_pred &gt;= threshold, <span class="hljs-string">'float32'</span>)<br>    <span class="hljs-comment"># P = total number of positive labels</span><br>    P = K.sum(y_true)<br>    <span class="hljs-comment"># TP = total number of correct alerts, alerts from the positive class labels</span><br>    TP = K.sum(y_pred * y_true)<br>    <span class="hljs-keyword">return</span> TP / P<br></code></pre></td></tr></table></figure><br>　　也可在整个训练过程完成后，在vaild_set上计算auc。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">pred_ans_val = model.predict(vaild_model_input, batch_size=<span class="hljs-number">512</span>)<br>print(<span class="hljs-string">'val_auc'</span>, roc_auc_score(vaild[target].values, pred_ans_val))<br></code></pre></td></tr></table></figure></p><h2 id="2020-7-24"><a href="#2020-7-24" class="headerlink" title="2020.7.24"></a>2020.7.24</h2><h3 id="DeepFM参数调整"><a href="#DeepFM参数调整" class="headerlink" title="DeepFM参数调整"></a>DeepFM参数调整</h3><p>　　<em> <strong>Regression</strong><br>　　This implementation also supports regression task. To use DeepFM for regression, you can set loss_type as mse. Accordingly, you should use eval_metric for regression, e.g., mse or mae.</em><br>　　DeepFM中task参数调整为regression后，loss也需随之进行更改。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">model = DeepFM(<br>linear_feature_columns=linear_feature_columns,<br>dnn_feature_columns=dnn_feature_columns,<br>task=<span class="hljs-string">'regression'</span>,<br>l2_reg_embedding=<span class="hljs-number">1e-5</span><br>  )<br>  <br>  model.compile(<br>  <span class="hljs-string">'adam'</span>,<br>  <span class="hljs-string">'mse'</span>,<br>  metrics=[<span class="hljs-string">'accuracy'</span>]<br>      )<br></code></pre></td></tr></table></figure></p><h2 id="2020-7-29"><a href="#2020-7-29" class="headerlink" title="2020.7.29"></a>2020.7.29</h2><h3 id="onehot编码"><a href="#onehot编码" class="headerlink" title="onehot编码"></a>onehot编码</h3><p>　　OneHotEncoder 的输入为 2-D array，data[feat] 返回的 Series 为 1-D array。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> feat <span class="hljs-keyword">in</span> cat_features:<br>ohe = OneHotEncoder()<br>data[feat] = ohe.fit_transform(data[[feat]])<br></code></pre></td></tr></table></figure><br>　　将data[feat]改为data[[feat]]</p><h2 id="2020-8-14"><a href="#2020-8-14" class="headerlink" title="2020.8.14"></a>2020.8.14</h2><h3 id="Error-Input-contains-NaN"><a href="#Error-Input-contains-NaN" class="headerlink" title="Error:Input contains NaN"></a>Error:Input contains NaN</h3><p>　　报错<em>ValueError: Input contains NaN, infinity or a value too large for dtype(‘float32’).</em><br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> tr_x.columns:<br><span class="hljs-keyword">if</span>(df[index].isna().T.any()):<br>  print(index,df[index].isna())<br><span class="hljs-comment"># ------</span><br>print(df[df.isnull().T.any()])<br></code></pre></td></tr></table></figure><br>　　若检查dataframe无空值后仍然报错。可尝试检查dataframe索引是否连续。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">df.reset_index(drop=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure></p><h2 id="2020-8-15"><a href="#2020-8-15" class="headerlink" title="2020.8.15"></a>2020.8.15</h2><h3 id="pandas-apply设置进度条"><a href="#pandas-apply设置进度条" class="headerlink" title="pandas apply设置进度条"></a>pandas apply设置进度条</h3><p>　　apply速度较慢，可设置进度条实时显示处理进度。<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>tqdm.pandas(desc=<span class="hljs-string">'pandas bar'</span>)<br><br>test[<span class="hljs-string">'B'</span>] = test.progress_apply(<span class="hljs-keyword">lambda</span> x:func(x[<span class="hljs-string">'A'</span>]), axis=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2020-7-16&quot;&gt;&lt;a href=&quot;#2020-7-16&quot; class=&quot;headerlink&quot; title=&quot;2020.7.16&quot;&gt;&lt;/a&gt;2020.7.16&lt;/h2&gt;&lt;p&gt;　　7.20放赛题数据，先拿kaggle五年前的Click-Through Rate
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo+Nginx搭建静态页面博客</title>
    <link href="http://meurice.xyz/2020/ckotxwies00064wlx7dbofrqe/"/>
    <id>http://meurice.xyz/2020/ckotxwies00064wlx7dbofrqe/</id>
    <published>2020-07-15T07:54:00.000Z</published>
    <updated>2020-07-16T10:32:32.590Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架，且支持 Markdown 语法。</p><p>• 本地环境配置：Node.js+Git+Hexo <br><br>• ECS环境配置：(CentOs 8) Node.js+Git+Pm2+Nginx <br><br>• 安全组配置：阿里云ECS <br><br>• 域名：腾讯云域名解析 <br><br>• Webhook：Github</p><h3 id="本地环境配置"><a href="#本地环境配置" class="headerlink" title="本地环境配置 "></a>本地环境配置 <br></h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js "></a>Node.js <br></h4><p>　Node.js官网<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>，安装目录尽量不要包括空格，命令行下<code>node -v</code>验证是否安装成功。<br><br>　或通过<a href="https://npm.taobao.org/mirrors/node" target="_blank" rel="noopener">淘宝npm镜像</a>安装。</p><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git<br></h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>　Git官网 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，命令行<code>git --version</code>验证。</p><h5 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h5><p>　　配置Github用户名 <br><br>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"example"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"example@email.com"</span><br></code></pre></td></tr></table></figure><br>　　生成秘钥<br>  <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ssh</span>-keygen -t rsa -<span class="hljs-keyword">b </span><span class="hljs-number">4096</span> -C <span class="hljs-string">"example@email.com"</span><br></code></pre></td></tr></table></figure></p><p>　　~/.ssh文件夹下生成id_rsa.pub公有密钥，依次进入Github——Settings——SSH and GPG keys，添加SSH key，将d_rsa.pub中的内容放入Key中。具体可以参考<a href="https://blog.csdn.net/playboyanta123/article/details/49611873?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">这篇文章</a>，Linux系统可以参考<a href="https://blog.csdn.net/qq_36663951/article/details/78749217?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-1" target="_blank" rel="noopener">这篇文章</a>。</p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo<br></h4><p>　　npm全局安装<br>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">sudo npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></p><p>　　验证<br> <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure></p><p>　　新建文件夹用来存放Hexo代码，在该文件夹下执行命令行。<br>　　初始化Hexo，生成相关文件。<br> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo -init</span><br></code></pre></td></tr></table></figure></p><p>　　安装相关依赖<br> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure></p><p>　　预览效果<br> <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br></code></pre></td></tr></table></figure><br>　　浏览器进入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><h4 id="发布到Github"><a href="#发布到Github" class="headerlink" title="发布到Github"></a>发布到Github<br></h4><p>　　安装git部署工具<br>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><br>　　修改_config.yml，repo字段修改为github仓库的SSH链接。<br>  <figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<br><span class="hljs-attribute">type</span>: git<br><span class="hljs-attribute">repo</span>:git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:egname/egrepo.git<br><span class="hljs-attribute">branch</span>: master<br></code></pre></td></tr></table></figure><br>　　代码上传至Github<br>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure></p><h3 id="ECS环境配置"><a href="#ECS环境配置" class="headerlink" title="ECS环境配置 "></a>ECS环境配置 <br></h3><p>　　服务器为阿里云ECS云服务器，CentOS 8。</p><h4 id="Node-js-1"><a href="#Node-js-1" class="headerlink" title="Node.js"></a>Node.js<br></h4><p>　　采用yum方式安装<br>   <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">curl -sL https://rpm.nodesource.com/setup_10.x | bash -<br>yum install -y nodejs<br><br><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span> <span class="hljs-comment"># 验证</span><br></code></pre></td></tr></table></figure></p><h4 id="Git-1"><a href="#Git-1" class="headerlink" title="Git "></a>Git <br></h4>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> git<br><br>git --version <span class="hljs-comment"># 验证</span><br></code></pre></td></tr></table></figure><h5 id="SSH配置-1"><a href="#SSH配置-1" class="headerlink" title="SSH配置"></a>SSH配置<br></h5>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name <span class="hljs-string">"example"</span><br>git<span class="hljs-built_in"> config </span>--global user.email <span class="hljs-string">"example@email.com"</span><br><br>ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">"example@email.com"</span><br></code></pre></td></tr></table></figure><p>　　复制公有密钥，在Github上添加新的SSH key，具体可参考上文本地配置。<br>  <figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> ~<span class="hljs-string">/.ssh</span><br>cat id_rsa.pub<br></code></pre></td></tr></table></figure><br>　　从Github仓库中克隆代码。<br>  <figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">cd</span> <span class="hljs-string">/</span><br><span class="hljs-attr">mkdir</span> <span class="hljs-string">www</span><br> <br><span class="hljs-attr">cd</span> <span class="hljs-string">www</span><br><span class="hljs-attr">mkdir</span> <span class="hljs-string">blog</span><br><br><span class="hljs-attr">cd</span> <span class="hljs-string">blog</span><br><span class="hljs-attr">git</span> <span class="hljs-string">clone git@github.com:egname/egrepo.git</span><br></code></pre></td></tr></table></figure></p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx "></a>Nginx <br></h4><p>　　安装EPEL存储库<br>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo yum <span class="hljs-keyword">install</span> epel-<span class="hljs-keyword">release</span><br></code></pre></td></tr></table></figure></p><p>　　安装Nginx<br>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure><br>　　启动Nginx，设置自启动<br>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo systemctl <span class="hljs-keyword">start</span> nginx<br>sudo systemctl <span class="hljs-keyword">enable</span> nginx<br></code></pre></td></tr></table></figure></p><h5 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h5><p>　　进入etc/nginx文件夹下的nginx.conf<br>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> /etc/nginx/nginx.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><br>　　修改配置文件<br>  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>  <span class="hljs-attribute">server_name</span> www.example.com;<br>  <span class="hljs-attribute">root</span> /www/blog/example;<br>  <span class="hljs-attribute">include</span> /etc/nginx/default.d/<span class="hljs-regexp">*.conf</span>;<br>  <br>  <span class="hljs-attribute">location</span> / &#123;<br>    <span class="hljs-attribute">root</span> /www/blog/example;<br>    <span class="hljs-attribute">index</span> index.jsp index.html index.htm;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>　　重启Nginx<br>  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart nginx</span><br></code></pre></td></tr></table></figure></p><h3 id="安全组配置"><a href="#安全组配置" class="headerlink" title="安全组配置"></a>安全组配置</h3><p>　　以阿里云ECS为例。<br>　　进入控制台——网络与安全——安全组，添加入方向规则。<br>　　添加端口范围分别为80/80（HTTP），443/443（HTTPS），7777/7777（Webhook），授权对象均为0.0.0.0/0。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>　　以腾讯云为例。<br>　　DNS 解析 DNSPod——域名解析列表——选择域名——添加记录——快速添加网站解析——指定服务器主机IP（公网）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架，且支持 Markdown 语法。&lt;/p&gt;
&lt;p&gt;• 本地环境配置：Node.js+Git+Hexo &lt;br&gt;&lt;br&gt;• ECS环境配置：(CentOs 8) Node.js+Git+Pm2+Nginx &lt;br&gt;&lt;br&gt;• 安全组配
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://meurice.xyz/2020/ckotxwieu00094wlx5wfpblzo/"/>
    <id>http://meurice.xyz/2020/ckotxwieu00094wlx5wfpblzo/</id>
    <published>2020-07-15T04:29:57.340Z</published>
    <updated>2020-07-15T04:29:57.340Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
